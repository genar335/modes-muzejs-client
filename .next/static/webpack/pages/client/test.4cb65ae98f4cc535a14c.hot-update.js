webpackHotUpdate_N_E("pages/client/test",{

/***/ "./pages/client/test.tsx":
/*!*******************************!*\
  !*** ./pages/client/test.tsx ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/asyncToGenerator */ \"./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/router */ \"./node_modules/next/dist/client/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _styles_test_module_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../styles/test.module.scss */ \"./pages/styles/test.module.scss\");\n/* harmony import */ var _styles_test_module_scss__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_styles_test_module_scss__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var react_dnd__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-dnd */ \"./node_modules/react-dnd/dist/esm/index.js\");\n/* harmony import */ var react_dnd_touch_backend__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-dnd-touch-backend */ \"./node_modules/react-dnd-touch-backend/dist/esm/index.js\");\n/* harmony import */ var react_draggable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-draggable */ \"./node_modules/react-draggable/build/cjs/cjs.js\");\n/* harmony import */ var react_draggable__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react_draggable__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var store__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! store */ \"./node_modules/store/dist/store.legacy.js\");\n/* harmony import */ var store__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(store__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _components_constants__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../components/constants */ \"./components/constants.ts\");\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! framer-motion */ \"./node_modules/framer-motion/dist/framer-motion.es.js\");\n/* harmony import */ var _components_TestProgressBar__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../components/TestProgressBar */ \"./components/TestProgressBar.tsx\");\n/* harmony import */ var _components_PagesController__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../components/PagesController */ \"./components/PagesController.tsx\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_14__);\n\n\n\n\nvar _jsxFileName = \"/Users/yberfox/Documents/personal-projects/modes-muzejs-client/pages/client/test.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement;\n\n // import interact from \"interactjs\";\n\n\n\n\n\n\n\n\n\n\n\n\nfunction Test(props) {\n  _s();\n\n  var _this = this;\n\n  var router = Object(next_router__WEBPACK_IMPORTED_MODULE_4__[\"useRouter\"])();\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(),\n      pages = _useState[0],\n      setPages = _useState[1];\n\n  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])([]),\n      pagesContent = _useState2[0],\n      setPagesContent = _useState2[1]; // const [qnaOverlaps, setQnaOverlaps] = useState(0);\n\n\n  var qnaOverlaps = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useRef\"])({\n    counter: 0\n  }); // const [currentPage, setCurrentPage] = useState<number>(0);\n\n  var initialPage = {\n    count: 0\n  };\n\n  function reducer(page, action) {\n    console.log(pages === null || pages === void 0 ? void 0 : pages.length);\n    console.log(page.count, \"counter\");\n\n    switch (action.type) {\n      case \"increment\":\n        if (page.count + 1 !== (pages === null || pages === void 0 ? void 0 : pages.length)) {\n          return {\n            count: page.count + 1\n          };\n        } else {\n          return {\n            count: page.count\n          };\n        }\n\n      case \"decrement\":\n        if (page.count !== 0) {\n          return {\n            count: page.count - 1\n          };\n        } else {\n          return {\n            count: page.count\n          };\n        }\n\n      default:\n        throw new Error();\n    }\n  }\n\n  var _useReducer = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useReducer\"])(reducer, initialPage),\n      page = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    if (page.count + 1 === pagesContent.length && page.count !== 0 && pagesContent.length !== 0 // !props.test\n    ) {\n        console.log(page.count);\n        console.log(pagesContent.length);\n      }\n  });\n\n  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])({\n    q: {},\n    a: {}\n  }),\n      qaRectPositions = _useState3[0],\n      setqaRectPositions = _useState3[1]; // useEffect(() => {\n  //   console.log(qaRectPositions.a?.x, qaRectPositions.q?.x, \"x, x\");\n  // }, [qaRectPositions]);\n\n\n  var refsToQuestions = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useRef\"])([]);\n  var refsToAnswersHandles = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useRef\"])([]);\n  var refsToAnswersPositions = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useRef\"])([]);\n\n  var _useState4 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(),\n      test = _useState4[0],\n      setTest = _useState4[1];\n\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    if (props.test) {\n      setPagesContent(props.test.ru.pages);\n    } else {\n      console.log(router.query); //TODO: direct to /client/success?testid=${testid}&lang=${lang} once test is finished\n\n      var chosenLang = router.query.lang;\n\n      var _test = store__WEBPACK_IMPORTED_MODULE_9___default.a.get(\"theTest\");\n\n      setTest(_test);\n      console.log(chosenLang);\n      setPagesContent(_test[store__WEBPACK_IMPORTED_MODULE_9___default.a.get(\"activeLang\")].pages);\n    } // createQnAPairs(activeLang.pages);\n\n  }, []);\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    var pagesPrep = prepareJSXOfPages(refsToQuestions); // console.log(pagesPrep);\n  }, [pagesContent]); // console.log(qnaOverlaps.current.counter);\n\n  function isImgOrText(data) {\n    return data.match(_components_constants__WEBPACK_IMPORTED_MODULE_10__[\"URLCheckForLocalHost\"]) ? true : false;\n  }\n  /**\n   * Returns either an <img> or <p> containig the `data`\n   * @param data string containing eihter the text of a question/answer or a link to the image\n   */\n\n\n  function imgOrText(data) {\n    // console.log(data);\n    // console.log(data.match(URLCheckFor192.168.8.100));\n    if (data.match(_components_constants__WEBPACK_IMPORTED_MODULE_10__[\"URLCheckForLocalHost\"]) !== null) {\n      return __jsx(\"img\", {\n        style: {\n          width: \"100%\",\n          height: \"100%\",\n          objectFit: \"cover\",\n          borderRadius: \"16px\",\n          border: \"#cba992 solid 3px\"\n        },\n        src: data,\n        alt: \":(\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }\n      });\n    } else {\n      return (// <div>\n        __jsx(\"p\", {\n          style: {\n            width: \"100%\",\n            margin: \"0\",\n            padding: \"1rem\",\n            boxSizing: \"border-box\",\n            textAlign: \"center\",\n            lineHeight: \"110%\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 17\n          }\n        }, data) // </div>\n\n      );\n    }\n  }\n\n  function handleDrag(event, data) {\n    // console.log(data);\n    // alert(\"Dragging\");\n    var tmp = event.target.parentElement.parentElement.id; // console.log(tmp);\n\n    var id = tmp.slice(tmp.indexOf(\"_\") + 1, tmp.lastIndexOf(\"_\")); // console.log(id);\n\n    refsToAnswersPositions.current[id] = {\n      position: data\n    };\n  }\n\n  function handleStopOfADrag(event, data) {\n    if (event.target.parentElement.parentElement.classList[0].includes(\"test_TCard\")) {\n      var tmp = event.target.parentElement.parentElement.id;\n      \"\";\n      var id = tmp.slice(tmp.indexOf(\"_\") + 1, tmp.lastIndexOf(\"_\"));\n\n      var _getRectanglesFromEve = getRectanglesFromEvent(event),\n          questionRect = _getRectanglesFromEve.questionRect,\n          answerRect = _getRectanglesFromEve.answerRect;\n\n      var intersections = refsToQuestions.current.map(function (q) {\n        return CheckIfAnswerIntersectedTheQuestion(q.getBoundingClientRect(), answerRect);\n      });\n      console.log(intersections);\n\n      if (CheckIfAnswerIntersectedTheQuestion(questionRect, answerRect)) {\n        // event.target.parentNode.parentNode.style.pointerEvents = \"none\";\n        applyCSSToMatchedCards(event, refsToQuestions.current[id]);\n        qnaOverlaps.current.counter += 1;\n        console.log(refsToQuestions.current[id]);\n        var questionContainer = refsToQuestions.current[id].parentElement; // console.log(questionContainer, \"123123\");\n        // console.log(refsToAnswersHandles.current[id]);\n\n        refsToAnswersHandles.current[id].parentElement.style.transform = \"translate(0px, 0px)\";\n        refsToAnswersHandles.current[id].parentElement.style.marginTop = \"-1rem\";\n        questionContainer.appendChild(refsToAnswersHandles.current[id].parentElement); // event.target.style.pointerEvents.parentElement = \"none\";\n\n        if (qnaOverlaps.current.counter === 3) {\n          // alert(pagesContent.length);\n          // if (page.count < pagesContent.length - 1) {\n          refsToQuestions.current = []; // setCurrentPage(currentPage + 1);\n          // setTimeout(() => {\n\n          dispatch({\n            type: \"increment\"\n          }); // }, 1000);\n\n          console.log(page.count, \"pages\", pagesContent.length, \"pagesContent\"); // }\n\n          qnaOverlaps.current.counter = 0;\n        }\n      } else {\n        intersections.includes(true) && flashScreen();\n      } // refsToAnswersPositions.current[id] = {\n      //   position: {\n      //     x: data.x,\n      //     y: data.y,\n      //     deltaX: data.x - data.lastX,\n      //     deltaY: data.y - data.lastY,\n      //   },\n      // };\n\n\n      refsToAnswersPositions.current[id] = {\n        position: data\n      };\n    }\n  }\n\n  function flashScreen() {\n    return _flashScreen.apply(this, arguments);\n  }\n\n  function _flashScreen() {\n    _flashScreen = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee() {\n      var testBody;\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              testBody = document.getElementsByClassName(_styles_test_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.pageContainer)[0];\n              testBody.style.boxShadow = \"inset 0px 0px 30px 30px red\";\n              setTimeout(function () {\n                return testBody.style.boxShadow = \"none\";\n              }, 500);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _flashScreen.apply(this, arguments);\n  }\n\n  function applyCSSToMatchedCards(event, answer) {\n    // // Sets the contasiner of cards to be unclickable/untouchable.\n    // event.target.parentElement.parentElement.parentElement.parentElement.style.pointerEvents =\n    //   \"none\";\n    console.log(answer.parentElement);\n    answer.parentElement.style.pointerEvents = \"none\"; // answer.style.width = \"100rem\";\n    //* Applies a greenish border around answer cards.\n\n    console.log(event.target.tagName);\n\n    if (event.target.tagName == \"P\") {\n      console.log(event.target.parentElement.parentElement.style.border);\n      event.target.parentElement.parentElement.style.border = \"solid 5px rgb(37, 180, 150)\";\n      event.target.parentElement.parentElement.parentElement.style.position = \"inherit\";\n      console.log(event.target.parentElement.parentElement.style.border);\n    } else if (event.target.tagName == \"IMG\") {\n      console.log(event.target); // event.target.style.border = \"none\";\n\n      event.target.style.border = \"solid 5px rgb(37, 180, 150)\";\n      event.target.style.borderColor = \"rgb(73, 180, 150,)\";\n      event.target.parentElement.parentElement.parentElement.style.position = \"inherit\";\n    }\n  }\n  /**\n   * Checks whether the dragged element intersects its question.\n   * @param event refer to React Draggable\n   */\n\n\n  function CheckIfAnswerIntersectedTheQuestion(questionRect, answerRect) {\n    // const { questionRect, answerRect } = getRectangles(event);\n    // let answerRect = answerDragged.parentElement!.getBoundingClientRect();\n    setqaRectPositions({\n      q: questionRect,\n      a: answerRect\n    });\n\n    if (questionRect.x < answerRect.x + answerRect.width && questionRect.x + questionRect.width > answerRect.x) {\n      if (questionRect.y < answerRect.y + answerRect.height && questionRect.y + questionRect.height > answerRect.y) {\n        // console.log(answerDragged.parentElement?.parentElement, \"oi\");\n        // answerDragged.parentElement!.style.filter = \"brightness(0.5)\";\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function getRectanglesFromEvent(event) {\n    setqaRectPositions({});\n    var answerDragged = event.target.parentElement.parentElement;\n    console.log(answerDragged, 'answer');\n    var answerDraggedID = answerDragged.id; // const relatedQuestion = document.getElementById(\n    //   `Question_${answerDraggedID.slice(answerDraggedID.indexOf(\"_\"))}`\n    // );\n\n    var answerDraggedIterator = answerDraggedID.slice(answerDraggedID.indexOf(\"_\") + 1, answerDraggedID.lastIndexOf(\"_\"));\n    var relatedAnswerHandle = refsToAnswersHandles.current[Number(answerDraggedIterator)]; // console.log(relatedAnswerHandle, \"handles\");\n\n    var relatedQuestionHandle = refsToQuestions.current[Number(answerDraggedIterator)];\n    console.log(relatedQuestionHandle, \"handles\");\n    var questionRect = relatedQuestionHandle.getBoundingClientRect();\n    var answerRect = answerDragged.getBoundingClientRect(); // const answerRect = relatedAnswerHandle.getBoundingClientRect();\n\n    return {\n      questionRect: questionRect,\n      answerRect: answerRect\n    };\n  }\n\n  var TestCompletionAcknowledgement = function TestCompletionAcknowledgement() {\n    return {\n      ru: \"\\u0422\\u0435\\u0441\\u0442 \\\"\".concat(props.test ? props.test[props.activeLanguage].name : store__WEBPACK_IMPORTED_MODULE_9___default.a.get(\"theTest\").ru.name, \"\\\" \\u043F\\u0440\\u043E\\u0439\\u0434\\u0435\\u043D.\"),\n      lv: \"Tests \\\"\".concat(props.test ? props.test[props.activeLanguage].name : store__WEBPACK_IMPORTED_MODULE_9___default.a.get(\"theTest\").lv.name, \"\\\" ir pabeigts.\"),\n      en: \"Test \\\"\".concat(props.test ? props.test[props.activeLanguage].name : store__WEBPACK_IMPORTED_MODULE_9___default.a.get(\"theTest\").en.name, \"\\\" is compeleted.\")\n    };\n  };\n\n  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(\"\"),\n      clientEmail = _useState5[0],\n      setClientEmail = _useState5[1];\n\n  var emailRef = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useRef\"])(\"\");\n\n  function prepareLastPageJSX(body, heading, email) {\n    console.log(heading, body);\n    return __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-evenly\",\n        alignItems: \"center\",\n        flexDirection: \"row\",\n        width: \"100%\",\n        height: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        width: \"50%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 17\n      }\n    }, __jsx(\"h1\", {\n      style: {\n        color: \"#c6aa96\",\n        textAlign: \"center\",\n        fontWeight: 300,\n        fontSize: \"60px\",\n        margin: \"0\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 21\n      }\n    }, heading), __jsx(\"p\", {\n      style: {\n        fontSize: \"36px\",\n        fontWeight: 300,\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 21\n      }\n    }, body)), __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        width: \"40%\",\n        height: \"160px\",\n        justifyContent: \"space-around\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 17\n      }\n    }, email && // <form onSubmit={(e) => e.preventDefault()}>\n    __jsx(\"input\", {\n      onChange: function onChange(e) {\n        emailRef.current = e.target.value;\n        console.log(emailRef.current, \"ref\"); // setClientEmail(e.target.value);\n\n        console.log(clientEmail, \"state\");\n        console.log(e.target.value);\n        console.log(e.currentTarget.value);\n      },\n      autoComplete: \"off\",\n      style: {\n        // position: \"absolute\",\n        background: \"rgba(0, 0, 0, 0)\",\n        color: \"#C6AA96\",\n        border: \"#C6AA96 solid 3px\",\n        padding: \"0\",\n        borderRadius: \"16px\",\n        // width: \"100%\",\n        height: \"30%\",\n        fontSize: \"35px\",\n        textAlign: \"center\"\n      },\n      placeholder: \"example@mail.com\",\n      type: \"email\",\n      name: \"userInfo\",\n      id: \"userEmail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 25\n      }\n    }), __jsx(\"button\", {\n      style: {\n        width: \"100%\",\n        height: \"45%\",\n        backgroundColor: \"#C6AA96\",\n        border: \"none\",\n        borderRadius: \"16px\",\n        padding: \"0\" // WebkitTextFillColor: \"transparent\",\n        // WebkitBackgroundClip: \"text\",\n\n      },\n      onClick: handleSendBtnClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 21\n      }\n    }, __jsx(\"p\", {\n      style: {\n        margin: \"0\",\n        color: \"black\",\n        fontFamily: \"Montserrat\",\n        fontSize: \"40px\",\n        fontWeight: 700,\n        background: \"whatever\",\n        letterSpacing: 6 // WebkitTextFillColor: \"transparent\",\n        // WebkitBackgroundClip: \"text\",\n\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 25\n      }\n    }, getBtnText().toLocaleUpperCase()))));\n\n    function getBtnText() {\n      return getLang() === \"en\" ? \"Finish\" : getLang() === \"lv\" ? \"Pabeigt\" : \"Закончить\";\n    }\n\n    function getLang() {\n      return store__WEBPACK_IMPORTED_MODULE_9___default.a.get(\"activeLang\");\n    }\n  }\n\n  function handleSendBtnClick(_x) {\n    return _handleSendBtnClick.apply(this, arguments);\n  }\n\n  function _handleSendBtnClick() {\n    _handleSendBtnClick = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2(e) {\n      var options, response;\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log(e); // const response = await Axios.post(`${productionURL}email`, {\n              //   email: clientEmail,\n              // });\n\n              options = {\n                method: \"POST\",\n                url: \"https://modesmuzejs.lv/api/quiz/tests/email\",\n                origin: _components_constants__WEBPACK_IMPORTED_MODULE_10__[\"productionHost\"],\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                data: {\n                  email: \"1231@gmail.com\"\n                }\n              }; // await Axios.request(options)\n              //   .then(function (response) {\n              //     console.log(response.data);\n              //   })\n              //   .catch(function (error) {\n              //     console.error(error);\n              //   });\n              // console.log(response);\n\n              console.log(clientEmail, \"state\");\n              console.log({\n                email: clientEmail\n              });\n              _context2.next = 6;\n              return axios__WEBPACK_IMPORTED_MODULE_14___default.a.post(\"\".concat(_components_constants__WEBPACK_IMPORTED_MODULE_10__[\"productionURL\"], \"tests/email\"), {\n                email: emailRef.current\n              });\n\n            case 6:\n              response = _context2.sent;\n              console.log(response);\n\n              if (response.status === 200) {\n                router.push(\"\".concat(_components_constants__WEBPACK_IMPORTED_MODULE_10__[\"productionHost\"], \"/client/languages?testid=\").concat(store__WEBPACK_IMPORTED_MODULE_9___default.a.get(\"theTest\").id));\n              }\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _handleSendBtnClick.apply(this, arguments);\n  }\n\n  function prepareFirstPage() {\n    return txtExpalantion();\n  }\n\n  var start_test_btn = function start_test_btn() {\n    return __jsx(\"svg\", {\n      width: \"116.656\",\n      height: \"116.66\",\n      viewBox: \"0 0 116.656 116.66\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 9\n      }\n    }, __jsx(\"defs\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 13\n      }\n    }, __jsx(\"filter\", {\n      id: \"Path_14\",\n      x: \"0\",\n      y: \"0\",\n      width: \"116.656\",\n      height: \"116.66\",\n      filterUnits: \"userSpaceOnUse\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 17\n      }\n    }, __jsx(\"feOffset\", {\n      dy: \"3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 21\n      }\n    }), __jsx(\"feGaussianBlur\", {\n      stdDeviation: \"3\",\n      result: \"blur\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 21\n      }\n    }), __jsx(\"feFlood\", {\n      \"flood-opacity\": \"0.161\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 21\n      }\n    }), __jsx(\"feComposite\", {\n      operator: \"in\",\n      in2: \"blur\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 21\n      }\n    }), __jsx(\"feComposite\", {\n      \"in\": \"SourceGraphic\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 21\n      }\n    }))), __jsx(\"g\", {\n      id: \"Icon_feather-arrow-right-circle\",\n      \"data-name\": \"Icon feather-arrow-right-circle\",\n      transform: \"translate(11.503 6.771)\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 13\n      }\n    }, __jsx(\"g\", {\n      transform: \"matrix(1, 0, 0, 1, -11.5, -6.77)\",\n      filter: \"url(#Path_14)\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 17\n      }\n    }, __jsx(\"path\", {\n      id: \"Path_14-2\",\n      \"data-name\": \"Path 14\",\n      d: \"M95.656,49.33A46.328,46.328,0,1,1,49.328,3,46.329,46.329,0,0,1,95.656,49.33Z\",\n      transform: \"translate(9 6)\",\n      fill: \"none\",\n      stroke: \"#c6aa96\",\n      \"stroke-linecap\": \"round\",\n      \"stroke-linejoin\": \"round\",\n      \"stroke-width\": \"6\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 21\n      }\n    })), __jsx(\"path\", {\n      id: \"Path_15\",\n      \"data-name\": \"Path 15\",\n      d: \"M18,47.06,35.53,29.53,18,12\",\n      transform: \"translate(28.825 19.03)\",\n      fill: \"none\",\n      stroke: \"#c6aa96\",\n      \"stroke-linecap\": \"round\",\n      \"stroke-linejoin\": \"round\",\n      \"stroke-width\": \"5\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 17\n      }\n    }), __jsx(\"path\", {\n      id: \"Path_16\",\n      \"data-name\": \"Path 16\",\n      d: \"M12,18H47.06\",\n      transform: \"translate(17.295 30.559)\",\n      fill: \"none\",\n      stroke: \"#c6aa96\",\n      \"stroke-linecap\": \"round\",\n      \"stroke-linejoin\": \"round\",\n      \"stroke-width\": \"5\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 17\n      }\n    })));\n  };\n\n  function txtExpalantion() {\n    var sampleTxt = {\n      ru: \"Найдите соответствие, переставляя нижние карточки.\",\n      en: \"Find a match by moving the bottom cards.\",\n      lv: \"Atrodiet atbilstību, pārliekot apakšējas kartītes.\"\n    };\n    return __jsx(\"div\", {\n      id: \"btn_txt_container\",\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-evenly\",\n        height: \"40%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 13\n      }\n    }, __jsx(\"h1\", {\n      style: {\n        fontWeight: 400,\n        fontSize: \"xxx-large\",\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 17\n      }\n    }, sampleTxt[store__WEBPACK_IMPORTED_MODULE_9___default.a.get(\"activeLang\")]), __jsx(\"button\", {\n      style: {\n        background: \"none\",\n        border: \"none\"\n      },\n      onClick: function onClick() {\n        return dispatch({\n          type: \"increment\"\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 17\n      }\n    }, start_test_btn()));\n  }\n\n  function ExplanatoryVideo() {\n    return __jsx(\"div\", {\n      style: {\n        position: \"absolute\",\n        width: \"100vw\",\n        height: \"100vh\",\n        background: \"black\",\n        zIndex: 10000,\n        top: 0,\n        left: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 13\n      }\n    }, __jsx(\"video\", {\n      onEnded: function onEnded() {\n        return dispatch({\n          type: \"increment\"\n        });\n      },\n      controls: true,\n      autoPlay: true,\n      style: {\n        width: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 17\n      }\n    }, __jsx(\"source\", {\n      src: \"/Test_Example.webm\",\n      type: \"video/webm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 21\n      }\n    })));\n  }\n  /**\n   * Wraps question and answer pairs into a div (containing 3 pairs in this case)\n   */\n\n\n  function prepareJSXOfPages(refsToQuestions) {\n    var _this2 = this;\n\n    // console.log(pagesContent);\n    var pagesPrep = [];\n    console.log(pagesPrep);\n    props.fromPreview == undefined && pagesPrep.push(prepareFirstPage());\n    var tmpPages = pagesContent.map(function (page, pageIterator) {\n      return (// <AnimatePresence>\n        __jsx(framer_motion__WEBPACK_IMPORTED_MODULE_11__[\"motion\"].div, {\n          initial: {\n            opacity: 0\n          },\n          animate: {\n            opacity: 1\n          },\n          exit: {\n            opacity: 0\n          },\n          id: \"page-\".concat(pageIterator),\n          key: pageIterator,\n          style: {\n            display: \"flex\",\n            justifyContent: \"space-evenly\",\n            width: \"90%\",\n            height: \"88%\"\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 687,\n            columnNumber: 13\n          }\n        }, qnaPairsToJSX(page, pageIterator, refsToQuestions)) // </AnimatePresence>\n\n      );\n    }); // console.log(tmpPages);\n\n    pagesPrep.push.apply(pagesPrep, Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(tmpPages)); // console.log(pagesPrep);\n\n    var tmp;\n\n    if (props.fromPreview) {\n      tmp = store__WEBPACK_IMPORTED_MODULE_9___default.a.get(\"testInProgress\");\n    } else {\n      tmp = store__WEBPACK_IMPORTED_MODULE_9___default.a.get(\"theTest\");\n    }\n\n    console.log(tmp);\n\n    var _ref = tmp[store__WEBPACK_IMPORTED_MODULE_9___default.a.get(\"activeLang\")] || props.test[props.activeLanguage],\n        finalPageTextBody = _ref.finalPageTextBody,\n        finalPageTextHeading = _ref.finalPageTextHeading;\n\n    console.log(tmp);\n    var lastPage = prepareLastPageJSX(finalPageTextBody, finalPageTextHeading, tmp.emailSender\n    /* as boolean */\n    );\n    pagesPrep.push(lastPage);\n    setPages(pagesPrep); // console.log(pages);\n\n    return pagesPrep;\n  }\n\n  var textCardCSSSetting = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    width: \"320px\",\n    height: \"min-content\",\n    // padding: \"1rem\",\n    border: \"3px solid rgb(198\t169\t149\t)\"\n  };\n\n  function setStyleAccordingToTestType(cardData) {\n    switch (test === null || test === void 0 ? void 0 : test.type) {\n      case \"PP\":\n        return {\n          width: \"250px\",\n          height: \"259.37px\"\n        };\n\n      case \"TT\":\n        return textCardCSSSetting;\n\n      default:\n        return isImgOrText(cardData) ? {\n          width: \"320px\",\n          height: \"347px\"\n        } : textCardCSSSetting;\n    }\n  }\n  /**\n   * Returns an array of JSX Elements containing question and answer cards (which are shuffled randomly before rendering) in pairs\n   * @param page Array of question and answer pairs to be rendered\n   * @param pageIterator page (int) to which the array corresponds\n   */\n\n\n  function qnaPairsToJSX(page, pageIterator, refsToQuestions) {\n    var _this3 = this;\n\n    var questions = page.QnAPairs.map(function (qnaPair, iterator) {\n      return __jsx(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 13\n        }\n      }, __jsx(\"div\", {\n        ref: function ref(ele) {\n          return refsToQuestions.current[iterator] = ele;\n        },\n        className: _styles_test_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.TCard,\n        id: \"Question_\".concat(iterator, \"_p-\").concat(pageIterator),\n        key: \"Question_\".concat(iterator, \"_p-\").concat(pageIterator),\n        style: setStyleAccordingToTestType(qnaPair.question),\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 786,\n          columnNumber: 17\n        }\n      }, __jsx(\"div\", {\n        style: {\n          height: \"100%\",\n          boxSizing: \"border-box\"\n        },\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 793,\n          columnNumber: 21\n        }\n      }, imgOrText(qnaPair.question))), __jsx(\"div\", {\n        // ref={(ele) => (refsToQuestions.current[iterator] = ele)}\n        style: {\n          marginTop: isImgOrText(qnaPair.question) ? \"0.2rem\" : \"-0.1rem\",\n          width: \"min-content\",\n          zIndex: 100\n        },\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 802,\n          columnNumber: 17\n        }\n      }, StickCircle()));\n    });\n\n    for (var i = 0; i < page.QnAPairs.length; i++) {\n      refsToAnswersPositions.current[i] = {\n        position: {\n          x: 0,\n          y: 0\n        }\n      };\n    }\n\n    var answers = page.QnAPairs.map(function (qnaPair, iterator) {\n      return __jsx(react_draggable__WEBPACK_IMPORTED_MODULE_8___default.a, {\n        axis: \"both\" // onTouchStart={handleStartOfDrag}\n        ,\n        onDrag: handleDrag // position={refsToAnswersPositions.current[iterator].position}\n        ,\n        onStop: handleStopOfADrag // position={null}\n        // grid={[25, 25]}\n        ,\n        defaultPosition: {\n          x: 0,\n          y: 0\n        },\n        scale: 1,\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 826,\n          columnNumber: 13\n        }\n      }, __jsx(\"div\", {\n        style: {\n          position: \"absolute\",\n          bottom: \"10%\",\n          display: \"flex\",\n          flexDirection: \"column-reverse\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          zIndex: 100 // border: \"3px solid rgb(198\t169\t149\t)\",\n\n        },\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 837,\n          columnNumber: 17\n        }\n      }, __jsx(\"div\", {\n        className: _styles_test_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.TCard,\n        id: \"Answer_\".concat(iterator, \"_p-\").concat(pageIterator),\n        key: iterator,\n        style: setStyleAccordingToTestType(qnaPair.answer),\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 849,\n          columnNumber: 21\n        }\n      }, __jsx(\"div\", {\n        style: {\n          height: \"100%\",\n          width: \"100%\",\n          boxSizing: \"border-box\"\n        },\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 855,\n          columnNumber: 25\n        }\n      }, imgOrText(qnaPair.answer))), __jsx(\"div\", {\n        ref: function ref(ele) {\n          return refsToAnswersHandles.current[iterator] = ele;\n        },\n        style: {\n          zIndex: 100,\n          marginBottom: isImgOrText(qnaPair.answer) ? \"-0.35rem\" : \"-0.3rem\",\n          width: \"min-content\"\n        },\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 865,\n          columnNumber: 21\n        }\n      }, StickSemiCircle())));\n    });\n    var answersShuffled = shuffle(answers);\n    var questionsShuffled = shuffle(questions); // console.log(tmp);\n    // console.log(questions, answers);\n\n    var preparedPairsShuffled = page.QnAPairs.map(function (_, iterator) {\n      return __jsx(framer_motion__WEBPACK_IMPORTED_MODULE_11__[\"motion\"].div, {\n        // initial=\"hidden\"\n        // animate=\"visible\"\n        variants: variantsQnAPairs,\n        transition: {\n          duration: \"1.5\"\n        },\n        key: \"QuestionAnswerP-\".concat(iterator, \"_p-\").concat(pageIterator),\n        className: _styles_test_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.qnaContainer,\n        __self: _this3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 888,\n          columnNumber: 13\n        }\n      }, questions[iterator], answersShuffled[iterator]);\n    });\n    return preparedPairsShuffled;\n  }\n\n  var variantsQnAPairs = {\n    visible: {\n      opacity: 1\n    },\n    hidden: {\n      opacity: 0\n    }\n  };\n\n  function shuffle(array) {\n    var m = array.length;\n    var t;\n    var i; // console.log(m, t, i);\n    // While there remain elements to shuffle…\n\n    while (m) {\n      // Pick a remaining element…\n      i = Math.floor(Math.random() * m--); // console.log(i, \"i\");\n      // And swap it with the current element.\n\n      t = array[m];\n      array[m] = array[i];\n      array[i] = t; // console.log(array);\n    }\n\n    return array;\n  }\n\n  var StickCircle = function StickCircle() {\n    return __jsx(\"svg\", {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      width: \"19\",\n      height: \"26.956\",\n      viewBox: \"0 0 19 26.956\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 936,\n        columnNumber: 9\n      }\n    }, __jsx(\"g\", {\n      id: \"Group_35\",\n      \"data-name\": \"Group 35\",\n      transform: \"translate(-115.882 -241.137)\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 942,\n        columnNumber: 13\n      }\n    }, __jsx(\"line\", {\n      id: \"Line_1\",\n      \"data-name\": \"Line 1\",\n      y2: \"11\",\n      transform: \"translate(125.357 243.137)\",\n      fill: \"none\",\n      stroke: \"#c6aa96\" // strokeLinecap=\"round\"\n      ,\n      strokeWidth: \"4\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 947,\n        columnNumber: 17\n      }\n    }), __jsx(\"circle\", {\n      id: \"Ellipse_4\",\n      \"data-name\": \"Ellipse 4\",\n      cx: \"9.5\",\n      cy: \"9.5\",\n      r: \"9.5\",\n      transform: \"translate(115.882 249.094)\",\n      fill: \"#c6aa96\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 957,\n        columnNumber: 17\n      }\n    })));\n  };\n\n  var StickSemiCircle = function StickSemiCircle() {\n    return __jsx(\"svg\", {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      width: \"19\",\n      height: \"18.761\",\n      viewBox: \"0 0 19 18.761\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 971,\n        columnNumber: 9\n      }\n    }, __jsx(\"g\", {\n      id: \"Group_34\",\n      \"data-name\": \"Group 34\",\n      transform: \"translate(-115.996 0)\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 977,\n        columnNumber: 13\n      }\n    }, __jsx(\"line\", {\n      id: \"Line_4\",\n      \"data-name\": \"Line 4\",\n      y2: \"110\",\n      transform: \"translate(125.357 5.761)\",\n      fill: \"none\",\n      stroke: \"#c6aa96\" // strokeLinecap=\"round\"\n      ,\n      strokeWidth: \"4\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 978,\n        columnNumber: 17\n      }\n    }), __jsx(\"g\", {\n      id: \"Path_11\",\n      \"data-name\": \"Path 11\",\n      transform: \"translate(115.996 -7.551)\",\n      fill: \"none\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 988,\n        columnNumber: 17\n      }\n    }, __jsx(\"path\", {\n      d: \"M9.5,11.26c5.247,0,9.5-7.007,9.5-1.76a9.5,9.5,0,0,1-19,0C0,4.253,4.253,11.26,9.5,11.26Z\",\n      stroke: \"none\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 994,\n        columnNumber: 21\n      }\n    }), __jsx(\"path\", {\n      d: \"M 0.8809738159179688 7.550793647766113 C 2.390966415405273 7.550793647766113 5.682500839233398 11.26012802124023 9.5 11.26012802124023 C 13.31717872619629 11.26012802124023 16.60886001586914 7.551321029663086 18.11902618408203 7.550793647766113 C 18.68457794189453 7.550596237182617 19 8.070477485656738 19 9.499998092651367 C 19 14.74670791625977 14.74670028686523 18.99999809265137 9.5 18.99999809265137 C 4.253299713134766 18.99999809265137 0 14.74670791625977 0 9.499998092651367 C 0 8.070796966552734 0.3156604766845703 7.550793647766113 0.8809738159179688 7.550793647766113 Z\",\n      stroke: \"none\",\n      fill: \"#c6aa96\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 998,\n        columnNumber: 21\n      }\n    }))));\n  };\n\n  var ExitBtn = function ExitBtn(size) {\n    return !props.fromPreview && __jsx(\"svg\", {\n      // className={compStyles.CloseBTN}\n      onClick: function onClick() {\n        return !props.test && router.push(\"\".concat(_components_constants__WEBPACK_IMPORTED_MODULE_10__[\"productionHost\"], \"/client/languages?testid=\").concat(store__WEBPACK_IMPORTED_MODULE_9___default.a.get(\"theTest\")._id) // `${devURL}client/test?testid=${\n        //   store.get(\"theTest\")._id\n        // }&lang=${store.get(\"activeLang\")}`\n        );\n      },\n      width: size,\n      height: size,\n      viewBox: \"0 0 56 56\",\n      fill: \"none\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1010,\n        columnNumber: 9\n      }\n    }, __jsx(\"g\", {\n      id: \"Group_28\",\n      \"data-name\": \"Group 28\",\n      transform: \"translate(-1194 -73)\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1029,\n        columnNumber: 13\n      }\n    }, __jsx(\"circle\", {\n      id: \"Ellipse_8\",\n      \"data-name\": \"Ellipse 8\",\n      cx: \"16.5\",\n      cy: \"16.5\",\n      r: \"16.5\",\n      transform: \"translate(1194 73)\",\n      fill: \"#c6aa96\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1030,\n        columnNumber: 17\n      }\n    }), __jsx(\"path\", {\n      id: \"Icon_ionic-ios-close\",\n      \"data-name\": \"Icon ionic-ios-close\",\n      d: \"M23.921,21.5l7.3-7.3A1.71,1.71,0,0,0,28.8,11.786l-7.3,7.3-7.3-7.3A1.71,1.71,0,1,0,11.788,14.2l7.3,7.3-7.3,7.3a1.71,1.71,0,1,0,2.418,2.418l7.3-7.3,7.3,7.3A1.71,1.71,0,1,0,31.218,28.8Z\",\n      transform: \"translate(1188.715 67.711)\",\n      fill: \"#1b212e\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1039,\n        columnNumber: 17\n      }\n    })));\n  };\n\n  function checkWhetherIsPreview() {\n    if (props.fromPreview) {\n      var PreviewStyle = {\n        width: \"100%\",\n        height: \"100%\"\n      };\n      return PreviewStyle;\n    }\n\n    return {};\n  }\n\n  return __jsx(react_dnd__WEBPACK_IMPORTED_MODULE_6__[\"DndProvider\"], {\n    backend: react_dnd_touch_backend__WEBPACK_IMPORTED_MODULE_7__[\"TouchBackend\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1067,\n      columnNumber: 9\n    }\n  }, props.test && __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, __jsx(\"button\", {\n    style: {\n      position: \"absolute\",\n      top: \"46%\",\n      right: \"3%\",\n      border: \"none\",\n      background: \"none\"\n    },\n    onClick: function onClick() {\n      console.log(\"123\");\n      dispatch({\n        type: \"increment\"\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1071,\n      columnNumber: 21\n    }\n  }, Object(_components_PagesController__WEBPACK_IMPORTED_MODULE_13__[\"Arrow\"])(\"60\", \"84\")), __jsx(\"button\", {\n    style: {\n      position: \"absolute\",\n      top: \"46%\",\n      left: \"3%\",\n      transform: \"rotate(180deg)\",\n      background: \"none\",\n      border: \"none\"\n    },\n    onClick: function onClick() {\n      return dispatch({\n        type: \"decrement\"\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1086,\n      columnNumber: 21\n    }\n  }, Object(_components_PagesController__WEBPACK_IMPORTED_MODULE_13__[\"Arrow\"])(\"60\", \"84\"))), __jsx(framer_motion__WEBPACK_IMPORTED_MODULE_11__[\"AnimatePresence\"], {\n    exitBeforeEnter: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1102,\n      columnNumber: 13\n    }\n  }, __jsx(framer_motion__WEBPACK_IMPORTED_MODULE_11__[\"motion\"].div, {\n    key: \"animatedPage\",\n    initial: {\n      opacity: 0,\n      y: -100\n    },\n    animate: {\n      opacity: 1,\n      y: 0\n    },\n    exit: {\n      opacity: 0,\n      y: 500\n    },\n    className: _styles_test_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.pageContainer,\n    style: checkWhetherIsPreview(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1103,\n      columnNumber: 17\n    }\n  }, !props.test && __jsx(\"img\", {\n    src: \"https://www.fashionmuseumriga.lv/bitrix/templates/main_template/img/logo.png\",\n    alt: \"Fashion Museum\",\n    id: _styles_test_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.MMlogo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1112,\n      columnNumber: 25\n    }\n  }), __jsx(framer_motion__WEBPACK_IMPORTED_MODULE_11__[\"motion\"].div, {\n    key: \"testContainerAnima\",\n    className: _styles_test_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.testContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1118,\n      columnNumber: 21\n    }\n  }, (pages === null || pages === void 0 ? void 0 : pages.length) - 1 != page.count\n  /* 578G */\n  && __jsx(\"button\", {\n    style: {\n      opacity: \"70%\",\n      position: \"absolute\",\n      right: \"2%\",\n      top: \"5%\",\n      backgroundColor: \"rgba(0, 0, 0, 0)\",\n      border: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1120,\n      columnNumber: 29\n    }\n  }, ExitBtn(\"45\")), pages !== undefined && page.count !== (pages === null || pages === void 0 ? void 0 : pages.length) - 1 && __jsx(_components_TestProgressBar__WEBPACK_IMPORTED_MODULE_12__[\"default\"] // activePage={!props.fromPreview ? page.count - 1 : page.count}\n  , {\n    activePage:\n    /* props.fromPreview == undefined ? page.count - 1 : */\n    page.count,\n    numberOfPages: props.fromPreview == undefined ? pages.length - 1 : pages.length // numberOfPages={\n    //   !props.fromPreview ? pages?.length - 1 : page.count\n    // }\n    // numberOfPages={10}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1135,\n      columnNumber: 29\n    }\n  }), __jsx(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      pointerEvents: \"\".concat(props.test && \"none\")\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1151,\n      columnNumber: 25\n    }\n  }, pages !== undefined && pages[page.count])))));\n}\n\n_s(Test, \"Ai+MCQwPJmdpHnKVcAKE0s5g/3Q=\", false, function () {\n  return [next_router__WEBPACK_IMPORTED_MODULE_4__[\"useRouter\"]];\n});\n\n_c = Test;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Test);\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/client/test.tsx\n");

/***/ })

})