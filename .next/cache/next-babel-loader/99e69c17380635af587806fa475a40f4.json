{"ast":null,"code":"var _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestPreview.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\n\nconst TestPreview = props => {\n  function handleTextAreaQuestionChange(event) {\n    console.log(event.currentTarget.value);\n    console.log(props.currentTestState[props.currentLanguage].pages[props.activePage].QnAPairs[event.currentTarget.id].question); // let tmpArray =\n    //   props.currentTestState[props.currentLanguage!].pages[props.activePage]\n    //     .QnAPairs;\n    // console.log(\"tmp\", tmpArray);\n    // tmpArray.forEach((ele) => console.log(ele));\n\n    let tmpArrayOfAllPages = props.currentTestState[props.currentLanguage].pages;\n    let tmpDataForCurrentPage = tmpArrayOfAllPages[props.activePage];\n    console.log(\"before change\", tmpDataForCurrentPage);\n    tmpDataForCurrentPage.QnAPairs[event.currentTarget.id].question = event.currentTarget.value;\n    console.log(\"after change\", tmpDataForCurrentPage);\n    props.saveChanges(_objectSpread(_objectSpread({}, props.currentTestState), {}, {\n      [props.currentLanguage]: _objectSpread({}, props.currentTestState[props.currentLanguage])\n    }));\n  }\n\n  function questionRenderController(currentItem) {\n    switch (props.currentTestState.type) {\n      case \"TT\":\n        return __jsx(\"textarea\", {\n          id: String(currentItem),\n          onChange: handleTextAreaQuestionChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 11\n          }\n        }, \" \");\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  const pageBody = () => {\n    return __jsx(\"div\", {\n      className: compStyles.pageBody,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, props.currentTestState[props.currentLanguage || \"ru\"].pages[props.activePage].QnAPairs.map((qnaPair, index) => __jsx(\"div\", {\n      className: compStyles.qnaPair,\n      id: String(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: compStyles.Question,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, questionRenderController(index)), __jsx(\"div\", {\n      className: compStyles.Answer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, \"Answer: \", qnaPair.answer))));\n  };\n\n  return __jsx(\"div\", {\n    className: styles.TestPreview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, \"Page: \", props.activePage + 1), __jsx(\"div\", {\n    className: compStyles.TestBGContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, __jsx(FMLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), pageBody()));\n};\n\nexport default TestPreview;","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestPreview.tsx"],"names":["React","styles","FMLogo","compStyles","TestPreview","props","handleTextAreaQuestionChange","event","console","log","currentTarget","value","currentTestState","currentLanguage","pages","activePage","QnAPairs","id","question","tmpArrayOfAllPages","tmpDataForCurrentPage","saveChanges","questionRenderController","currentItem","type","String","pageBody","map","qnaPair","index","Question","Answer","answer","TestBGContainer"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  IQnA,\n  IQnAPairs,\n  ITest,\n  TLangOption,\n  TTestTypes,\n} from \"../@types/test\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\n\nconst TestPreview = (props: {\n  activePage: number;\n  currentLanguage: TLangOption[\"value\"] | undefined;\n  currentTestState: ITest;\n  saveChanges: (test: ITest) => void;\n}) => {\n  function handleTextAreaQuestionChange(\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) {\n    console.log(event.currentTarget.value);\n    console.log(\n      props.currentTestState[props.currentLanguage!].pages[props.activePage]\n        .QnAPairs[event.currentTarget.id].question\n    );\n    // let tmpArray =\n    //   props.currentTestState[props.currentLanguage!].pages[props.activePage]\n    //     .QnAPairs;\n    // console.log(\"tmp\", tmpArray);\n    // tmpArray.forEach((ele) => console.log(ele));\n\n    let tmpArrayOfAllPages =\n      props.currentTestState[props.currentLanguage!].pages;\n    let tmpDataForCurrentPage = tmpArrayOfAllPages[props.activePage];\n    console.log(\"before change\", tmpDataForCurrentPage);\n    tmpDataForCurrentPage.QnAPairs[event.currentTarget.id].question =\n      event.currentTarget.value;\n    console.log(\"after change\", tmpDataForCurrentPage);\n\n    props.saveChanges({\n      ...props.currentTestState,\n      [props.currentLanguage!]: {\n        ...props.currentTestState[props.currentLanguage!],\n      },\n    });\n  }\n\n  function questionRenderController(currentItem: number) {\n    switch (props.currentTestState.type) {\n      case \"TT\":\n        return (\n          <textarea\n            id={String(currentItem)}\n            onChange={handleTextAreaQuestionChange}\n          >\n            {\" \"}\n          </textarea>\n        );\n        break;\n\n      default:\n        break;\n    }\n  }\n  const pageBody = () => {\n    return (\n      <div className={compStyles.pageBody}>\n        {props.currentTestState[props.currentLanguage || \"ru\"].pages[\n          props.activePage\n        ].QnAPairs.map((qnaPair: IQnA, index: number) => (\n          <div className={compStyles.qnaPair} id={String(index)}>\n            <div className={compStyles.Question}>\n              {questionRenderController(index)}\n            </div>\n            <div className={compStyles.Answer}>Answer: {qnaPair.answer}</div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div className={styles.TestPreview}>\n      <h3>Page: {props.activePage + 1}</h3>\n      <div className={compStyles.TestBGContainer}>\n        <FMLogo />\n        {pageBody()}\n      </div>\n    </div>\n  );\n};\n\nexport default TestPreview;\n"]},"metadata":{},"sourceType":"module"}