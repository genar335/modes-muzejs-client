{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/pages/TMS/main.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport Axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport ActiveTests from \"../../components/ActiveTests\";\nimport { devURL } from \"../../components/constants\";\nimport Gallery from \"../../components/Gallery\";\nimport styles from \"../styles/main.module.scss\";\n\nvar main = function main() {\n  _s();\n\n  var getTestsByActive = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(isTestActive) {\n      var _tests;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return Axios.get(\"http://localhost:4000/tests/getTest?active=\".concat(isTestActive));\n\n            case 3:\n              _tests = _context.sent;\n              return _context.abrupt(\"return\", _tests.data);\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              alert(_context.t0);\n              return _context.abrupt(\"return\", []);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function getTestsByActive(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var _useState = useState({\n    activeTests: [],\n    inActiveTests: []\n  }),\n      tests = _useState[0],\n      setTests = _useState[1];\n\n  var getAllTests = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var serverResponse, data, tmpactiveTests, tmpinActiveTests;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return Axios.get(\"\".concat(devURL, \"tests/allTests\"));\n\n            case 2:\n              serverResponse = _context2.sent;\n              data = serverResponse.data;\n              console.log(\"Main test fethcer\");\n              tmpactiveTests = [];\n              tmpinActiveTests = [];\n              filterTests(tmpactiveTests, tmpinActiveTests, data);\n              setTests({\n                activeTests: tmpactiveTests,\n                inActiveTests: tmpinActiveTests\n              });\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getAllTests() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var filterTests = function filterTests(activeTests, inActiveTests, arrToFilter) {\n    arrToFilter.forEach(function (test) {\n      if (test.active !== undefined) {\n        test.active ? activeTests.push(test) : inActiveTests.push(test);\n      }\n    });\n  };\n\n  var toggleTest = function toggleTest(testID) {\n    console.log(\"toggling test\");\n    var tmpActive = tests.activeTests;\n    var tmpInactive = tests.inActiveTests;\n    var combinedTests = [].concat(_toConsumableArray(tests.activeTests), _toConsumableArray(tests.inActiveTests));\n    combinedTests.forEach(function (test) {\n      if (test._id === testID) {\n        if (combinedTests.indexOf(test) < tmpActive.length) {\n          tmpActive.splice(tmpActive.indexOf(test), 1);\n          tmpInactive.push(test);\n        } else {\n          tmpInactive.splice(tmpInactive.indexOf(test), 1);\n          tmpActive.push(test);\n        }\n      }\n    });\n    setTests({\n      activeTests: tmpActive,\n      inActiveTests: tmpInactive\n    });\n  };\n\n  useEffect(function () {\n    getAllTests();\n  }, []);\n  return __jsx(\"div\", {\n    className: styles.MainContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, __jsx(ActiveTests // getActiveTests={getTestsByActive}\n  , {\n    activeTests: tests.activeTests,\n    updateTheTests: toggleTest,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }), __jsx(Gallery // getInactiveTests={getTestsByActive}\n  , {\n    testsToRender: tests.inActiveTests,\n    updateTheTests: toggleTest,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(main, \"j9kwJWOsAQKAWHLvlzWHxhG8FD4=\");\n\nexport default main;","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/pages/TMS/main.tsx"],"names":["Axios","React","useEffect","useState","ActiveTests","devURL","Gallery","styles","main","getTestsByActive","isTestActive","get","tests","data","alert","activeTests","inActiveTests","setTests","getAllTests","serverResponse","console","log","tmpactiveTests","tmpinActiveTests","filterTests","arrToFilter","forEach","test","active","undefined","push","toggleTest","testID","tmpActive","tmpInactive","combinedTests","_id","indexOf","length","splice","MainContainer"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { ITest } from \"../../@types/test\";\nimport ActiveTests from \"../../components/ActiveTests\";\nimport { devURL } from \"../../components/constants\";\nimport Gallery from \"../../components/Gallery\";\nimport styles from \"../styles/main.module.scss\";\nconst main = () => {\n  const getTestsByActive = async (isTestActive: boolean): Promise<any> => {\n    try {\n      const tests = await Axios.get(\n        `http://localhost:4000/tests/getTest?active=${isTestActive}`\n      );\n      return tests.data as ITest[];\n    } catch (error) {\n      alert(error);\n      return [];\n    }\n  };\n\n  const [tests, setTests] = useState<{\n    activeTests: ITest[];\n    inActiveTests: ITest[];\n  }>({\n    activeTests: [],\n    inActiveTests: [],\n  });\n\n  const getAllTests = async () => {\n    const serverResponse = await Axios.get(`${devURL}tests/allTests`);\n    const data = serverResponse.data;\n    console.log(\"Main test fethcer\");\n    let tmpactiveTests: Array<ITest> = [];\n    let tmpinActiveTests: Array<ITest> = [];\n    filterTests(tmpactiveTests, tmpinActiveTests, data);\n    setTests({\n      activeTests: tmpactiveTests,\n      inActiveTests: tmpinActiveTests,\n    });\n  };\n\n  const filterTests = (\n    activeTests: ITest[],\n    inActiveTests: ITest[],\n    arrToFilter: ITest[]\n  ) => {\n    arrToFilter.forEach((test: ITest) => {\n      if (test.active !== undefined) {\n        test.active ? activeTests.push(test) : inActiveTests.push(test);\n      }\n    });\n  };\n\n  const toggleTest = (testID: string) => {\n    console.log(\"toggling test\");\n    let tmpActive = tests.activeTests;\n    let tmpInactive = tests.inActiveTests;\n    let combinedTests = [...tests.activeTests, ...tests.inActiveTests];\n    combinedTests.forEach((test: ITest) => {\n      if (test._id === testID) {\n        if (combinedTests.indexOf(test) < tmpActive.length) {\n          tmpActive.splice(tmpActive.indexOf(test), 1);\n          tmpInactive.push(test);\n        } else {\n          tmpInactive.splice(tmpInactive.indexOf(test), 1);\n          tmpActive.push(test);\n        }\n      }\n    });\n    setTests({\n      activeTests: tmpActive,\n      inActiveTests: tmpInactive,\n    });\n  };\n\n  useEffect(() => {\n    getAllTests();\n  }, []);\n\n  return (\n    <div className={styles.MainContainer}>\n      <ActiveTests\n        // getActiveTests={getTestsByActive}\n        activeTests={tests.activeTests}\n        updateTheTests={toggleTest}\n      />\n      <Gallery\n        // getInactiveTests={getTestsByActive}\n        testsToRender={tests.inActiveTests}\n        updateTheTests={toggleTest}\n      />\n    </div>\n  );\n};\n\nexport default main;\n"]},"metadata":{},"sourceType":"module"}