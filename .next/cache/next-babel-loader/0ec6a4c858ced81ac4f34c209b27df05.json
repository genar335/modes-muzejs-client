{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/LangBtnController.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport LanguageBtn from \"./LanguageBtn\";\nimport compStyle from \"./styles/LangBtnController.module.scss\";\n\nvar LangBtnController = function LangBtnController(props) {\n  _s();\n\n  var _useState = useState([]),\n      flatBtns = _useState[0],\n      setFlatBtns = _useState[1];\n\n  var _useState2 = useState(),\n      activeBtnPosition = _useState2[0],\n      setActiveBtnPosition = _useState2[1];\n\n  var forceUpdate = React.useReducer(function () {\n    return {};\n  }, {})[1]; // * Creates an array with values corresponding to parsed buttons activated value.\n  // * Happens on first render\n\n  if (flatBtns.length !== props.BtnArray.length) {\n    var tmp = props.BtnArray.map(function (btn) {\n      if (btn === props.active) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    setActiveBtnPosition(tmp.indexOf(true));\n    setFlatBtns(tmp);\n  }\n\n  var activeBtnPositionSetter = function activeBtnPositionSetter(id) {\n    setFlatBtns(flatBtns.map(function (btn, index) {\n      return index === id ? btn = true : btn = false;\n    }));\n    setActiveBtnPosition(id);\n    forceUpdate();\n  };\n\n  function activeBtnSwitcher() {\n    var tmp = flatBtns;\n    tmp.unshift(tmp[tmp.length - 1]);\n    tmp.pop(); // tmp.pop();\n    // if (tmp.indexOf(true) === tmp.length || tmp.indexOf(true) === -1) {\n    //   tmp.unshift(true);\n    // } else {\n    //   tmp.unshift(false);\n    // }\n\n    setFlatBtns(tmp);\n    activeBtnPositionSetter(flatBtns.indexOf(true));\n    props.langSelector(props.BtnArray[flatBtns.indexOf(true)]);\n    forceUpdate();\n  } // * Grabbing arrow in the modal which selects next element.\n  // * Assings a click listener to the grabbed element.\n\n\n  var arrowBtn;\n  useEffect(function () {\n    var _arrowBtn, _arrowBtn2;\n\n    arrowBtn = document.getElementById(\"arrowButton\");\n    console.log((_arrowBtn = arrowBtn) === null || _arrowBtn === void 0 ? void 0 : _arrowBtn.firstChild.id);\n\n    if (((_arrowBtn2 = arrowBtn) === null || _arrowBtn2 === void 0 ? void 0 : _arrowBtn2.firstChild.id) == \"arrowBtn\") {\n      var _arrowBtn3;\n\n      console.log(\"true has happened\");\n      (_arrowBtn3 = arrowBtn) === null || _arrowBtn3 === void 0 ? void 0 : _arrowBtn3.firstChild.addEventListener(\"click\", handleArrowClick);\n    } else {\n      var _arrowBtn4;\n\n      console.log(\"false has happened\");\n      (_arrowBtn4 = arrowBtn) === null || _arrowBtn4 === void 0 ? void 0 : _arrowBtn4.firstChild.addEventListener(\"click\", function () {\n        return props.isControllerOpen(false);\n      });\n      return undefined;\n    }\n\n    return function () {\n      var _arrowBtn5;\n\n      return (_arrowBtn5 = arrowBtn) === null || _arrowBtn5 === void 0 ? void 0 : _arrowBtn5.removeEventListener(\"click\", handleArrowClick);\n    };\n  });\n\n  var handleArrowClick = function handleArrowClick() {\n    activeBtnSwitcher();\n    var input = document.getElementById(\"nameInput\");\n    input === null || input === void 0 ? void 0 : input.focus();\n  };\n\n  return __jsx(\"div\", {\n    className: compStyle.LangSelect,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, props.BtnArray.map(function (button, key) {\n    return __jsx(LanguageBtn, {\n      btnID: button,\n      btnText: button.toUpperCase(),\n      key: key,\n      langSelect: props.langSelector,\n      inputEnabler: props.inputEnabler,\n      setActiveBtn: activeBtnPositionSetter,\n      pressed: flatBtns[key],\n      accessKey: key,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    });\n  }));\n};\n\n_s(LangBtnController, \"eLg3zwL2hy7smFPBDGSw1UOcGlg=\");\n\n_c = LangBtnController;\nexport default LangBtnController;\n\nvar _c;\n\n$RefreshReg$(_c, \"LangBtnController\");","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/LangBtnController.tsx"],"names":["React","useEffect","useState","LanguageBtn","compStyle","LangBtnController","props","flatBtns","setFlatBtns","activeBtnPosition","setActiveBtnPosition","forceUpdate","useReducer","length","BtnArray","tmp","map","btn","active","indexOf","activeBtnPositionSetter","id","index","activeBtnSwitcher","unshift","pop","langSelector","arrowBtn","document","getElementById","console","log","firstChild","addEventListener","handleArrowClick","isControllerOpen","undefined","removeEventListener","input","focus","LangSelect","button","key","toUpperCase","inputEnabler"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { TLangOption } from \"../@types/test\";\nimport LanguageBtn from \"./LanguageBtn\";\nimport compStyle from \"./styles/LangBtnController.module.scss\";\n\nconst LangBtnController = (props: {\n  /**\n   * @BtnArray array containng button names\n   */\n  BtnArray: Array<string>;\n  /**\n   * @active Determines which button will appear highlighted in the beginning.\n   */\n  active: string;\n  langSelector: (chooseLanguage: TLangOption[\"value\"]) => void;\n  inputEnabler: (bool: boolean) => void;\n  saveNames: () => void;\n  isControllerOpen: (bool: boolean) => void;\n}) => {\n  const [flatBtns, setFlatBtns] = useState<Array<boolean>>([]);\n  const [activeBtnPosition, setActiveBtnPosition] = useState<Number>();\n\n  const forceUpdate = React.useReducer(() => ({}), {})[1] as () => void;\n\n  // * Creates an array with values corresponding to parsed buttons activated value.\n  // * Happens on first render\n  if (flatBtns.length !== props.BtnArray.length) {\n    const tmp: boolean[] = props.BtnArray.map((btn: string) => {\n      if (btn === props.active) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    setActiveBtnPosition(tmp.indexOf(true));\n    setFlatBtns(tmp);\n  }\n\n  const activeBtnPositionSetter = (id: number) => {\n    setFlatBtns(\n      flatBtns.map((btn, index) =>\n        index === id ? (btn = true) : (btn = false)\n      )\n    );\n    setActiveBtnPosition(id);\n    forceUpdate();\n  };\n\n  function activeBtnSwitcher() {\n    let tmp = flatBtns;\n    tmp.unshift(tmp[tmp.length - 1]);\n    tmp.pop();\n    // tmp.pop();\n    // if (tmp.indexOf(true) === tmp.length || tmp.indexOf(true) === -1) {\n    //   tmp.unshift(true);\n    // } else {\n    //   tmp.unshift(false);\n    // }\n    setFlatBtns(tmp);\n    activeBtnPositionSetter(flatBtns.indexOf(true));\n    props.langSelector(\n      props.BtnArray[flatBtns.indexOf(true)] as TLangOption[\"value\"]\n    );\n    forceUpdate();\n  }\n\n  // * Grabbing arrow in the modal which selects next element.\n  // * Assings a click listener to the grabbed element.\n  let arrowBtn: HTMLElement | null;\n  useEffect(() => {\n    arrowBtn = document.getElementById(\"arrowButton\");\n    console.log(arrowBtn?.firstChild!.id);\n    if (arrowBtn?.firstChild!.id == \"arrowBtn\") {\n      console.log(\"true has happened\");\n      arrowBtn?.firstChild.addEventListener(\"click\", handleArrowClick);\n    } else {\n      console.log(\"false has happened\");\n      arrowBtn?.firstChild!.addEventListener(\"click\", () =>\n        props.isControllerOpen(false)\n      );\n      return undefined;\n    }\n    return () => arrowBtn?.removeEventListener(\"click\", handleArrowClick);\n  });\n\n  const handleArrowClick = (): void => {\n    activeBtnSwitcher();\n    const input = document.getElementById(\"nameInput\");\n    input?.focus();\n  };\n  return (\n    <div className={compStyle.LangSelect}>\n      {props.BtnArray.map((button: string, key: number) => (\n        <LanguageBtn\n          btnID={button}\n          btnText={button.toUpperCase()}\n          key={key}\n          langSelect={props.langSelector}\n          inputEnabler={props.inputEnabler}\n          setActiveBtn={activeBtnPositionSetter}\n          pressed={flatBtns[key]}\n          accessKey={key}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default LangBtnController;\n"]},"metadata":{},"sourceType":"module"}