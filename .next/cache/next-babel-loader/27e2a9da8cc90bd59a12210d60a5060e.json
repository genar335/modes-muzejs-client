{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Documents/GitHub/modes-muzejs-client/components/PhotoManager.tsx\";\nvar __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useRef, useState } from \"react\";\nimport stylish from \"./styles/PhotoManager.module.scss\";\nimport uploadIcon from \"../GAssets/upload_data.svg\";\nimport Carousel from \"react-multi-carousel\";\nimport { responsive } from \"./constants\";\nimport Axios from \"axios\";\n\nconst PhotoManager = props => {\n  async function readUploadedIMG(inputFile) {\n    const tmpFileReader = new FileReader();\n    return new Promise((resolve, reject) => {\n      tmpFileReader.onerror = () => {\n        tmpFileReader.abort();\n        reject(new DOMException(\"Problem parsing input file.\"));\n      };\n\n      tmpFileReader.onload = () => {\n        resolve(tmpFileReader.result);\n      };\n\n      tmpFileReader.readAsDataURL(inputFile);\n    });\n  }\n\n  const handleUpload = async event => {\n    const file = event.target.files[0];\n\n    try {\n      const fileContents = await readUploadedIMG(file);\n      console.log(fileContents);\n    } catch (e) {\n      console.warn(e.message);\n    }\n  };\n\n  const {\n    0: upIMGs,\n    1: setUpIMGs\n  } = useState([]);\n  const {\n    0: recievedIMGLocations,\n    1: setRecievedIMGLocation\n  } = useState([]);\n\n  async function handleFileInput(event) {\n    event.preventDefault();\n    let tmp = [];\n\n    if (fileInput.current !== null && fileInput.current.files !== null) {\n      for (let fileIndex = 0; fileIndex < ((_fileInput$current$fi = fileInput.current.files) === null || _fileInput$current$fi === void 0 ? void 0 : _fileInput$current$fi.length); fileIndex++) {\n        var _fileInput$current$fi;\n\n        try {\n          const fileContents = await readUploadedIMG(fileInput.current.files[fileIndex]);\n          tmp.push(fileContents); // setUploadedImg(fileContents);\n        } catch (error) {\n          alert(error);\n        }\n      }\n\n      setUpIMGs(tmp);\n    }\n\n    Axios.post(\"http://localhost:4000/tests/testIMG\", upIMGs).then(function (response) {\n      console.log(response.data);\n      setRecievedIMGLocation(response.data);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  const fileInput = useRef(null);\n\n  const CustomRightArrow = (_ref) => {\n    let {\n      onClick\n    } = _ref,\n        rest = _objectWithoutProperties(_ref, [\"onClick\"]);\n\n    const {\n      onMove,\n      carouselState: {\n        currentSlide,\n        deviceType\n      }\n    } = rest; // onMove means if dragging or swiping in progress.\n\n    return __jsx(\"button\", {\n      className: stylish.carRightArrow,\n      onClick: () => onClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, Arrow());\n  };\n\n  const CustomLeftArrow = (_ref2) => {\n    let {\n      onClick\n    } = _ref2,\n        rest = _objectWithoutProperties(_ref2, [\"onClick\"]);\n\n    const {\n      onMove,\n      carouselState: {\n        currentSlide,\n        deviceType\n      }\n    } = rest;\n    return __jsx(\"button\", {\n      onClick: () => onClick(),\n      className: stylish.carLeftArrow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, Arrow());\n  };\n\n  const handleIMGClick = event => {\n    console.log(\"hello from\", event.currentTarget.id);\n  };\n  /**\n   * Renders images in groups of two\n   * @param recievedIMGLocations An array of strings representing the location of images on the server\n   */\n\n\n  function renderSelectedImages(recievedIMGLocations) {\n    let renderedImagesArray = [];\n    console.log(renderedImagesArray.length);\n\n    if (recievedIMGLocations.length !== 0) {\n      for (let i = 0; i < recievedIMGLocations.length; i++) {\n        renderedImagesArray.push(__jsx(\"div\", {\n          className: stylish.imgContainer,\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 11\n          }\n        }, __jsx(\"img\", {\n          key: i,\n          id: `img_${i}`,\n          className: stylish.tmpIMG,\n          src: recievedIMGLocations[i],\n          alt: \"Here be the image\",\n          onClick: handleIMGClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }\n        }), recievedIMGLocations[i + 1] != undefined ? __jsx(\"img\", {\n          key: i + 1,\n          id: `img_${i + 1}`,\n          src: recievedIMGLocations[i + 1],\n          alt: \"here be the second one\",\n          className: stylish.tmpIMG,\n          onClick: handleIMGClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }\n        }) : undefined));\n        i++;\n        console.log(renderedImagesArray[i], \"Jeloo there\");\n      }\n\n      console.log(renderedImagesArray);\n      return renderedImagesArray.map(el => el);\n    } // return recievedIMGLocations.map((image, index) => (\n    //   <div\n    //     className={stylish.imgContainer}\n    //     id={`imageDiv_${index}`}\n    //     key={index}\n    //   >\n    //     <img\n    //       key={index}\n    //       className={stylish.tmpIMG}\n    //       src={recievedIMGLocations[index]}\n    //       alt=\"Oops\"\n    //     />\n    //   </div>\n    // ));\n\n  }\n\n  return __jsx(\"div\", {\n    className: `${stylish.PhotosContainer} ${!props.displayed ? undefined : stylish.Hidden}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }\n  }, __jsx(\"span\", {\n    onClick: e => props.togglePhotoManager(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }, \"\\u274C\"), __jsx(\"div\", {\n    className: stylish.Contents,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: stylish.headerIconContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  }, \"Uploaded photos\"), __jsx(\"label\", {\n    htmlFor: \"photoUpload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 11\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    name: \"photoUpload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }), __jsx(\"img\", {\n    src: uploadIcon,\n    alt: \"Upload\",\n    className: stylish.uploadIcon,\n    onClick: e => console.log(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }))), __jsx(\"div\", {\n    className: stylish.IMGPreview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, __jsx(\"form\", {\n    onSubmit: handleFileInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }, \"Upload image\"), __jsx(\"input\", {\n    name: \"testio\",\n    type: \"file\",\n    multiple: true,\n    accept: \"image/*\",\n    ref: fileInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }), __jsx(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  }, \"Placeholder for image upload\"), __jsx(Carousel // ssr={true}\n  , {\n    containerClass: stylish.Carousel,\n    itemClass: stylish.Item,\n    responsive: responsive,\n    showDots: true,\n    sliderClass: stylish.Slider // renderDotsOutside={true}\n    ,\n    customRightArrow: __jsx(CustomRightArrow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 33\n      }\n    }),\n    customLeftArrow: __jsx(CustomLeftArrow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 32\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }, recievedIMGLocations.length !== 0 ? renderSelectedImages(recievedIMGLocations) : __jsx(React.Fragment, null))))));\n};\n\nexport default PhotoManager;\n\nconst Arrow = () => __jsx(\"svg\", {\n  width: \"15\",\n  height: \"26\",\n  viewBox: \"0 0 15 26\",\n  fill: \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 3\n  }\n}, __jsx(\"path\", {\n  d: \"M2 24L13 13L2 2\",\n  stroke: \"#2F4858\",\n  \"stroke-width\": \"3\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }\n}));","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/modes-muzejs-client/components/PhotoManager.tsx"],"names":["React","useRef","useState","stylish","uploadIcon","Carousel","responsive","Axios","PhotoManager","props","readUploadedIMG","inputFile","tmpFileReader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","readAsDataURL","handleUpload","event","file","target","files","fileContents","console","log","e","warn","message","upIMGs","setUpIMGs","recievedIMGLocations","setRecievedIMGLocation","handleFileInput","preventDefault","tmp","fileInput","current","fileIndex","length","push","error","alert","post","then","response","data","catch","CustomRightArrow","onClick","rest","onMove","carouselState","currentSlide","deviceType","carRightArrow","Arrow","CustomLeftArrow","carLeftArrow","handleIMGClick","currentTarget","id","renderSelectedImages","renderedImagesArray","i","imgContainer","tmpIMG","undefined","map","el","PhotosContainer","displayed","Hidden","togglePhotoManager","Contents","headerIconContainer","IMGPreview","Item","Slider"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport stylish from \"./styles/PhotoManager.module.scss\";\nimport uploadIcon from \"../GAssets/upload_data.svg\";\nimport Carousel from \"react-multi-carousel\";\nimport { responsive } from \"./constants\";\nimport Axios from \"axios\";\n\nconst PhotoManager = (props: {\n  displayed: boolean;\n  togglePhotoManager: (toggle: boolean) => void;\n}) => {\n  async function readUploadedIMG(inputFile: Blob) {\n    const tmpFileReader = new FileReader();\n\n    return new Promise((resolve, reject) => {\n      tmpFileReader.onerror = () => {\n        tmpFileReader.abort();\n        reject(new DOMException(\"Problem parsing input file.\"));\n      };\n\n      tmpFileReader.onload = () => {\n        resolve(tmpFileReader.result);\n      };\n      tmpFileReader.readAsDataURL(inputFile);\n    });\n  }\n\n  const handleUpload = async (event: { target: { files: any[] } }) => {\n    const file = event.target.files[0];\n    try {\n      const fileContents = await readUploadedIMG(file);\n      console.log(fileContents);\n    } catch (e) {\n      console.warn(e.message);\n    }\n  };\n\n  const [upIMGs, setUpIMGs] = useState<Array<any>>([]);\n\n  const [recievedIMGLocations, setRecievedIMGLocation] = useState<\n    Array<string>\n  >([]);\n\n  async function handleFileInput(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    let tmp = [];\n    if (fileInput.current !== null && fileInput.current.files !== null) {\n      for (\n        let fileIndex = 0;\n        fileIndex < fileInput.current.files?.length;\n        fileIndex++\n      ) {\n        try {\n          const fileContents = await readUploadedIMG(\n            fileInput.current.files[fileIndex]\n          );\n          tmp.push(fileContents);\n          // setUploadedImg(fileContents);\n        } catch (error) {\n          alert(error);\n        }\n      }\n      setUpIMGs(tmp);\n    }\n    Axios.post(\"http://localhost:4000/tests/testIMG\", upIMGs)\n      .then(function (response) {\n        console.log(response.data);\n        setRecievedIMGLocation(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n  const fileInput = useRef<HTMLInputElement>(null);\n\n  const CustomRightArrow = ({ onClick, ...rest }) => {\n    const {\n      onMove,\n      carouselState: { currentSlide, deviceType },\n    } = rest;\n    // onMove means if dragging or swiping in progress.\n    return (\n      <button className={stylish.carRightArrow} onClick={() => onClick()}>\n        {Arrow()}\n      </button>\n    );\n  };\n\n  const CustomLeftArrow = ({ onClick, ...rest }) => {\n    const {\n      onMove,\n      carouselState: { currentSlide, deviceType },\n    } = rest;\n    return (\n      <button onClick={() => onClick()} className={stylish.carLeftArrow}>\n        {Arrow()}\n      </button>\n    );\n  };\n  const handleIMGClick = (\n    event: React.MouseEvent<HTMLImageElement, MouseEvent>\n  ) => {\n    console.log(\"hello from\", event.currentTarget.id);\n  };\n\n  /**\n   * Renders images in groups of two\n   * @param recievedIMGLocations An array of strings representing the location of images on the server\n   */\n  function renderSelectedImages(recievedIMGLocations: string[]): any {\n    let renderedImagesArray = [];\n    console.log(renderedImagesArray.length);\n    if (recievedIMGLocations.length !== 0) {\n      for (let i = 0; i < recievedIMGLocations.length; i++) {\n        renderedImagesArray.push(\n          <div className={stylish.imgContainer} key={i}>\n            <img\n              key={i}\n              id={`img_${i}`}\n              className={stylish.tmpIMG}\n              src={recievedIMGLocations[i]}\n              alt=\"Here be the image\"\n              onClick={handleIMGClick}\n            />\n            {/* Conditionlay render the second image */}\n            {recievedIMGLocations[i + 1] != undefined ? (\n              <img\n                key={i + 1}\n                id={`img_${i + 1}`}\n                src={recievedIMGLocations[i + 1]}\n                alt=\"here be the second one\"\n                className={stylish.tmpIMG}\n                onClick={handleIMGClick}\n              />\n            ) : undefined}\n          </div>\n        );\n        i++;\n        console.log(renderedImagesArray[i], \"Jeloo there\");\n      }\n      console.log(renderedImagesArray);\n      return renderedImagesArray.map((el) => el);\n    }\n    // return recievedIMGLocations.map((image, index) => (\n    //   <div\n    //     className={stylish.imgContainer}\n    //     id={`imageDiv_${index}`}\n    //     key={index}\n    //   >\n    //     <img\n    //       key={index}\n    //       className={stylish.tmpIMG}\n    //       src={recievedIMGLocations[index]}\n    //       alt=\"Oops\"\n    //     />\n    //   </div>\n    // ));\n  }\n\n  return (\n    <div\n      className={`${stylish.PhotosContainer} ${\n        !props.displayed ? undefined : stylish.Hidden\n      }`}\n    >\n      <span onClick={(e) => props.togglePhotoManager(true)}>❌</span>\n      <div className={stylish.Contents}>\n        <div className={stylish.headerIconContainer}>\n          <h3>Uploaded photos</h3>\n          <label htmlFor=\"photoUpload\">\n            <input type=\"file\" name=\"photoUpload\" />\n            <img\n              src={uploadIcon}\n              alt=\"Upload\"\n              className={stylish.uploadIcon}\n              onClick={(e) => console.log(e)}\n            />\n          </label>\n        </div>\n        <div className={stylish.IMGPreview}>\n          <form onSubmit={handleFileInput}>\n            <label>Upload image</label>\n            <input\n              name=\"testio\"\n              type=\"file\"\n              multiple\n              accept=\"image/*\"\n              ref={fileInput}\n            />\n            <input type=\"submit\" value=\"Submit\" />\n            <p>Placeholder for image upload</p>\n            <Carousel\n              // ssr={true}\n              containerClass={stylish.Carousel}\n              itemClass={stylish.Item}\n              responsive={responsive}\n              showDots\n              sliderClass={stylish.Slider}\n              // renderDotsOutside={true}\n              customRightArrow={<CustomRightArrow />}\n              customLeftArrow={<CustomLeftArrow />}\n            >\n              {recievedIMGLocations.length !== 0 ? (\n                renderSelectedImages(recievedIMGLocations)\n              ) : (\n                <></>\n              )}\n            </Carousel>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PhotoManager;\nconst Arrow = () => (\n  <svg\n    width=\"15\"\n    height=\"26\"\n    viewBox=\"0 0 15 26\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M2 24L13 13L2 2\"\n      stroke=\"#2F4858\"\n      stroke-width=\"3\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n);\n"]},"metadata":{},"sourceType":"module"}