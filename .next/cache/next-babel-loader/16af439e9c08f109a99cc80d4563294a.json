{"ast":null,"code":"var _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/LangBtnController.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport LanguageBtn from \"./LanguageBtn\";\nimport compStyle from \"./styles/LangBtnController.module.scss\";\n\nconst LangBtnController = props => {\n  const {\n    0: activeBtnPosition,\n    1: setActiveBtnPosition\n  } = useState();\n  const forceUpdate = React.useReducer(() => ({}), {})[1];\n\n  function activeBtnSwitcher(Btns) {\n    let flatBtns = Btns.flat().filter(ele => typeof ele != \"object\");\n    console.log(flatBtns);\n    setActiveBtnPosition(flatBtns.indexOf(true));\n    flatBtns.pop();\n\n    if (activeBtnPosition == flatBtns.length) {\n      flatBtns.unshift(true);\n    } else {\n      flatBtns.unshift(false);\n    }\n\n    console.log(flatBtns, \"after manipulation\");\n    Btns.forEach((btn, index) => btn[1] = flatBtns[index]);\n    forceUpdate();\n  }\n\n  const {\n    0: activeBtn,\n    1: setActiveBtn\n  } = useState(props.active);\n  /**\n   * Sets currently active button.\n   * @param id of a button\n   */\n\n  const activeBtnSetter = id => setActiveBtn(id);\n\n  const handleArrowClick = () => {\n    activeBtnSwitcher(Btns);\n    console.log(Btns);\n  };\n\n  let arrowBtn;\n  useEffect(() => {\n    var _arrowBtn;\n\n    console.log(document.getElementById(\"arrowButton\"), \"found it\");\n    arrowBtn = document.getElementById(\"arrowButton\");\n    (_arrowBtn = arrowBtn) === null || _arrowBtn === void 0 ? void 0 : _arrowBtn.addEventListener(\"click\", handleArrowClick);\n    return () => {\n      var _arrowBtn2;\n\n      return (_arrowBtn2 = arrowBtn) === null || _arrowBtn2 === void 0 ? void 0 : _arrowBtn2.removeEventListener(\"click\", handleArrowClick);\n    };\n  });\n  useEffect(() => {\n    const Btns = props.BtnArray.map((button, key) => {\n      return [__jsx(LanguageBtn, {\n        btnID: button,\n        btnText: button.toUpperCase(),\n        handleBtnClick: props.clickHandler,\n        inputEnabler: props.setIsNameEntryEnabled,\n        pressed: button === activeBtn ? true : false,\n        key: key,\n        langSelect: props.langSelector,\n        setActiveBtn: activeBtnSetter,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }\n      }), button === activeBtn ? true : false];\n    });\n    Btns.forEach(button => {\n      console.log(button[0].props.btnID);\n\n      if (button[0].props.btnID !== activeBtn) {\n        button[1] = false;\n      }\n    });\n    console.log(Btns);\n  }, []);\n  return __jsx(\"div\", {\n    className: compStyle.LangSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, Btns.map(ele => {\n    return ele;\n  }));\n};\n\nexport default LangBtnController;","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/LangBtnController.tsx"],"names":["React","useEffect","useState","LanguageBtn","compStyle","LangBtnController","props","activeBtnPosition","setActiveBtnPosition","forceUpdate","useReducer","activeBtnSwitcher","Btns","flatBtns","flat","filter","ele","console","log","indexOf","pop","length","unshift","forEach","btn","index","activeBtn","setActiveBtn","active","activeBtnSetter","id","handleArrowClick","arrowBtn","document","getElementById","addEventListener","removeEventListener","BtnArray","map","button","key","toUpperCase","clickHandler","setIsNameEntryEnabled","langSelector","btnID","LangSelect"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport LanguageBtn from \"./LanguageBtn\";\nimport compStyle from \"./styles/LangBtnController.module.scss\";\n\nconst LangBtnController = (props) => {\n  type TBtnArrayWithPressedState = {\n    btns: [JSX.Element, boolean];\n  };\n\n  const [activeBtnPosition, setActiveBtnPosition] = useState<Number>();\n  const forceUpdate = React.useReducer(() => ({}), {})[1] as () => void;\n\n  function activeBtnSwitcher(Btns: { btns: [JSX.Element, boolean] }[]) {\n    let flatBtns = Btns.flat().filter((ele) => typeof ele != \"object\");\n    console.log(flatBtns);\n    setActiveBtnPosition(flatBtns.indexOf(true));\n    flatBtns.pop();\n    if (activeBtnPosition == flatBtns.length) {\n      flatBtns.unshift(true);\n    } else {\n      flatBtns.unshift(false);\n    }\n    console.log(flatBtns, \"after manipulation\");\n    Btns.forEach((btn, index) => (btn[1] = flatBtns[index]));\n    forceUpdate();\n  }\n\n  const [activeBtn, setActiveBtn] = useState<string>(props.active);\n  /**\n   * Sets currently active button.\n   * @param id of a button\n   */\n  const activeBtnSetter = (id: string) => setActiveBtn(id);\n\n  const handleArrowClick = () => {\n    activeBtnSwitcher(Btns);\n    console.log(Btns);\n  };\n  let arrowBtn: HTMLElement | null;\n  useEffect(() => {\n    console.log(document.getElementById(\"arrowButton\"), \"found it\");\n    arrowBtn = document.getElementById(\"arrowButton\");\n    arrowBtn?.addEventListener(\"click\", handleArrowClick);\n    return () => arrowBtn?.removeEventListener(\"click\", handleArrowClick);\n  });\n\n  useEffect(() => {\n    const Btns: Array<TBtnArrayWithPressedState> = props.BtnArray.map(\n      (button, key) => {\n        return [\n          <LanguageBtn\n            btnID={button}\n            btnText={button.toUpperCase()}\n            handleBtnClick={props.clickHandler}\n            inputEnabler={props.setIsNameEntryEnabled}\n            pressed={button === activeBtn ? true : false}\n            key={key}\n            langSelect={props.langSelector}\n            setActiveBtn={activeBtnSetter}\n          />,\n          button === activeBtn ? true : false,\n        ];\n      }\n    );\n    Btns.forEach((button) => {\n      console.log(button[0].props.btnID);\n      if (button[0].props.btnID !== activeBtn) {\n        button[1] = false;\n      }\n    });\n    console.log(Btns);\n  }, []);\n\n  return (\n    <div className={compStyle.LangSelect}>\n      {Btns.map((ele: any) => {\n        return ele;\n      })}\n    </div>\n  );\n};\n\nexport default LangBtnController;\n"]},"metadata":{},"sourceType":"module"}