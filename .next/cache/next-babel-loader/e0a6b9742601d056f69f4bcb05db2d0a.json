{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/LangBtnController.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport LanguageBtn from \"./LanguageBtn\";\nimport compStyle from \"./styles/LangBtnController.module.scss\";\n\nvar LangBtnController = function LangBtnController(props) {\n  _s();\n\n  var _useState = useState(props.active),\n      activeBtn = _useState[0],\n      setActiveBtn = _useState[1];\n  /**\n   * Sets currently active button.\n   * @param id of a button\n   */\n\n\n  var activeBtnSetter = function activeBtnSetter(id) {\n    return setActiveBtn(id);\n  };\n\n  var handleArrowClick = function handleArrowClick() {\n    console.log(\"asdfsdafds\");\n  };\n\n  var arrowBtn;\n  useEffect(function () {\n    var _arrowBtn;\n\n    console.log(document.getElementById(\"arrowButton\"), \"found it\");\n    arrowBtn = document.getElementById(\"arrowButton\");\n    (_arrowBtn = arrowBtn) === null || _arrowBtn === void 0 ? void 0 : _arrowBtn.addEventListener(\"click\", handleArrowClick); // return function cleanup() {\n    //     arrowBtn?removeEventListener('click', () => {console.log('yeeet')});\n    // };\n  }, []);\n  useEffect(function () {\n    var flatBtns = Btns.flat().filter(function (ele) {\n      return typeof ele != \"object\";\n    });\n    console.log(flatBtns);\n    var tPosition = flatBtns.indexOf(true);\n\n    if (props.isArrowClicked) {\n      console.log(tPosition, \"hellio\");\n      console.log(props.isArrowClicked);\n      flatBtns.pop();\n\n      if (tPosition == flatBtns.length) {\n        flatBtns.unshift(true);\n      } else {\n        flatBtns.unshift(false);\n      }\n\n      console.log(flatBtns);\n      props.arrowClicker(false);\n    }\n  });\n  useEffect(function () {\n    Btns.forEach(function (button) {\n      console.log(button[0].props.btnID);\n\n      if (button[0].props.btnID !== activeBtn) {\n        button[1] = false;\n      }\n    });\n    console.log(Btns);\n  }, [activeBtn]);\n  var Btns = props.BtnArray.map(function (button, key) {\n    return [__jsx(LanguageBtn, {\n      btnID: button,\n      btnText: button.toUpperCase(),\n      handleBtnClick: props.clickHandler,\n      inputEnabler: props.setIsNameEntryEnabled,\n      pressed: button === activeBtn ? true : false,\n      key: key,\n      langSelect: props.langSelector,\n      setActiveBtn: activeBtnSetter,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }), button === activeBtn ? true : false];\n  });\n  return __jsx(\"div\", {\n    className: compStyle.LangSelect,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, Btns.map(function (ele) {\n    return ele;\n  }));\n};\n\n_s(LangBtnController, \"TkAAeDkGQknE2sMxRgnl1tOeu/E=\");\n\n_c = LangBtnController;\nexport default LangBtnController;\n\nvar _c;\n\n$RefreshReg$(_c, \"LangBtnController\");","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/LangBtnController.tsx"],"names":["React","useEffect","useState","LanguageBtn","compStyle","LangBtnController","props","active","activeBtn","setActiveBtn","activeBtnSetter","id","handleArrowClick","console","log","arrowBtn","document","getElementById","addEventListener","flatBtns","Btns","flat","filter","ele","tPosition","indexOf","isArrowClicked","pop","length","unshift","arrowClicker","forEach","button","btnID","BtnArray","map","key","toUpperCase","clickHandler","setIsNameEntryEnabled","langSelector","LangSelect"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport LanguageBtn from \"./LanguageBtn\";\nimport compStyle from \"./styles/LangBtnController.module.scss\";\n\nconst LangBtnController = (props) => {\n  type TBtnArrayWithPressedState = {\n    btns: [JSX.Element, boolean];\n  };\n\n  const [activeBtn, setActiveBtn] = useState<string>(props.active);\n  /**\n   * Sets currently active button.\n   * @param id of a button\n   */\n  const activeBtnSetter = (id: string) => setActiveBtn(id);\n  const handleArrowClick = () => {\n    console.log(\"asdfsdafds\");\n  };\n  let arrowBtn: HTMLElement | null;\n  useEffect(() => {\n    console.log(document.getElementById(\"arrowButton\"), \"found it\");\n    arrowBtn = document.getElementById(\"arrowButton\");\n    arrowBtn?.addEventListener(\"click\", handleArrowClick);\n    // return function cleanup() {\n    //     arrowBtn?removeEventListener('click', () => {console.log('yeeet')});\n    // };\n  }, []);\n\n  useEffect(() => {\n    let flatBtns = Btns.flat().filter((ele) => typeof ele != \"object\");\n    console.log(flatBtns);\n    let tPosition = flatBtns.indexOf(true);\n\n    if (props.isArrowClicked) {\n      console.log(tPosition, \"hellio\");\n      console.log(props.isArrowClicked);\n      flatBtns.pop();\n      if (tPosition == flatBtns.length) {\n        flatBtns.unshift(true);\n      } else {\n        flatBtns.unshift(false);\n      }\n      console.log(flatBtns);\n      props.arrowClicker(false);\n    }\n  });\n\n  useEffect(() => {\n    Btns.forEach((button) => {\n      console.log(button[0].props.btnID);\n      if (button[0].props.btnID !== activeBtn) {\n        button[1] = false;\n      }\n    });\n    console.log(Btns);\n  }, [activeBtn]);\n\n  const Btns: Array<TBtnArrayWithPressedState> = props.BtnArray.map(\n    (button, key) => {\n      return [\n        <LanguageBtn\n          btnID={button}\n          btnText={button.toUpperCase()}\n          handleBtnClick={props.clickHandler}\n          inputEnabler={props.setIsNameEntryEnabled}\n          pressed={button === activeBtn ? true : false}\n          key={key}\n          langSelect={props.langSelector}\n          setActiveBtn={activeBtnSetter}\n        />,\n        button === activeBtn ? true : false,\n      ];\n    }\n  );\n\n  return (\n    <div className={compStyle.LangSelect}>\n      {Btns.map((ele: any) => {\n        return ele;\n      })}\n    </div>\n  );\n};\n\nexport default LangBtnController;\n"]},"metadata":{},"sourceType":"module"}