{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/LangBtnController.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport LanguageBtn from \"./LanguageBtn\";\nimport compStyle from \"./styles/LangBtnController.module.scss\";\n\nvar LangBtnController = function LangBtnController(props) {\n  _s();\n\n  var _useState = useState(props.active),\n      activeBtn = _useState[0],\n      setActiveBtn = _useState[1];\n  /**\n   * Sets currently active button.\n   * @param id of a button\n   */\n\n\n  var activeBtnSetter = function activeBtnSetter(id) {\n    return setActiveBtn(id);\n  };\n\n  useEffect(function () {\n    Btns.forEach(function (button) {\n      console.log(button[0].props.btnID);\n\n      if (button[0].props.btnID !== activeBtn) {\n        button[1] = false;\n      }\n    });\n  }, [activeBtn]);\n  var Btns = props.BtnArray.map(function (button, key) {\n    return [__jsx(LanguageBtn, {\n      btnID: button,\n      btnText: button.toUpperCase(),\n      handleBtnClick: props.clickHandler,\n      inputEnabler: props.setIsNameEntryEnabled,\n      pressed: button === activeBtn ? true : false,\n      key: key,\n      langSelect: props.langSelector,\n      setActiveBtn: activeBtnSetter,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }), button === activeBtn ? true : false];\n  });\n  return __jsx(\"div\", {\n    className: compStyle.LangSelect,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, Btns.map(function (ele) {\n    return ele;\n  }));\n};\n\n_s(LangBtnController, \"IHSvylISV6VSWGyQhGgS8+/c8HY=\");\n\n_c = LangBtnController;\nexport default LangBtnController;\n\nvar _c;\n\n$RefreshReg$(_c, \"LangBtnController\");","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/LangBtnController.tsx"],"names":["React","useEffect","useState","LanguageBtn","compStyle","LangBtnController","props","active","activeBtn","setActiveBtn","activeBtnSetter","id","Btns","forEach","button","console","log","btnID","BtnArray","map","key","toUpperCase","clickHandler","setIsNameEntryEnabled","langSelector","LangSelect","ele"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,wCAAtB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAW;AAAA;;AAAA,kBAKDJ,QAAQ,CAASI,KAAK,CAACC,MAAf,CALP;AAAA,MAK5BC,SAL4B;AAAA,MAKjBC,YALiB;AAMnC;;;;;;AAIA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,EAAD;AAAA,WAAgBF,YAAY,CAACE,EAAD,CAA5B;AAAA,GAAxB;;AAEAV,EAAAA,SAAS,CAAC,YAAM;AACdW,IAAAA,IAAI,CAACC,OAAL,CAAa,UAACC,MAAD,EAAY;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAAC,CAAD,CAAN,CAAUR,KAAV,CAAgBW,KAA5B;;AACA,UAAIH,MAAM,CAAC,CAAD,CAAN,CAAUR,KAAV,CAAgBW,KAAhB,KAA0BT,SAA9B,EAAyC;AACvCM,QAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,KAAZ;AACD;AACF,KALD;AAMD,GAPQ,EAON,CAACN,SAAD,CAPM,CAAT;AASA,MAAMI,IAAsC,GAAGN,KAAK,CAACY,QAAN,CAAeC,GAAf,CAC7C,UAACL,MAAD,EAASM,GAAT,EAAiB;AACf,WAAO,CACL,MAAC,WAAD;AACE,MAAA,KAAK,EAAEN,MADT;AAEE,MAAA,OAAO,EAAEA,MAAM,CAACO,WAAP,EAFX;AAGE,MAAA,cAAc,EAAEf,KAAK,CAACgB,YAHxB;AAIE,MAAA,YAAY,EAAEhB,KAAK,CAACiB,qBAJtB;AAKE,MAAA,OAAO,EAAET,MAAM,KAAKN,SAAX,GAAuB,IAAvB,GAA8B,KALzC;AAME,MAAA,GAAG,EAAEY,GANP;AAOE,MAAA,UAAU,EAAEd,KAAK,CAACkB,YAPpB;AAQE,MAAA,YAAY,EAAEd,eARhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,EAWLI,MAAM,KAAKN,SAAX,GAAuB,IAAvB,GAA8B,KAXzB,CAAP;AAaD,GAf4C,CAA/C;AAkBA,SACE;AAAK,IAAA,SAAS,EAAEJ,SAAS,CAACqB,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGb,IAAI,CAACO,GAAL,CAAS,UAACO,GAAD,EAAc;AACtB,WAAOA,GAAP;AACD,GAFA,CADH,CADF;AAOD,CA9CD;;GAAMrB,iB;;KAAAA,iB;AAgDN,eAAeA,iBAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport LanguageBtn from \"./LanguageBtn\";\nimport compStyle from \"./styles/LangBtnController.module.scss\";\n\nconst LangBtnController = (props) => {\n  type TBtnArrayWithPressedState = {\n    btns: [JSX.Element, boolean];\n  };\n\n  const [activeBtn, setActiveBtn] = useState<string>(props.active);\n  /**\n   * Sets currently active button.\n   * @param id of a button\n   */\n  const activeBtnSetter = (id: string) => setActiveBtn(id);\n\n  useEffect(() => {\n    Btns.forEach((button) => {\n      console.log(button[0].props.btnID);\n      if (button[0].props.btnID !== activeBtn) {\n        button[1] = false;\n      }\n    });\n  }, [activeBtn]);\n\n  const Btns: Array<TBtnArrayWithPressedState> = props.BtnArray.map(\n    (button, key) => {\n      return [\n        <LanguageBtn\n          btnID={button}\n          btnText={button.toUpperCase()}\n          handleBtnClick={props.clickHandler}\n          inputEnabler={props.setIsNameEntryEnabled}\n          pressed={button === activeBtn ? true : false}\n          key={key}\n          langSelect={props.langSelector}\n          setActiveBtn={activeBtnSetter}\n        />,\n        button === activeBtn ? true : false,\n      ];\n    }\n  );\n\n  return (\n    <div className={compStyle.LangSelect}>\n      {Btns.map((ele: any) => {\n        return ele;\n      })}\n    </div>\n  );\n};\n\nexport default LangBtnController;\n"]},"metadata":{},"sourceType":"module"}