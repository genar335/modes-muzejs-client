{"ast":null,"code":"var _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/pages/TMS/create_test.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport Select from \"react-select\";\nimport PhotoManager from \"../../components/PhotoManager\";\nimport TestNamer from \"../../components/TestNamer\";\nimport TestPreview from \"../../components/TestPreview\";\nimport styles from \"../styles/create_test.module.scss\";\n\nfunction create_test() {\n  const {\n    0: test,\n    1: setTest\n  } = useState({\n    pages: 1,\n    en: {\n      name: \"\",\n      pages: []\n    },\n    lv: {\n      name: \"\",\n      pages: []\n    },\n    ru: {\n      name: \"\",\n      pages: []\n    },\n    type: \"\"\n  });\n  const {\n    0: currentLang,\n    1: setCurrentLang\n  } = useState();\n\n  function setCurrentLangForName(currentLang) {\n    setCurrentLang(currentLang);\n  }\n\n  const handleClick = () => {\n    setTest({\n      ru: {\n        name: \"imya\",\n        pages: test.ru.pages\n      },\n      lv: test.lv,\n      en: test.en,\n      pages: test.pages,\n      type: \"TP\"\n    });\n  };\n\n  const typeOptions = [{\n    value: \"TT\",\n    label: \"Text – Text\"\n  }, {\n    value: \"TP\",\n    label: \"Text – Photo\"\n  }, {\n    value: \"PP\",\n    label: \"Photo – Photo\"\n  }];\n  const {\n    0: testType,\n    1: setTestType\n  } = useState();\n\n  const handleTypeChange = chosenType => setTestType(chosenType);\n\n  const {\n    0: editEnabled,\n    1: setEditEnabled\n  } = useState(false);\n  useEffect(() => {\n    if ((currentLang && testType) != undefined) {\n      console.log(\"in an if\");\n      setEditEnabled(true);\n    } else {\n      setEditEnabled(false);\n    }\n  }, [currentLang, testType]);\n  return __jsx(\"div\", {\n    className: styles.CreateTestContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styles.TestType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, __jsx(Select, {\n    options: typeOptions,\n    className: styles.TestTypeSelect,\n    onChange: selected => handleTypeChange(selected.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: styles.PageController,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    disabled: !editEnabled,\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, \"Add page +\"), __jsx(\"input\", {\n    disabled: !editEnabled,\n    type: \"number\",\n    name: \"pageCount\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  })), testType === \"TT\" || testType === undefined ? null : __jsx(PhotoManager, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: styles.TestNaming,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, __jsx(TestNamer, {\n    currentLang: setCurrentLangForName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  })), __jsx(TestPreview, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default create_test;","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/pages/TMS/create_test.tsx"],"names":["React","useEffect","useState","Select","PhotoManager","TestNamer","TestPreview","styles","create_test","test","setTest","pages","en","name","lv","ru","type","currentLang","setCurrentLang","setCurrentLangForName","handleClick","typeOptions","value","label","testType","setTestType","handleTypeChange","chosenType","editEnabled","setEditEnabled","undefined","console","log","CreateTestContainer","TestType","TestTypeSelect","selected","PageController","TestNaming"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Select from \"react-select\";\nimport { ITest, TLangOption, TTestTypes } from \"../../@types/test\";\nimport PhotoManager from \"../../components/PhotoManager\";\nimport TestNamer from \"../../components/TestNamer\";\nimport TestPreview from \"../../components/TestPreview\";\nimport styles from \"../styles/create_test.module.scss\";\n\nfunction create_test() {\n  const [test, setTest] = useState<ITest>({\n    pages: 1,\n    en: {\n      name: \"\",\n      pages: [],\n    },\n    lv: {\n      name: \"\",\n      pages: [],\n    },\n    ru: {\n      name: \"\",\n      pages: [],\n    },\n    type: \"\",\n  });\n\n  const [currentLang, setCurrentLang] = useState<TLangOption>();\n\n  function setCurrentLangForName(currentLang: TLangOption): void {\n    setCurrentLang(currentLang);\n  }\n  const handleClick = () => {\n    setTest({\n      ru: {\n        name: \"imya\",\n        pages: test.ru.pages,\n      },\n      lv: test.lv,\n      en: test.en,\n      pages: test.pages,\n      type: \"TP\",\n    });\n  };\n\n  type TTypeOptions = {\n    value: \"TT\" | \"TP\" | \"PP\";\n    label: \"Text – Text\" | \"Text – Photo\" | \"Photo – Photo\";\n  };\n  const typeOptions: Array<TTypeOptions> = [\n    { value: \"TT\", label: \"Text – Text\" },\n    { value: \"TP\", label: \"Text – Photo\" },\n    { value: \"PP\", label: \"Photo – Photo\" },\n  ];\n\n  const [testType, setTestType] = useState<TTestTypes>();\n  const handleTypeChange = (chosenType: TTestTypes): void =>\n    setTestType(chosenType);\n\n  const [editEnabled, setEditEnabled] = useState<boolean>(false);\n  useEffect(() => {\n    if ((currentLang && testType) != undefined) {\n      console.log(\"in an if\");\n      setEditEnabled(true);\n    } else {\n      setEditEnabled(false);\n    }\n  }, [currentLang, testType]);\n\n  return (\n    <div className={styles.CreateTestContainer}>\n      <div className={styles.TestType}>\n        <Select\n          options={typeOptions}\n          className={styles.TestTypeSelect}\n          onChange={(selected: any): void => handleTypeChange(selected.value)}\n        />\n      </div>\n      <div className={styles.PageController}>\n        <button disabled={!editEnabled} onClick={handleClick}>\n          Add page +\n        </button>\n        <input disabled={!editEnabled} type=\"number\" name=\"pageCount\" />\n      </div>\n      {testType === ((\"TT\" as unknown) as TTestTypes) ||\n      testType === undefined ? null : (\n        <PhotoManager />\n      )}\n      <div className={styles.TestNaming}>\n        <TestNamer currentLang={setCurrentLangForName} />\n        {/* <Select\n          // TODO: Need to figure out types for the @selected parameter\n          onChange={(selected: any): void =>\n            handleLangChange(selected.value || \"\")\n          }\n          options={languageOptions}\n          className={styles.lgSelect}\n        /> */}\n      </div>\n      <TestPreview />\n    </div>\n  );\n}\n\nexport default create_test;\n"]},"metadata":{},"sourceType":"module"}