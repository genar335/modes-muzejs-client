{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState } from \"react\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\nimport addCompStyles from \"./styles/TestNamer.module.scss\";\nimport { closeBtn, SaveBtn } from \"./TestNamer\";\nimport { APIURL, productionURL, URLCheckForLocalHost } from \"./constants\"; // import { sendTheDataToTheServer } from \"./PhotoManager\";\n//\n//  const jwt = document.cookie.slice(document.cookie.indexOf('=') + 1);\n// Axios.defaults.headers.common[\"Authorization\"] =\n//\n\nimport Axios from \"axios\";\n\nvar QACard = function QACard(props) {\n  // useEffect(() => {\n  //   // Axios.defaults.headers.common[\"Authorization\"] =\n  //   //   \"Bearer \" + store.get(\"jwt\");\n  // }, []);\n  var charLimit = 90;\n\n  var _useState = useState(false),\n      isOpen = _useState[0],\n      setIsOpen = _useState[1]; // console.log(props.cardContents);\n  // console.log(\"Test for page contents\", props.pageContents);\n\n\n  var textPreviewer = function textPreviewer(text) {\n    // console.log(\"Hello from text preview\");\n    if (text.match(URLCheckForLocalHost) !== null) {\n      console.log(\"Hello there from URL checker\");\n      return \"There was an image before\";\n    }\n\n    if (text.length < 1) return __jsx(\"div\", {\n      className: compStyles.emptyText\n    }, \"T\");\n\n    if (text.length > charLimit) {\n      return text.slice(0, 65) + \"...\";\n    } else {\n      return text;\n    }\n  };\n\n  var QACardRefIMG = useRef(null); // useEffect(() => {\n  //   console.log(\"Yayyy\");\n  // }, [QACardRef.current]);\n\n  var handleCardReference = function handleCardReference() {\n    props.setCurrentCard(QACardRefIMG); // props.togglePhotoManager(false, `${props.cardType}_${props.iterator}`);\n  }; //! Image upload portion\n  // const [recievedIMGLocations, setRecievedIMGLocation] = useState<\n  //   Array<string>\n  // >([]);\n\n\n  var _useState2 = useState(),\n      readIMG = _useState2[0],\n      setReadIMG = _useState2[1];\n\n  var fileInputRef = useRef(null);\n\n  var readAnImage = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(imageToBeRead) {\n      var tmpFileReader;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              tmpFileReader = new FileReader();\n              return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                tmpFileReader.onerror = function () {\n                  tmpFileReader.abort();\n                  reject(new DOMException(\"Problem occured when reading the file.\"));\n                };\n\n                tmpFileReader.onload = function () {\n                  resolve(tmpFileReader.result);\n                };\n\n                tmpFileReader.readAsDataURL(imageToBeRead);\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function readAnImage(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var sendTheDataToTheServerToParse = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(file, fileName) {\n      var fileLocation, locationOfTheFile;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              fileLocation = \"\";\n              _context2.prev = 1;\n              console.log(\"Sending\", file);\n              _context2.next = 5;\n              return Axios.post( // `${producionURL}tests/imgSaving`,\n              \"\".concat(APIURL, \"tests/imgSaving\"), {\n                fileName: fileName,\n                fileContents: file\n              });\n\n            case 5:\n              locationOfTheFile = _context2.sent;\n              console.log(locationOfTheFile);\n              fileLocation = locationOfTheFile.data;\n              _context2.next = 14;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.error(_context2.t0);\n              alert(_context2.t0);\n\n            case 14:\n              return _context2.abrupt(\"return\", fileLocation);\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 10]]);\n    }));\n\n    return function sendTheDataToTheServerToParse(_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleFileinput = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event) {\n      var tmpCurrent, files, chosenFile, fileContents, fileLocationOnServer;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              event.preventDefault();\n              tmpCurrent = fileInputRef.current;\n              files = tmpCurrent.files;\n\n              if (!(files !== null)) {\n                _context3.next = 24;\n                break;\n              }\n\n              chosenFile = files[0];\n              console.log(chosenFile);\n\n              if (!fileInputRef.current) {\n                _context3.next = 22;\n                break;\n              }\n\n              _context3.prev = 7;\n              _context3.next = 10;\n              return readAnImage(chosenFile);\n\n            case 10:\n              fileContents = _context3.sent;\n              setReadIMG(fileContents); // console.log(fileContents);\n\n              _context3.next = 14;\n              return sendTheDataToTheServerToParse(fileContents, chosenFile.name);\n\n            case 14:\n              fileLocationOnServer = _context3.sent;\n\n              if (fileLocationOnServer.length > 0) {\n                props.saveIMG(props.iterator, fileLocationOnServer, props.cardType);\n              } else {\n                props.saveIMG(props.iterator, fileContents, props.cardType);\n              } // console.log(QACardRefIMG.current!.src, \"OI\");\n\n\n              _context3.next = 22;\n              break;\n\n            case 18:\n              _context3.prev = 18;\n              _context3.t0 = _context3[\"catch\"](7);\n              alert(\"There was an error reading the file. Please try again, or choose a differenet file\");\n              console.error(_context3.t0);\n\n            case 22:\n              _context3.next = 25;\n              break;\n\n            case 24:\n              alert(\"No file has been chosen.\");\n\n            case 25:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[7, 18]]);\n    }));\n\n    return function handleFileinput(_x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var _useState3 = useState(\"\"),\n      imgLocation = _useState3[0],\n      setimgLocation = _useState3[1];\n\n  function handleFileinputChange(event) {\n    // console.log(event.target.files[0]);\n    var file = event.target.files[0] || new File([], \"err\");\n    var fd = new FormData();\n    fd.append(\"image\", file);\n    console.log(fd.getAll(\"image\"));\n    Axios.post(\"\".concat(productionURL, \"tests/testimg\"), fd, {\n      // Axios.post(`http://localhost:4000/api/quiz/tests/testimg`, fd, {\n      headers: {\n        \"content-type\": \"multipart/form-data\"\n      }\n    }).then(function (res) {\n      console.log(res);\n      setimgLocation(res.data);\n      props.saveIMG(props.iterator, res.data, props.cardType, \"all\");\n    })[\"catch\"](function (err) {\n      return console.error(err);\n    });\n  } // useEffect(() => {\n  //   console.log(\"Input has \", fileInputRef.current?.files);\n  // }, [fileInputRef.current]);\n\n\n  return __jsx(\"div\", {\n    className: \"\".concat(compStyles[props.cardType])\n  }, __jsx(\"div\", {\n    // ref={QACardRef}\n    id: \"\".concat(props.cardType, \"_\").concat(props.iterator),\n    className: \"\".concat(addCompStyles.ModalContainerBG, \" \").concat(!isOpen ? addCompStyles.Hidden : null)\n  }, __jsx(\"div\", {\n    className: addCompStyles.ModalContainer\n  }, closeBtn(setIsOpen), __jsx(\"div\", {\n    className: addCompStyles.Modal\n  }, __jsx(\"div\", {\n    className: addCompStyles.NameForm\n  }, props.cardContents === \"text\" && props.q_a_TextEntry(props.cardType, props.iterator)), __jsx(\"button\", {\n    onClick: function onClick(e) {\n      return setIsOpen(!isOpen);\n    },\n    className: addCompStyles.SaveBtn\n  }, SaveBtn())))), __jsx(\"div\", {\n    className: compStyles.QADescription,\n    onClick: function onClick(e) {\n      props.cardContents === \"img\" ? handleCardReference() : setIsOpen(true);\n    }\n  }, props.cardContents === \"text\" ? __jsx(\"p\", {\n    className: compStyles.textInACard\n  }, textPreviewer(props.qna[props.cardType])) : __jsx(\"form\", {\n    onSubmit: handleFileinput,\n    className: compStyles.IMGForm\n  }, __jsx(\"img\", {\n    id: \"\".concat(props.cardType, \"_\").concat(props.iterator, \"_page-\").concat(props.pageNumber) // onChange={(e) => console.log(\"YAyyy\")}\n    ,\n    className: compStyles.SelectedIMGPreview // src={/* imgLocation || */ props.pageContents}\n    ,\n    src: props.pageContents.match(URLCheckForLocalHost) !== null ? props.pageContents : \"\",\n    alt: \"\\n              Click here to select the image \\n              Width: 245px\\n              Height: 245px\\n              Aspect ratio: ~ 1:1 \\n              \",\n    ref: QACardRefIMG,\n    onClick: function onClick(e) {\n      return fileInputRef.current.click();\n    }\n  }), __jsx(\"input\", {\n    className: compStyles.FileChooser,\n    style: {\n      display: \"none\"\n    },\n    type: \"file\",\n    accept: \"image/*\",\n    ref: fileInputRef,\n    onChange: handleFileinputChange\n  }))));\n};\n\nexport default QACard;","map":null,"metadata":{},"sourceType":"module"}