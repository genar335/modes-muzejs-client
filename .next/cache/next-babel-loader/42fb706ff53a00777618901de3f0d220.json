{"ast":null,"code":"var _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/LangBtnController.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport LanguageBtn from \"./LanguageBtn\";\nimport compStyle from \"./styles/LangBtnController.module.scss\";\n\nconst LangBtnController = props => {\n  const {\n    0: flatBtns,\n    1: setFlatBtns\n  } = useState([]);\n  const {\n    0: activeBtnPosition,\n    1: setActiveBtnPosition\n  } = useState();\n  const arrowBtn = document.getElementById(\"arrowButton\");\n  const forceUpdate = React.useReducer(() => ({}), {})[1]; // * Creates an array with values corresponding to parsed buttons activated value.\n  // * Happens on first render\n\n  if (flatBtns.length !== props.BtnArray.length) {\n    const tmp = props.BtnArray.map(btn => {\n      if (btn === props.active) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    setActiveBtnPosition(tmp.indexOf(true));\n    setFlatBtns(tmp);\n  }\n\n  const activeBtnPositionSetter = id => {\n    setFlatBtns(flatBtns.map((btn, index) => index === id ? btn = true : btn = false));\n    setActiveBtnPosition(id);\n    forceUpdate();\n  };\n\n  function activeBtnSwitcher() {\n    let tmp = flatBtns;\n    tmp.unshift(tmp[tmp.length - 1]);\n    tmp.pop(); // tmp.pop();\n    // if (tmp.indexOf(true) === tmp.length || tmp.indexOf(true) === -1) {\n    //   tmp.unshift(true);\n    // } else {\n    //   tmp.unshift(false);\n    // }\n\n    setFlatBtns(tmp);\n    activeBtnPositionSetter(flatBtns.indexOf(true));\n    props.langSelector(props.BtnArray[flatBtns.indexOf(true)]);\n    forceUpdate();\n  } // * Grabbing arrow in the modal which selects next element.\n  // * Assings a click listener to the grabbed element.\n\n\n  useEffect(() => {\n    console.log(arrowBtn === null || arrowBtn === void 0 ? void 0 : arrowBtn.firstChild.id);\n    (arrowBtn === null || arrowBtn === void 0 ? void 0 : arrowBtn.firstChild.id) == \"arrowBtn\" ? arrowBtn === null || arrowBtn === void 0 ? void 0 : arrowBtn.addEventListener(\"click\", handleArrowClick) : props.saveNames();\n    return () => arrowBtn === null || arrowBtn === void 0 ? void 0 : arrowBtn.removeEventListener(\"click\", handleArrowClick);\n  }, [arrowBtn]);\n\n  const handleArrowClick = () => {\n    activeBtnSwitcher();\n  };\n\n  return __jsx(\"div\", {\n    className: compStyle.LangSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, props.BtnArray.map((button, key) => __jsx(LanguageBtn, {\n    btnID: button,\n    btnText: button.toUpperCase(),\n    key: key,\n    langSelect: props.langSelector,\n    inputEnabler: props.inputEnabler,\n    setActiveBtn: activeBtnPositionSetter,\n    pressed: flatBtns[key],\n    accessKey: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default LangBtnController;","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/LangBtnController.tsx"],"names":["React","useEffect","useState","LanguageBtn","compStyle","LangBtnController","props","flatBtns","setFlatBtns","activeBtnPosition","setActiveBtnPosition","arrowBtn","document","getElementById","forceUpdate","useReducer","length","BtnArray","tmp","map","btn","active","indexOf","activeBtnPositionSetter","id","index","activeBtnSwitcher","unshift","pop","langSelector","console","log","firstChild","addEventListener","handleArrowClick","saveNames","removeEventListener","LangSelect","button","key","toUpperCase","inputEnabler"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { TLangOption } from \"../@types/test\";\nimport LanguageBtn from \"./LanguageBtn\";\nimport compStyle from \"./styles/LangBtnController.module.scss\";\n\nconst LangBtnController = (props: {\n  /**\n   * @BtnArray array containng button names\n   */\n  BtnArray: Array<string>;\n  /**\n   * @active Determines which button will appear highlighted in the beginning.\n   */\n  active: string;\n  langSelector: (chooseLanguage: TLangOption[\"value\"]) => void;\n  inputEnabler: (bool: boolean) => void;\n  saveNames: () => void;\n}) => {\n  const [flatBtns, setFlatBtns] = useState<Array<boolean>>([]);\n  const [activeBtnPosition, setActiveBtnPosition] = useState<Number>();\n  const arrowBtn = document.getElementById(\"arrowButton\") as HTMLElement;\n\n  const forceUpdate = React.useReducer(() => ({}), {})[1] as () => void;\n\n  // * Creates an array with values corresponding to parsed buttons activated value.\n  // * Happens on first render\n  if (flatBtns.length !== props.BtnArray.length) {\n    const tmp: boolean[] = props.BtnArray.map((btn: string) => {\n      if (btn === props.active) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    setActiveBtnPosition(tmp.indexOf(true));\n    setFlatBtns(tmp);\n  }\n\n  const activeBtnPositionSetter = (id: number) => {\n    setFlatBtns(\n      flatBtns.map((btn, index) =>\n        index === id ? (btn = true) : (btn = false)\n      )\n    );\n    setActiveBtnPosition(id);\n    forceUpdate();\n  };\n\n  function activeBtnSwitcher() {\n    let tmp = flatBtns;\n    tmp.unshift(tmp[tmp.length - 1]);\n    tmp.pop();\n    // tmp.pop();\n    // if (tmp.indexOf(true) === tmp.length || tmp.indexOf(true) === -1) {\n    //   tmp.unshift(true);\n    // } else {\n    //   tmp.unshift(false);\n    // }\n    setFlatBtns(tmp);\n    activeBtnPositionSetter(flatBtns.indexOf(true));\n    props.langSelector(\n      props.BtnArray[flatBtns.indexOf(true)] as TLangOption[\"value\"]\n    );\n    forceUpdate();\n  }\n\n  // * Grabbing arrow in the modal which selects next element.\n  // * Assings a click listener to the grabbed element.\n  useEffect(() => {\n    console.log(arrowBtn?.firstChild!.id);\n    arrowBtn?.firstChild!.id == \"arrowBtn\"\n      ? arrowBtn?.addEventListener(\"click\", handleArrowClick)\n      : props.saveNames();\n    return () => arrowBtn?.removeEventListener(\"click\", handleArrowClick);\n  }, [arrowBtn]);\n\n  const handleArrowClick = (): void => {\n    activeBtnSwitcher();\n  };\n  return (\n    <div className={compStyle.LangSelect}>\n      {props.BtnArray.map((button: string, key: number) => (\n        <LanguageBtn\n          btnID={button}\n          btnText={button.toUpperCase()}\n          key={key}\n          langSelect={props.langSelector}\n          inputEnabler={props.inputEnabler}\n          setActiveBtn={activeBtnPositionSetter}\n          pressed={flatBtns[key]}\n          accessKey={key}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default LangBtnController;\n"]},"metadata":{},"sourceType":"module"}