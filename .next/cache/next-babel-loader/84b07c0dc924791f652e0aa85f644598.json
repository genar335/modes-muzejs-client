{"ast":null,"code":"var _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/LangBtnController.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport LanguageBtn from \"./LanguageBtn\";\nimport compStyle from \"./styles/LangBtnController.module.scss\";\n\nconst LangBtnController = props => {\n  const {\n    0: activeBtn,\n    1: setActiveBtn\n  } = useState(props.active);\n  /**\n   * Sets currently active button.\n   * @param id of a button\n   */\n\n  const activeBtnSetter = id => setActiveBtn(id);\n\n  useEffect(() => {\n    let flatBtns = Btns.flat().filter(ele => typeof ele != \"object\");\n    console.log(flatBtns);\n    let tPosition = flatBtns.indexOf(true);\n\n    if (props.isArrowClicked) {\n      console.log(tPosition, \"hellio\");\n      console.log(props.isArrowClicked);\n    }\n\n    Btns.forEach(button => {\n      console.log(button[0].props.btnID);\n\n      if (button[0].props.btnID !== activeBtn) {\n        button[1] = false;\n      }\n    });\n    console.log(Btns);\n  }, [activeBtn]);\n  const Btns = props.BtnArray.map((button, key) => {\n    return [__jsx(LanguageBtn, {\n      btnID: button,\n      btnText: button.toUpperCase(),\n      handleBtnClick: props.clickHandler,\n      inputEnabler: props.setIsNameEntryEnabled,\n      pressed: button === activeBtn ? true : false,\n      key: key,\n      langSelect: props.langSelector,\n      setActiveBtn: activeBtnSetter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }), button === activeBtn ? true : false];\n  });\n  return __jsx(\"div\", {\n    className: compStyle.LangSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, Btns.map(ele => {\n    return ele;\n  }));\n};\n\nexport default LangBtnController;","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/LangBtnController.tsx"],"names":["React","useEffect","useState","LanguageBtn","compStyle","LangBtnController","props","activeBtn","setActiveBtn","active","activeBtnSetter","id","flatBtns","Btns","flat","filter","ele","console","log","tPosition","indexOf","isArrowClicked","forEach","button","btnID","BtnArray","map","key","toUpperCase","clickHandler","setIsNameEntryEnabled","langSelector","LangSelect"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,wCAAtB;;AAEA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AAKnC,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BN,QAAQ,CAASI,KAAK,CAACG,MAAf,CAA1C;AACA;;;;;AAIA,QAAMC,eAAe,GAAIC,EAAD,IAAgBH,YAAY,CAACG,EAAD,CAApD;;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,QAAQ,GAAGC,IAAI,CAACC,IAAL,GAAYC,MAAZ,CAAoBC,GAAD,IAAS,OAAOA,GAAP,IAAc,QAA1C,CAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACA,QAAIO,SAAS,GAAGP,QAAQ,CAACQ,OAAT,CAAiB,IAAjB,CAAhB;;AAEA,QAAId,KAAK,CAACe,cAAV,EAA0B;AACxBJ,MAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ,EAAuB,QAAvB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAACe,cAAlB;AAED;;AACDR,IAAAA,IAAI,CAACS,OAAL,CAAcC,MAAD,IAAY;AACvBN,MAAAA,OAAO,CAACC,GAAR,CAAYK,MAAM,CAAC,CAAD,CAAN,CAAUjB,KAAV,CAAgBkB,KAA5B;;AACA,UAAID,MAAM,CAAC,CAAD,CAAN,CAAUjB,KAAV,CAAgBkB,KAAhB,KAA0BjB,SAA9B,EAAyC;AACvCgB,QAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,KAAZ;AACD;AACF,KALD;AAMAN,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACD,GAjBQ,EAiBN,CAACN,SAAD,CAjBM,CAAT;AAmBA,QAAMM,IAAsC,GAAGP,KAAK,CAACmB,QAAN,CAAeC,GAAf,CAC7C,CAACH,MAAD,EAASI,GAAT,KAAiB;AACf,WAAO,CACL,MAAC,WAAD;AACE,MAAA,KAAK,EAAEJ,MADT;AAEE,MAAA,OAAO,EAAEA,MAAM,CAACK,WAAP,EAFX;AAGE,MAAA,cAAc,EAAEtB,KAAK,CAACuB,YAHxB;AAIE,MAAA,YAAY,EAAEvB,KAAK,CAACwB,qBAJtB;AAKE,MAAA,OAAO,EAAEP,MAAM,KAAKhB,SAAX,GAAuB,IAAvB,GAA8B,KALzC;AAME,MAAA,GAAG,EAAEoB,GANP;AAOE,MAAA,UAAU,EAAErB,KAAK,CAACyB,YAPpB;AAQE,MAAA,YAAY,EAAErB,eARhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,EAWLa,MAAM,KAAKhB,SAAX,GAAuB,IAAvB,GAA8B,KAXzB,CAAP;AAaD,GAf4C,CAA/C;AAkBA,SACE;AAAK,IAAA,SAAS,EAAEH,SAAS,CAAC4B,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGnB,IAAI,CAACa,GAAL,CAAUV,GAAD,IAAc;AACtB,WAAOA,GAAP;AACD,GAFA,CADH,CADF;AAOD,CAxDD;;AA0DA,eAAeX,iBAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport LanguageBtn from \"./LanguageBtn\";\nimport compStyle from \"./styles/LangBtnController.module.scss\";\n\nconst LangBtnController = (props) => {\n  type TBtnArrayWithPressedState = {\n    btns: [JSX.Element, boolean];\n  };\n\n  const [activeBtn, setActiveBtn] = useState<string>(props.active);\n  /**\n   * Sets currently active button.\n   * @param id of a button\n   */\n  const activeBtnSetter = (id: string) => setActiveBtn(id);\n\n  useEffect(() => {\n    let flatBtns = Btns.flat().filter((ele) => typeof ele != \"object\");\n    console.log(flatBtns);\n    let tPosition = flatBtns.indexOf(true);\n\n    if (props.isArrowClicked) {\n      console.log(tPosition, \"hellio\");\n      console.log(props.isArrowClicked);\n      \n    }\n    Btns.forEach((button) => {\n      console.log(button[0].props.btnID);\n      if (button[0].props.btnID !== activeBtn) {\n        button[1] = false;\n      }\n    });\n    console.log(Btns);\n  }, [activeBtn]);\n\n  const Btns: Array<TBtnArrayWithPressedState> = props.BtnArray.map(\n    (button, key) => {\n      return [\n        <LanguageBtn\n          btnID={button}\n          btnText={button.toUpperCase()}\n          handleBtnClick={props.clickHandler}\n          inputEnabler={props.setIsNameEntryEnabled}\n          pressed={button === activeBtn ? true : false}\n          key={key}\n          langSelect={props.langSelector}\n          setActiveBtn={activeBtnSetter}\n        />,\n        button === activeBtn ? true : false,\n      ];\n    }\n  );\n\n  return (\n    <div className={compStyle.LangSelect}>\n      {Btns.map((ele: any) => {\n        return ele;\n      })}\n    </div>\n  );\n};\n\nexport default LangBtnController;\n"]},"metadata":{},"sourceType":"module"}