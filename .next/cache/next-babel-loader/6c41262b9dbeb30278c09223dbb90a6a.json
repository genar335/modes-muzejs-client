{"ast":null,"code":"var _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestCard.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport editIcon from \"../GAssets/create_icon_big.png\";\nimport styles from \"./styles/TestCard.module.scss\";\nimport Switch from \"react-switch\";\nimport Axios from \"axios\";\nimport { devURL } from \"./constants\";\n\nconst TestCard = props => {\n  const CardStyle = {\n    background: `rgb(${props.colour})`\n  };\n  console.log(props, \"card props\");\n  const {\n    0: isTestActive,\n    1: setIsTestActive\n  } = useState(props.active);\n  useEffect(() => {\n    setIsTestActive(props.active);\n    useForceUpdate();\n  }, []); // const [switchIsActive, setSwichIsActive] = useState<boolean>(props.active);\n\n  function useForceUpdate() {\n    const {\n      0: value,\n      1: setValue\n    } = useState(0); // integer state\n\n    return () => setValue(value => ++value); // update the state to force render\n  }\n\n  const changeTestState = async (testID, isActive) => {\n    let changedTest;\n\n    try {\n      const responseFromServer = await Axios.post(`${devURL}tests/toggleTestActiveState`, {\n        testID,\n        isActive\n      });\n      changedTest = responseFromServer.data; // setSwichIsActive(!switchIsActive);\n\n      setIsTestActive(changedTest.active);\n      console.log(changedTest, \"recieved a response\");\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleActiveChange = async () => {\n    // setIsActive(!isActive);\n    await changeTestState(props._id, !isTestActive);\n    console.log(\"Calling all tests\");\n    setTimeout(() => {\n      props.updateTests(props._id);\n    }, 1000);\n  };\n\n  return __jsx(\"div\", {\n    key: props._id,\n    id: props._id,\n    className: styles.TestCard,\n    style: CardStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, __jsx(Switch, {\n    onChange: handleActiveChange,\n    checked: isTestActive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), __jsx(\"img\", {\n    src: editIcon,\n    alt: \"Edit icon\",\n    className: styles.LookingGlass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), __jsx(\"h1\", {\n    onClick: handleActiveChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, \"Test title in ru: \", props.nameInRu), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, \"Test id: \", props._id), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, \"Main question of test\"));\n};\n\nexport default TestCard;","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestCard.tsx"],"names":["React","useEffect","useState","editIcon","styles","Switch","Axios","devURL","TestCard","props","CardStyle","background","colour","console","log","isTestActive","setIsTestActive","active","useForceUpdate","value","setValue","changeTestState","testID","isActive","changedTest","responseFromServer","post","data","error","handleActiveChange","_id","setTimeout","updateTests","LookingGlass","nameInRu"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport editIcon from \"../GAssets/create_icon_big.png\";\nimport styles from \"./styles/TestCard.module.scss\";\nimport Switch from \"react-switch\";\nimport Axios from \"axios\";\nimport { devURL } from \"./constants\";\nimport { ITest } from \"../@types/test\";\n\nconst TestCard = (props: {\n  iterator: number;\n  colour: string;\n  _id: string;\n  nameInRu: string;\n  active: boolean;\n  // parentComponentTestFetcher: () => Promise<void>;\n  // mainTestFetcher: () => Promise<void>;\n  updateTests: (testID: string) => void;\n}) => {\n  const CardStyle: Object = {\n    background: `rgb(${props.colour})`,\n  };\n\n  console.log(props, \"card props\");\n  const [isTestActive, setIsTestActive] = useState<boolean>(props.active);\n  useEffect(() => {\n    setIsTestActive(props.active);\n    useForceUpdate();\n  }, []);\n  // const [switchIsActive, setSwichIsActive] = useState<boolean>(props.active);\n\n  function useForceUpdate() {\n    const [value, setValue] = useState(0); // integer state\n    return () => setValue((value) => ++value); // update the state to force render\n  }\n\n  const changeTestState = async (testID: string, isActive: boolean) => {\n    let changedTest: ITest;\n    try {\n      const responseFromServer = await Axios.post(\n        `${devURL}tests/toggleTestActiveState`,\n        {\n          testID,\n          isActive,\n        }\n      );\n      changedTest = responseFromServer.data;\n      // setSwichIsActive(!switchIsActive);\n      setIsTestActive(changedTest.active);\n      console.log(changedTest, \"recieved a response\");\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleActiveChange = async () => {\n    // setIsActive(!isActive);\n    await changeTestState(props._id, !isTestActive);\n    console.log(\"Calling all tests\");\n    setTimeout(() => {\n      props.updateTests(props._id);\n    }, 1000);\n  };\n\n  return (\n    <div\n      key={props._id}\n      id={props._id}\n      className={styles.TestCard}\n      style={CardStyle}\n    >\n      <Switch onChange={handleActiveChange} checked={isTestActive} />\n      {/* \n      //! Need to figure out how to time the switch\n      */}\n      <img src={editIcon} alt=\"Edit icon\" className={styles.LookingGlass} />\n      <h1 onClick={handleActiveChange}>Test title in ru: {props.nameInRu}</h1>\n      <h2>Test id: {props._id}</h2>\n      <span>Main question of test</span>\n    </div>\n  );\n};\n\nexport default TestCard;\n"]},"metadata":{},"sourceType":"module"}