{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestCard.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport editIcon from \"../GAssets/create_icon_big.png\";\nimport styles from \"./styles/TestCard.module.scss\";\nimport Switch from \"react-switch\";\nimport Axios from \"axios\";\nimport { devURL } from \"./constants\";\nimport { useRouter } from \"next/router\";\nimport { motion } from \"framer-motion\";\n\nvar TestCard = function TestCard(props) {\n  _s();\n\n  var CardStyle = {\n    background: \"rgb(\".concat(props.colour, \")\")\n  };\n  var router = useRouter();\n\n  var forwardToTestEdit = function forwardToTestEdit(testID) {\n    router.push(\"/TMS/create_test?testToEdit=\".concat(testID));\n  }; // console.log(props, \"card props\");\n\n\n  var _useState = useState(props.active),\n      isTestActive = _useState[0],\n      setIsTestActive = _useState[1];\n\n  useEffect(function () {\n    setIsTestActive(props.active);\n  }, []); // const [switchIsActive, setSwichIsActive] = useState<boolean>(props.active);\n\n  var changeTestState = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(testID, isActive) {\n      var changedTest, responseFromServer;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return Axios.post(\"\".concat(devURL, \"tests/toggleTestActiveState\"), {\n                testID: testID,\n                isActive: isActive\n              });\n\n            case 3:\n              responseFromServer = _context.sent;\n              changedTest = responseFromServer.data; // setSwichIsActive(!switchIsActive);\n              // setIsTestActive(changedTest.active);\n\n              console.log(changedTest, \"recieved a response\");\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function changeTestState(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleActiveChange = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return changeTestState(props._id, !isTestActive);\n\n            case 2:\n              console.log(\"Calling all tests\");\n              setTimeout(function () {\n                props.updateTests(props._id);\n              }, 10);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleActiveChange() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleEditIconClick = function handleEditIconClick() {\n    alert(\"Sending you to edit a test\");\n    forwardToTestEdit(props._id);\n  };\n\n  var handleDeleteIconClick = function handleDeleteIconClick() {\n    Axios.get(\"\".concat(devURL, \"tests/deleteTestByID?testToDelete=\").concat(props._id))[\"catch\"](function (error) {\n      return alert(error);\n    }).then(function (response) {\n      console.log(response);\n      props.fetchAllTests();\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: styles.TestCardBackground,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, __jsx(motion.div, {\n    animate: \"visible\",\n    initial: \"hidden\",\n    variants: {\n      hidden: {\n        opacity: 0\n      },\n      visible: {\n        opacity: 1\n      }\n    },\n    key: props._id,\n    id: props._id,\n    className: styles.TestCard,\n    style: CardStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, __jsx(Switch, {\n    onChange: handleActiveChange,\n    checked: isTestActive,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }), __jsx(\"img\", {\n    onClick: handleEditIconClick,\n    src: editIcon,\n    alt: \"Edit icon\",\n    className: styles.EditIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }), __jsx(\"h3\", {\n    onClick: handleActiveChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, \"Test title in ru: \", props.nameInRu), __jsx(\"h4\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, \"Test id: \", props._id), __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, \"Main question of test\"), __jsx(\"h1\", {\n    onClick: handleDeleteIconClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, \"\\u2716\\uFE0E\")));\n};\n\n_s(TestCard, \"voe/bT3xYXjkDubvcU32hN0z8pE=\", false, function () {\n  return [useRouter];\n});\n\n_c = TestCard;\nexport default TestCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestCard\");","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestCard.tsx"],"names":["React","useEffect","useState","editIcon","styles","Switch","Axios","devURL","useRouter","motion","TestCard","props","CardStyle","background","colour","router","forwardToTestEdit","testID","push","active","isTestActive","setIsTestActive","changeTestState","isActive","post","responseFromServer","changedTest","data","console","log","error","handleActiveChange","_id","setTimeout","updateTests","handleEditIconClick","alert","handleDeleteIconClick","get","then","response","fetchAllTests","TestCardBackground","hidden","opacity","visible","EditIcon","nameInRu"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport editIcon from \"../GAssets/create_icon_big.png\";\nimport styles from \"./styles/TestCard.module.scss\";\nimport Switch from \"react-switch\";\nimport Axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { devURL } from \"./constants\";\nimport { ITest } from \"../@types/test\";\nimport { NextRouter, useRouter } from \"next/router\";\nimport { motion } from \"framer-motion\";\n\nconst TestCard = (props: {\n  iterator: number;\n  colour: string;\n  _id: string;\n  nameInRu: string;\n  active: boolean;\n  // parentComponentTestFetcher: () => Promise<void>;\n  // mainTestFetcher: () => Promise<void>;\n  updateTests: (testID: string) => void;\n  fetchAllTests: () => Promise<void>;\n}) => {\n  const CardStyle: Object = {\n    background: `rgb(${props.colour})`,\n  };\n\n  const router: NextRouter = useRouter();\n  const forwardToTestEdit = (testID: string) => {\n    router.push(`/TMS/create_test?testToEdit=${testID}`);\n  };\n\n  // console.log(props, \"card props\");\n  const [isTestActive, setIsTestActive] = useState<boolean>(props.active);\n  useEffect(() => {\n    setIsTestActive(props.active);\n  }, []);\n\n  // const [switchIsActive, setSwichIsActive] = useState<boolean>(props.active);\n\n  const changeTestState = async (testID: string, isActive: boolean) => {\n    let changedTest: ITest;\n    try {\n      const responseFromServer = await Axios.post(\n        `${devURL}tests/toggleTestActiveState`,\n        {\n          testID,\n          isActive,\n        }\n      );\n      changedTest = responseFromServer.data;\n      // setSwichIsActive(!switchIsActive);\n      // setIsTestActive(changedTest.active);\n      console.log(changedTest, \"recieved a response\");\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleActiveChange = async () => {\n    // setSwichIsActive(!switchIsActive);\n    await changeTestState(props._id, !isTestActive);\n    console.log(\"Calling all tests\");\n    setTimeout(() => {\n      props.updateTests(props._id);\n    }, 10);\n  };\n\n  const handleEditIconClick = () => {\n    alert(\"Sending you to edit a test\");\n    forwardToTestEdit(props._id);\n  };\n\n  const handleDeleteIconClick = () => {\n    Axios.get(`${devURL}tests/deleteTestByID?testToDelete=${props._id}`)\n      .catch((error: AxiosError) => alert(error))\n      .then((response) => {\n        console.log(response);\n        props.fetchAllTests();\n      });\n  };\n\n  return (\n    <div className={styles.TestCardBackground}>\n      <motion.div\n        animate=\"visible\"\n        initial=\"hidden\"\n        variants={{\n          hidden: { opacity: 0 },\n          visible: { opacity: 1 },\n        }}\n        key={props._id}\n        id={props._id}\n        className={styles.TestCard}\n        style={CardStyle}\n      >\n        <Switch onChange={handleActiveChange} checked={isTestActive} />\n        {/* \n      //! Need to figure out how to time the switch\n    */}\n        <img\n          onClick={handleEditIconClick}\n          src={editIcon}\n          alt=\"Edit icon\"\n          className={styles.EditIcon}\n        />\n        <h3 onClick={handleActiveChange}>Test title in ru: {props.nameInRu}</h3>\n        <h4>Test id: {props._id}</h4>\n        <span>Main question of test</span>\n        <h1 onClick={handleDeleteIconClick}>✖︎</h1>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default TestCard;\n"]},"metadata":{},"sourceType":"module"}