{"ast":null,"code":"var _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/pages/TMS/create_test.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport Select from \"react-select\";\nimport PhotoManager from \"../../components/PhotoManager\";\nimport TestPreview from \"../../components/TestPreview\";\nimport styles from \"../styles/create_test.module.scss\";\n\nfunction create_test() {\n  const {\n    0: test,\n    1: setTest\n  } = useState({\n    pages: 1,\n    en: {\n      name: \"\",\n      pages: []\n    },\n    lv: {\n      name: \"\",\n      pages: []\n    },\n    ru: {\n      name: \"\",\n      pages: []\n    },\n    type: \"PP\"\n  });\n  const {\n    0: currentLang,\n    1: setCurrentLang\n  } = useState(\"\");\n\n  const handleLangChange = chosenLang => {\n    setCurrentLang(chosenLang);\n  };\n\n  const handleClick = () => {\n    setTest({\n      ru: {\n        name: \"imya\",\n        pages: test.ru.pages\n      },\n      lv: test.lv,\n      en: test.en,\n      pages: test.pages,\n      type: \"TP\"\n    });\n  };\n\n  const languageOptions = [{\n    value: \"ru\",\n    label: \"RU\"\n  }, {\n    value: \"en\",\n    label: \"EN\"\n  }, {\n    value: \"lv\",\n    label: \"LV\"\n  }];\n  const typeOptions = [{\n    value: \"TT\",\n    label: \"Text – Text\"\n  }, {\n    value: \"TP\",\n    label: \"Text – Photo\"\n  }, {\n    value: \"PP\",\n    label: \"Photo – Photo\"\n  }];\n  const {\n    0: testType,\n    1: setTestType\n  } = useState();\n\n  const handleTypeChange = chosenType => setTestType(chosenType);\n\n  return __jsx(\"div\", {\n    className: styles.CreateTestContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styles.TestType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, __jsx(Select, {\n    options: typeOptions,\n    className: styles.TestTypeSelect,\n    onChange: selected => handleTypeChange(selected.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: styles.PageController,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, \"Add page\"), __jsx(\"input\", {\n    type: \"number\",\n    name: \"pageCount\",\n    id: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  })), __jsx(PhotoManager, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: styles.TestNaming,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    name: \"TestName\",\n    placeholder: \"Test name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), __jsx(Select // TODO: Need to figure out types for the @selected parameter\n  , {\n    onChange: selected => handleLangChange(selected.value || \"\"),\n    options: languageOptions,\n    className: styles.lgSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  })), __jsx(TestPreview, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default create_test;","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/pages/TMS/create_test.tsx"],"names":["React","useState","Select","PhotoManager","TestPreview","styles","create_test","test","setTest","pages","en","name","lv","ru","type","currentLang","setCurrentLang","handleLangChange","chosenLang","handleClick","languageOptions","value","label","typeOptions","testType","setTestType","handleTypeChange","chosenType","CreateTestContainer","TestType","TestTypeSelect","selected","PageController","TestNaming","lgSelect"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Select from \"react-select\";\nimport { ITest } from \"../../@types/test\";\nimport PhotoManager from \"../../components/PhotoManager\";\nimport TestPreview from \"../../components/TestPreview\";\nimport styles from \"../styles/create_test.module.scss\";\n\nfunction create_test() {\n  const [test, setTest] = useState<ITest>({\n    pages: 1,\n    en: {\n      name: \"\",\n      pages: [],\n    },\n    lv: {\n      name: \"\",\n      pages: [],\n    },\n    ru: {\n      name: \"\",\n      pages: [],\n    },\n    type: \"PP\",\n  });\n  const [currentLang, setCurrentLang] = useState<string>(\"\");\n  const handleLangChange = (chosenLang: string) => {\n    setCurrentLang(chosenLang);\n  };\n\n  const handleClick = () => {\n    setTest({\n      ru: {\n        name: \"imya\",\n        pages: test.ru.pages,\n      },\n      lv: test.lv,\n      en: test.en,\n      pages: test.pages,\n      type: \"TP\",\n    });\n  };\n\n  const languageOptions: Array<TLangOption> = [\n    { value: \"ru\", label: \"RU\" },\n    { value: \"en\", label: \"EN\" },\n    { value: \"lv\", label: \"LV\" },\n  ];\n\n  type TTypeOptions = {\n    value: \"TT\" | \"TP\" | \"PP\";\n    label: \"Text – Text\" | \"Text – Photo\" | \"Photo – Photo\";\n  };\n  const typeOptions: Array<TTypeOptions> = [\n    { value: \"TT\", label: \"Text – Text\" },\n    { value: \"TP\", label: \"Text – Photo\" },\n    { value: \"PP\", label: \"Photo – Photo\" },\n  ];\n\n  const [testType, setTestType] = useState<TTestTypes>();\n  const handleTypeChange = (chosenType: TTestTypes): void =>\n    setTestType(chosenType);\n\n  return (\n    <div className={styles.CreateTestContainer}>\n      <div className={styles.TestType}>\n        <Select\n          options={typeOptions}\n          className={styles.TestTypeSelect}\n          onChange={(selected: any): void => handleTypeChange(selected.value)}\n        />\n      </div>\n      <div className={styles.PageController}>\n        <button onClick={handleClick}>Add page</button>\n        <input type=\"number\" name=\"pageCount\" id=\"\" />\n      </div>\n      <PhotoManager />\n      <div className={styles.TestNaming}>\n        <input type=\"text\" name=\"TestName\" placeholder=\"Test name\" />\n        <Select\n          // TODO: Need to figure out types for the @selected parameter\n          onChange={(selected: any): void =>\n            handleLangChange(selected.value || \"\")\n          }\n          options={languageOptions}\n          className={styles.lgSelect}\n        />\n      </div>\n      <TestPreview />\n    </div>\n  );\n}\n\nexport default create_test;\n"]},"metadata":{},"sourceType":"module"}