{"ast":null,"code":"var _jsxFileName = \"/Users/yberfox/Documents/personal-projects/modes-muzejs-client/components/TestPreview.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\nimport QACard from \"./QACard\";\nimport { textEntryCountLimit } from \"./constants\"; // import { URLCheckForLocalhost } from \"./constants\";\n\nconst TestPreview = props => {\n  const {\n    0: isQOpen,\n    1: setisQOpen\n  } = useState(false);\n  const {\n    0: isAOpen,\n    1: setisAOpen\n  } = useState(false);\n  const {\n    0: selectedLang,\n    1: setSelectedLang\n  } = useState(\"ru\");\n\n  const setSelectedLanguage = chooseLanguage => {\n    setSelectedLang(chooseLanguage);\n    props.setCurrentLang(chooseLanguage);\n  };\n\n  const inputEnabler = () => {}; // console.log(props.pageToRender);\n  // props.pageToRender.map((ele) => console.log(ele.question));\n  // let tmp = props.pageToRender;\n\n\n  const saveNewData = (qid, data, whatToSave, lang) => {\n    // console.log(\"from data saving\", qid);\n    console.log(data);\n    console.log(lang);\n\n    if (lang === \"all\") {\n      let tmpLocal = props.fullTest.ru.pages[props.activePage].QnAPairs;\n      tmpLocal[qid][whatToSave] = data;\n      props.saveChanges(tmpLocal, \"ru\");\n      tmpLocal = props.fullTest.en.pages[props.activePage].QnAPairs;\n      tmpLocal[qid][whatToSave] = data;\n      props.saveChanges(tmpLocal, \"en\");\n      tmpLocal = props.fullTest.lv.pages[props.activePage].QnAPairs;\n      tmpLocal[qid][whatToSave] = data;\n      props.saveChanges(tmpLocal, \"lv\");\n    } else {\n      console.log(props.fullTest[lang].pages[props.activePage].QnAPairs);\n      let tmpLocal = props.fullTest[lang].pages[props.activePage].QnAPairs;\n      console.log(tmpLocal);\n      tmpLocal[qid][whatToSave] = data; // console.log(tmp[qid][whatToSave]);\n      // console.log(\"from save new data\", tmp);\n\n      props.saveChanges(tmpLocal, lang);\n    }\n  };\n\n  const handleQuestionKeyPress = event => {\n    event.key === \"Enter\" ? console.log(\"Efnter\") : undefined;\n  };\n\n  const qaTextEntryHeaderStyle = {\n    color: \"whitesmoke\",\n    fontSize: \"24px\",\n    margin: \"0\"\n  };\n  const qaTextEntryPContainer = {\n    display: \"flex\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n    width: \"7.5%\",\n    height: \"3rem\",\n    border: \"1px solid rgba(0,0,0,0)\",\n    borderRadius: \"31px\",\n    backgroundColor: \"rgb(214\t180\t156\t)\"\n  };\n  const qaTextEntryContainer = {\n    width: \"90%\",\n    height: \"35%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\"\n  };\n  const qaTextEntryCharCounter = {\n    color: \"rgb(47 71 88)\",\n    fontSize: \"25px\",\n    margin: \"0\",\n    width: \"5%\"\n  };\n\n  function q_a_TextEntry(type, id) {\n    // console.log(\"id\", id);\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      style: qaTextEntryContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      style: qaTextEntryPContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      style: qaTextEntryHeaderStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, \"RUS\")), __jsx(\"textarea\", {\n      // * RU\n      autoFocus: true,\n      className: compStyles.textInputForQandA,\n      name: \"qaTextEntry\",\n      id: String(id),\n      value: props.fullTest.ru.pages[props.activePage].QnAPairs[id][type] // value={props.pageToRender[id][type]}\n      ,\n      maxLength: textEntryCountLimit,\n      onChange: e => saveNewData(id, e.currentTarget.value, type, \"ru\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }), __jsx(\"p\", {\n      style: qaTextEntryCharCounter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }, props.fullTest.ru.pages[props.activePage].QnAPairs[id][type].length, \"/\", textEntryCountLimit)), __jsx(\"div\", {\n      style: qaTextEntryContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      style: qaTextEntryPContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      style: qaTextEntryHeaderStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }, \"ENG\")), __jsx(\"textarea\", {\n      // * EN\n      className: compStyles.textInputForQandA,\n      name: \"qaTextEntry\",\n      id: String(id),\n      value: props.fullTest.en.pages[props.activePage].QnAPairs[id][type],\n      maxLength: textEntryCountLimit,\n      onChange: e => saveNewData(id, e.currentTarget.value, type, \"en\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }\n    }), __jsx(\"p\", {\n      style: qaTextEntryCharCounter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }, props.fullTest.en.pages[props.activePage].QnAPairs[id][type].length, \"/\", textEntryCountLimit)), __jsx(\"div\", {\n      style: qaTextEntryContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      style: qaTextEntryPContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      style: qaTextEntryHeaderStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }, \"LAT\")), __jsx(\"textarea\", {\n      // * LV\n      className: compStyles.textInputForQandA,\n      name: \"qaTextEntry\",\n      value: props.fullTest.lv.pages[props.activePage].QnAPairs[id][type],\n      maxLength: textEntryCountLimit,\n      onChange: e => saveNewData(id, e.currentTarget.value, type, \"lv\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }\n    }), __jsx(\"p\", {\n      style: qaTextEntryCharCounter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }\n    }, props.fullTest.lv.pages[props.activePage].QnAPairs[id][type].length, \"/\", textEntryCountLimit)));\n  } // const handleQuestionChange = (\n  //   event: React.ChangeEvent<HTMLTextAreaElement>\n  // ) => {\n  //   // console.log(`${event.currentTarget.id}:`, event.currentTarget.value);\n  //   saveNewData(\n  //     Number(event.currentTarget.id),\n  //     event.currentTarget.value,\n  //     \"question\"\n  //   );\n  // };\n  // const handleModalOpening = (\n  //   event: React.MouseEvent<HTMLSpanElement, MouseEvent>\n  // ) => {\n  //   if (event.currentTarget.classList.contains(compStyles.question)) {\n  //     let tmpModalsArray = Array.from(\n  //       document.getElementsByClassName(addCompStyles.ModalContainerBG)\n  //     );\n  //     tmpModalsArray.forEach((modal) => {\n  //       if (modal.id !== event.currentTarget.id) {\n  //         modal.classList.add(compStyles.HideModal);\n  //       } else {\n  //         modal.classList.remove(compStyles.HideModal);\n  //       }\n  //     });\n  //     // console.log(tmpModalsArray);\n  //     setisQOpen(true);\n  //   }\n  // };\n\n\n  function testTypeToQaCard(tt, cardType) {\n    let content;\n\n    if (cardType === \"question\") {\n      tt === \"TT\" || tt === \"TP\" ? content = \"text\" : content = \"img\";\n      return content;\n    } else if (cardType === \"answer\") {\n      tt === \"TT\" || tt === \"PT\" ? content = \"text\" : content = \"img\";\n      return content;\n    }\n\n    return \"text\";\n  }\n\n  const pageBody = () => props.pageToRender.map((qna, qnaIterator) => __jsx(\"div\", {\n    key: qnaIterator,\n    id: String(qnaIterator),\n    className: compStyles.qnaPair,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }\n  }, __jsx(QACard, {\n    setCurrentCard: props.setCurrentCard,\n    cardType: \"question\" // cardContents={props.testType === \"PP\" ? \"img\" : \"text\"}\n    ,\n    cardContents: testTypeToQaCard(props.testType, \"question\"),\n    iterator: qnaIterator,\n    setSelectedLanguage: setSelectedLanguage,\n    inputEnabler: inputEnabler,\n    qna: qna,\n    testType: props.testType,\n    q_a_TextEntry: q_a_TextEntry,\n    togglePhotoManager: props.togglePhotoManager,\n    currentLang: props.currentLanguage || \"ru\",\n    pageContents: props.pageToRender[qnaIterator][\"question\"],\n    pageNumber: props.activePage,\n    saveIMG: saveNewData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }\n  }), __jsx(QACard, {\n    setCurrentCard: props.setCurrentCard,\n    cardType: \"answer\" // cardContents={props.testType === \"TT\" ? \"text\" : \"img\"}\n    ,\n    cardContents: testTypeToQaCard(props.testType, \"answer\"),\n    iterator: qnaIterator,\n    setSelectedLanguage: setSelectedLanguage,\n    inputEnabler: inputEnabler,\n    qna: qna,\n    testType: props.testType,\n    q_a_TextEntry: q_a_TextEntry,\n    togglePhotoManager: props.togglePhotoManager,\n    currentLang: props.currentLanguage,\n    pageContents: props.pageToRender[qnaIterator][\"answer\"],\n    pageNumber: props.activePage,\n    saveIMG: saveNewData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }\n  })));\n\n  return __jsx(\"div\", {\n    className: styles.TestPreview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 5\n    }\n  }, __jsx(\"p\", {\n    className: styles.TPHeader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }\n  }, \"\\u0421\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0430 \", props.activePage + 1), __jsx(\"div\", {\n    className: `${compStyles.TestBGContainer}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }\n  }, __jsx(FMLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: compStyles.pageBody,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }\n  }, props.testType === \"\" ? __jsx(\"div\", {\n    className: compStyles.tTypeWarning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }\n  }) : pageBody())));\n};\n\nexport default TestPreview;","map":{"version":3,"sources":["/Users/yberfox/Documents/personal-projects/modes-muzejs-client/components/TestPreview.tsx"],"names":["React","useState","styles","FMLogo","compStyles","QACard","textEntryCountLimit","TestPreview","props","isQOpen","setisQOpen","isAOpen","setisAOpen","selectedLang","setSelectedLang","setSelectedLanguage","chooseLanguage","setCurrentLang","inputEnabler","saveNewData","qid","data","whatToSave","lang","console","log","tmpLocal","fullTest","ru","pages","activePage","QnAPairs","saveChanges","en","lv","handleQuestionKeyPress","event","key","undefined","qaTextEntryHeaderStyle","color","fontSize","margin","qaTextEntryPContainer","display","justifyContent","alignItems","width","height","border","borderRadius","backgroundColor","qaTextEntryContainer","flexDirection","qaTextEntryCharCounter","q_a_TextEntry","type","id","textInputForQandA","String","e","currentTarget","value","length","testTypeToQaCard","tt","cardType","content","pageBody","pageToRender","map","qna","qnaIterator","qnaPair","setCurrentCard","testType","togglePhotoManager","currentLanguage","TPHeader","TestBGContainer","tTypeWarning"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { IQnA, ITest, TLangOption, TTestTypes } from \"../@types/test\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\nimport QACard from \"./QACard\";\nimport { textEntryCountLimit } from \"./constants\";\n// import { URLCheckForLocalhost } from \"./constants\";\n\nconst TestPreview = (props: {\n  activePage: number;\n  currentLanguage: TLangOption[\"value\"] | undefined;\n  // currentTestState: ITest;\n  pageToRender: IQnA[];\n  setCurrentLang: (lang: TLangOption[\"value\"]) => void;\n  testType: ITest[\"type\"];\n  saveChanges: (page: any, lang?: TLangOption[\"value\"]) => void;\n  togglePhotoManager: (toggle: boolean, cardID: string) => void;\n  setCurrentCard: React.Dispatch<React.SetStateAction<undefined>>;\n  fullTest: ITest;\n}) => {\n  const [isQOpen, setisQOpen] = useState(false);\n  const [isAOpen, setisAOpen] = useState(false);\n  const [selectedLang, setSelectedLang] = useState<TLangOption[\"value\"]>(\"ru\");\n  const setSelectedLanguage = (chooseLanguage: TLangOption[\"value\"]): void => {\n    setSelectedLang(chooseLanguage);\n    props.setCurrentLang(chooseLanguage);\n  };\n  const inputEnabler = () => {};\n\n  // console.log(props.pageToRender);\n  // props.pageToRender.map((ele) => console.log(ele.question));\n\n  // let tmp = props.pageToRender;\n\n  const saveNewData = (\n    qid: number,\n    data: string,\n    whatToSave: \"answer\" | \"question\",\n    lang: \"ru\" | \"lv\" | \"en\" | \"all\" | undefined\n  ) => {\n    // console.log(\"from data saving\", qid);\n    console.log(data);\n    console.log(lang);\n    if (lang === \"all\") {\n      let tmpLocal = props.fullTest.ru.pages[props.activePage].QnAPairs;\n      tmpLocal[qid][whatToSave] = data;\n      props.saveChanges(tmpLocal, \"ru\");\n      tmpLocal = props.fullTest.en.pages[props.activePage].QnAPairs;\n      tmpLocal[qid][whatToSave] = data;\n      props.saveChanges(tmpLocal, \"en\");\n      tmpLocal = props.fullTest.lv.pages[props.activePage].QnAPairs;\n      tmpLocal[qid][whatToSave] = data;\n      props.saveChanges(tmpLocal, \"lv\");\n    } else {\n      console.log(props.fullTest[lang!].pages[props.activePage].QnAPairs);\n      let tmpLocal = props.fullTest[lang!].pages[props.activePage].QnAPairs;\n      console.log(tmpLocal);\n      tmpLocal[qid][whatToSave] = data;\n      // console.log(tmp[qid][whatToSave]);\n      // console.log(\"from save new data\", tmp);\n      props.saveChanges(tmpLocal, lang);\n    }\n  };\n\n  const handleQuestionKeyPress = (\n    event: React.KeyboardEvent<HTMLTextAreaElement>\n  ) => {\n    event.key === \"Enter\" ? console.log(\"Efnter\") : undefined;\n  };\n\n  const qaTextEntryHeaderStyle: React.CSSProperties = {\n    color: \"whitesmoke\",\n    fontSize: \"24px\",\n    margin: \"0\",\n  };\n\n  const qaTextEntryPContainer: React.CSSProperties = {\n    display: \"flex\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n    width: \"7.5%\",\n    height: \"3rem\",\n    border: \"1px solid rgba(0,0,0,0)\",\n    borderRadius: \"31px\",\n    backgroundColor: \"rgb(214\t180\t156\t)\",\n  };\n\n  const qaTextEntryContainer: React.CSSProperties = {\n    width: \"90%\",\n    height: \"35%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\",\n  };\n\n  const qaTextEntryCharCounter: React.CSSProperties = {\n    color: \"rgb(47 71 88)\",\n    fontSize: \"25px\",\n    margin: \"0\",\n    width: \"5%\",\n  };\n\n  function q_a_TextEntry(type: \"answer\" | \"question\", id: number) {\n    // console.log(\"id\", id);\n    return (\n      <>\n        <div style={qaTextEntryContainer}>\n          <div style={qaTextEntryPContainer}>\n            <p style={qaTextEntryHeaderStyle}>RUS</p>\n          </div>\n          <textarea\n            // * RU\n            autoFocus\n            className={compStyles.textInputForQandA}\n            name=\"qaTextEntry\"\n            id={String(id)}\n            value={props.fullTest.ru.pages[props.activePage].QnAPairs[id][type]}\n            // value={props.pageToRender[id][type]}\n            maxLength={textEntryCountLimit}\n            onChange={(e) => saveNewData(id, e.currentTarget.value, type, \"ru\")}\n          />\n          <p style={qaTextEntryCharCounter}>\n            {\n              props.fullTest.ru.pages[props.activePage].QnAPairs[id][type]\n                .length\n            }\n            /{textEntryCountLimit}\n          </p>\n        </div>\n        <div style={qaTextEntryContainer}>\n          <div style={qaTextEntryPContainer}>\n            <p style={qaTextEntryHeaderStyle}>ENG</p>\n          </div>\n          <textarea\n            // * EN\n            className={compStyles.textInputForQandA}\n            name=\"qaTextEntry\"\n            id={String(id)}\n            value={props.fullTest.en.pages[props.activePage].QnAPairs[id][type]}\n            maxLength={textEntryCountLimit}\n            onChange={(e) => saveNewData(id, e.currentTarget.value, type, \"en\")}\n          />\n          <p style={qaTextEntryCharCounter}>\n            {\n              props.fullTest.en.pages[props.activePage].QnAPairs[id][type]\n                .length\n            }\n            /{textEntryCountLimit}\n          </p>\n        </div>\n        <div style={qaTextEntryContainer}>\n          <div style={qaTextEntryPContainer}>\n            <p style={qaTextEntryHeaderStyle}>LAT</p>\n          </div>\n          <textarea\n            // * LV\n            className={compStyles.textInputForQandA}\n            name=\"qaTextEntry\"\n            value={props.fullTest.lv.pages[props.activePage].QnAPairs[id][type]}\n            maxLength={textEntryCountLimit}\n            onChange={(e) => saveNewData(id, e.currentTarget.value, type, \"lv\")}\n          />\n          <p style={qaTextEntryCharCounter}>\n            {\n              props.fullTest.lv.pages[props.activePage].QnAPairs[id][type]\n                .length\n            }\n            /{textEntryCountLimit}\n          </p>\n        </div>\n        {/* <p className={compStyles.textInputQnACounter}>\n          Character count: {props.pageToRender[id][type].length} /{\" \"}\n          {textEntryCountLimit}\n        </p> */}\n      </>\n    );\n  }\n\n  // const handleQuestionChange = (\n  //   event: React.ChangeEvent<HTMLTextAreaElement>\n  // ) => {\n  //   // console.log(`${event.currentTarget.id}:`, event.currentTarget.value);\n  //   saveNewData(\n  //     Number(event.currentTarget.id),\n  //     event.currentTarget.value,\n  //     \"question\"\n  //   );\n  // };\n\n  // const handleModalOpening = (\n  //   event: React.MouseEvent<HTMLSpanElement, MouseEvent>\n  // ) => {\n  //   if (event.currentTarget.classList.contains(compStyles.question)) {\n  //     let tmpModalsArray = Array.from(\n  //       document.getElementsByClassName(addCompStyles.ModalContainerBG)\n  //     );\n  //     tmpModalsArray.forEach((modal) => {\n  //       if (modal.id !== event.currentTarget.id) {\n  //         modal.classList.add(compStyles.HideModal);\n  //       } else {\n  //         modal.classList.remove(compStyles.HideModal);\n  //       }\n  //     });\n  //     // console.log(tmpModalsArray);\n  //     setisQOpen(true);\n  //   }\n  // };\n\n  function testTypeToQaCard(tt: TTestTypes, cardType: \"question\" | \"answer\") {\n    let content: \"text\" | \"img\";\n    if (cardType === \"question\") {\n      tt === (\"TT\" as String) || tt === (\"TP\" as String)\n        ? (content = \"text\")\n        : (content = \"img\");\n      return content;\n    } else if (cardType === \"answer\") {\n      tt === (\"TT\" as String) || tt === (\"PT\" as String)\n        ? (content = \"text\")\n        : (content = \"img\");\n      return content;\n    }\n    return \"text\";\n  }\n\n  const pageBody = () =>\n    props.pageToRender.map((qna: IQnA, qnaIterator: number) => (\n      <div\n        key={qnaIterator}\n        id={String(qnaIterator)}\n        className={compStyles.qnaPair}\n      >\n        <QACard\n          setCurrentCard={props.setCurrentCard}\n          cardType=\"question\"\n          // cardContents={props.testType === \"PP\" ? \"img\" : \"text\"}\n          cardContents={testTypeToQaCard(props.testType, \"question\")}\n          iterator={qnaIterator}\n          setSelectedLanguage={setSelectedLanguage}\n          inputEnabler={inputEnabler}\n          qna={qna}\n          testType={props.testType}\n          q_a_TextEntry={q_a_TextEntry}\n          togglePhotoManager={props.togglePhotoManager}\n          currentLang={props.currentLanguage || \"ru\"}\n          pageContents={props.pageToRender[qnaIterator][\"question\"]}\n          pageNumber={props.activePage}\n          saveIMG={saveNewData}\n        />\n        {/* For answer rendering */}\n        <QACard\n          setCurrentCard={props.setCurrentCard}\n          cardType=\"answer\"\n          // cardContents={props.testType === \"TT\" ? \"text\" : \"img\"}\n          cardContents={testTypeToQaCard(props.testType, \"answer\")}\n          iterator={qnaIterator}\n          setSelectedLanguage={setSelectedLanguage}\n          inputEnabler={inputEnabler}\n          qna={qna}\n          testType={props.testType}\n          q_a_TextEntry={q_a_TextEntry}\n          togglePhotoManager={props.togglePhotoManager}\n          currentLang={props.currentLanguage!}\n          pageContents={props.pageToRender[qnaIterator][\"answer\"]}\n          pageNumber={props.activePage}\n          saveIMG={saveNewData}\n        />\n      </div>\n    ));\n\n  return (\n    <div className={styles.TestPreview}>\n      <p className={styles.TPHeader}>Страница {props.activePage + 1}</p>\n\n      <div className={`${compStyles.TestBGContainer}`}>\n        <FMLogo />\n        <div className={compStyles.pageBody}>\n          {props.testType === \"\" ? (\n            <div className={compStyles.tTypeWarning}>\n              {/* <h1>Выберите тип теста</h1> */}\n            </div>\n          ) : (\n            pageBody()\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TestPreview;\n"]},"metadata":{},"sourceType":"module"}