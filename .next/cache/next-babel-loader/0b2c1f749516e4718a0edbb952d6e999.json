{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestNamer.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport compStyles from \"./styles/TestNamer.module.scss\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport { useEffect } from \"react\";\n\nvar TestNamer = function TestNamer(currentLang) {\n  _s();\n\n  var _useState = useState(false),\n      isOpen = _useState[0],\n      setIsOpen = _useState[1];\n\n  var _useState2 = useState(),\n      selectedLang = _useState2[0],\n      setSelectedLang = _useState2[1];\n\n  var testLang = [\"ru\", \"lv\", \"en\"];\n  var langButtons = [];\n  useEffect(function () {\n    langButtons = testLang.map(function (lang) {\n      return document.getElementById(lang);\n    });\n    console.log(langButtons);\n  });\n\n  var handleLangBtnClick = function handleLangBtnClick(btn) {\n    console.log(btn.currentTarget.id);\n    langButtons.forEach(function (button) {\n      if ((button === null || button === void 0 ? void 0 : button.id) == btn.currentTarget.id) {\n        var _button$classList;\n\n        button === null || button === void 0 ? void 0 : (_button$classList = button.classList) === null || _button$classList === void 0 ? void 0 : _button$classList.add(compStyles.ButtonPressed);\n      } else {\n        var _button$classList2;\n\n        button === null || button === void 0 ? void 0 : (_button$classList2 = button.classList) === null || _button$classList2 === void 0 ? void 0 : _button$classList2.remove(compStyles.ButtonPressed);\n      }\n    });\n    setSelectedLang(btn.currentTarget.id);\n  };\n\n  var handleArrowClick = function handleArrowClick(btn) {};\n\n  var handleNameEntry = function handleNameEntry(event) {\n    event.preventDefault();\n    console.log(event.currentTarget.nodeValue);\n  };\n\n  return __jsx(\"div\", {\n    className: styles.TestNaming,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, isOpen ? __jsx(\"div\", {\n    className: compStyles.ModalContainerBG,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: compStyles.ModalContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, __jsx(\"button\", {\n    className: compStyles.CloseBTN,\n    onClick: function onClick() {\n      return setIsOpen(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, \"\\uD835\\uDDB7\"), __jsx(\"div\", {\n    className: compStyles.Modal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: compStyles.LangSelect,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 15\n    }\n  }, __jsx(\"button\", {\n    onClick: handleLangBtnClick,\n    id: \"ru\",\n    className: compStyles.LangButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, \"RUS\"), __jsx(\"button\", {\n    onClick: handleLangBtnClick,\n    id: \"lv\",\n    className: compStyles.LangButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, \"LAT\"), __jsx(\"button\", {\n    onClick: handleLangBtnClick,\n    id: \"en\",\n    className: compStyles.LangButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, \"ENG\")), __jsx(\"form\", {\n    onSubmit: handleNameEntry,\n    className: compStyles.NameForm,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"TestName\",\n    className: compStyles.TNameInput,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }), __jsx(\"input\", {\n    className: compStyles.NextLang,\n    type: \"submit\",\n    value: \"->\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }))))) : __jsx(\"div\", {\n    className: compStyles.ModalOpener,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, \"Test name\"), __jsx(\"button\", {\n    onClick: function onClick() {\n      return setIsOpen(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, \"+\")));\n};\n\n_s(TestNamer, \"V6LCU8JgvSUD747nUE83cHiwwVY=\");\n\n_c = TestNamer;\nexport default TestNamer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestNamer\");","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestNamer.tsx"],"names":["React","useState","compStyles","styles","useEffect","TestNamer","currentLang","isOpen","setIsOpen","selectedLang","setSelectedLang","testLang","langButtons","map","lang","document","getElementById","console","log","handleLangBtnClick","btn","currentTarget","id","forEach","button","classList","add","ButtonPressed","remove","handleArrowClick","handleNameEntry","event","preventDefault","nodeValue","TestNaming","ModalContainerBG","ModalContainer","CloseBTN","Modal","LangSelect","LangButton","NameForm","TNameInput","NextLang","ModalOpener"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport compStyles from \"./styles/TestNamer.module.scss\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport { TLangOption } from \"../@types/test\";\nimport { useEffect } from \"react\";\n\nconst TestNamer = (currentLang: any) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [selectedLang, setSelectedLang] = useState<TLangOption[\"value\"]>();\n\n  const testLang: TLangOption[\"value\"][] = [\"ru\", \"lv\", \"en\"];\n\n  let langButtons: Array<HTMLElement | null> = [];\n  useEffect(() => {\n    langButtons = testLang.map((lang: string) => document.getElementById(lang));\n    console.log(langButtons);\n  });\n\n  const handleLangBtnClick = (\n    btn: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ): void => {\n    console.log(btn.currentTarget.id);\n    langButtons.forEach((button) => {\n      if (button?.id == btn.currentTarget.id) {\n        button?.classList?.add(compStyles.ButtonPressed);\n      } else {\n        button?.classList?.remove(compStyles.ButtonPressed);\n      }\n    });\n    setSelectedLang(btn.currentTarget.id);\n  };\n\n  const handleArrowClick = (btn): void => {};\n\n  const handleNameEntry = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n    console.log(event.currentTarget.nodeValue);\n  };\n  return (\n    <div className={styles.TestNaming}>\n      {isOpen ? (\n        <div className={compStyles.ModalContainerBG}>\n          <div className={compStyles.ModalContainer}>\n            <button\n              className={compStyles.CloseBTN}\n              onClick={() => setIsOpen(false)}\n            >\n              𝖷\n            </button>\n\n            <div className={compStyles.Modal}>\n              <div className={compStyles.LangSelect}>\n                <button\n                  onClick={handleLangBtnClick}\n                  id=\"ru\"\n                  className={compStyles.LangButton}\n                >\n                  RUS\n                </button>\n                <button\n                  onClick={handleLangBtnClick}\n                  id=\"lv\"\n                  className={compStyles.LangButton}\n                >\n                  LAT\n                </button>\n                <button\n                  onClick={handleLangBtnClick}\n                  id=\"en\"\n                  className={compStyles.LangButton}\n                >\n                  ENG\n                </button>\n              </div>\n              <form onSubmit={handleNameEntry} className={compStyles.NameForm}>\n                <input\n                  type=\"text\"\n                  placeholder=\"TestName\"\n                  className={compStyles.TNameInput}\n                />\n                <input\n                  className={compStyles.NextLang}\n                  type=\"submit\"\n                  value=\"->\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className={compStyles.ModalOpener}>\n          <span>Test name</span>\n          <button onClick={() => setIsOpen(true)}>+</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TestNamer;\n"]},"metadata":{},"sourceType":"module"}