{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar _excluded = [\"onClick\"],\n    _excluded2 = [\"onClick\"];\nvar __jsx = React.createElement;\nimport { motion } from \"framer-motion\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Carousel from \"react-multi-carousel\";\nimport { responsive } from \"./constants\";\nimport FMLogo from \"./FMlogo\"; // import \"react-multi-carousel/lib/styles.css\";\n\nimport compStyle from \"./styles/PagesController.module.scss\";\n\nvar PagesController = function PagesController(props) {\n  var _useState = useState(_toConsumableArray(Array(props.currentPages).keys())),\n      pagesAmount = _useState[0],\n      setPagesAmount = _useState[1];\n\n  useEffect(function () {\n    setPagesAmount(_toConsumableArray(Array(props.currentPages).keys())); // if (didMountRef.current) {\n    //   console.log(\"component mounted\");\n    // } else {\n    //   console.log(\"componenet updated\");\n    // }\n  }, [props.currentPages]); //* Effect for setting the border to the first page when there are no other pages.\n\n  useEffect(function () {\n    if (document.getElementsByClassName(compStyle.Page).length <= 1) {\n      var _document$getElementB;\n\n      (_document$getElementB = document.getElementById(\"0\")) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.classList.add(compStyle.Selected);\n    }\n  });\n  var didMountRef = useRef();\n\n  var CustomRightArrow = function CustomRightArrow(_ref) {\n    var _onClick = _ref.onClick,\n        rest = _objectWithoutProperties(_ref, _excluded);\n\n    // const {\n    //   onMove,\n    //   carouselState: { currentSlide, deviceType },\n    // } = rest;\n    // onMove means if dragging or swiping in progress.\n    return __jsx(\"button\", {\n      className: compStyle.carRightArrow,\n      onClick: function onClick() {\n        return _onClick();\n      }\n    }, Arrow());\n  };\n\n  var CustomLeftArrow = function CustomLeftArrow(_ref2) {\n    var _onClick2 = _ref2.onClick,\n        rest = _objectWithoutProperties(_ref2, _excluded2);\n\n    // const {\n    //   onMove,\n    //   carouselState: { currentSlide, deviceType },\n    // } = rest;\n    return __jsx(\"button\", {\n      onClick: function onClick() {\n        return _onClick2();\n      },\n      className: compStyle.carLeftArrow\n    }, Arrow());\n  };\n\n  var handlePageClick = function handlePageClick(e, indexOfActivePage) {\n    console.log(\"clicked on a page\", e.currentTarget.id);\n    var pagesArray = getAllPages();\n    setActivePage(pagesArray, indexOfActivePage, props);\n  };\n\n  return __jsx(\"div\", {\n    className: compStyle.Wrapper\n  }, __jsx(\"div\", {\n    className: compStyle.BGContainer\n  }, __jsx(Carousel, {\n    containerClass: compStyle.Carousel,\n    itemClass: compStyle.Item,\n    responsive: responsive // customRightArrow={<CustomRightArrow />}\n    // customLeftArrow={<CustomLeftArrow />}\n    ,\n    dotListClass: compStyle.CarouselDots,\n    showDots: true // ssr\n\n  }, pagesAmount.map(function (page) {\n    return __jsx(\"div\", {\n      key: page,\n      id: String(page),\n      onClick: function onClick(e) {\n        return handlePageClick(e, page);\n      },\n      className: \"\".concat(compStyle.Page)\n    }, __jsx(motion.div, {\n      variants: {\n        hidden: {\n          opacity: 1\n        }\n      },\n      animate: \"hidden\"\n    }, __jsx(FMLogo, null), __jsx(\"span\", null, page + 1)));\n  }))));\n};\n\nexport var Arrow = function Arrow(width, height) {\n  return __jsx(\"svg\", {\n    width: \"\".concat(width || \"15\"),\n    height: \"\".concat(height || \"21\"),\n    viewBox: \"0 0 15 26\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, __jsx(\"path\", {\n    d: \"M2 24L13 13L2 2\",\n    stroke: \"#2F4858\",\n    strokeWidth: \"3\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }));\n};\nexport default PagesController;\n\nfunction getAllPages() {\n  return Array.from(document.getElementsByClassName(compStyle.Page));\n}\n\nfunction setActivePage(pagesArray, indexOfActivePage, props) {\n  // console.log(\"setting the green border\");\n  pagesArray.forEach(function (page, index) {\n    index === indexOfActivePage ? page.classList.add(compStyle.Selected) : page.classList.remove(compStyle.Selected);\n  });\n  props.setActivePage(indexOfActivePage);\n}","map":null,"metadata":{},"sourceType":"module"}