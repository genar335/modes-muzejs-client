{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { motion } from \"framer-motion\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Carousel from \"react-multi-carousel\";\nimport { responsive } from \"./constants\";\nimport FMLogo from \"./FMlogo\"; // import \"react-multi-carousel/lib/styles.css\";\n\nimport compStyle from \"./styles/PagesController.module.scss\";\n\nconst PagesController = props => {\n  const {\n    0: pagesAmount,\n    1: setPagesAmount\n  } = useState([...Array(props.currentPages).keys()]);\n  useEffect(() => {\n    setPagesAmount([...Array(props.currentPages).keys()]); // if (didMountRef.current) {\n    //   console.log(\"component mounted\");\n    // } else {\n    //   console.log(\"componenet updated\");\n    // }\n  }, [props.currentPages]); //* Effect for setting the border to the first page when there are no other pages.\n\n  useEffect(() => {\n    if (document.getElementsByClassName(compStyle.Page).length <= 1) {\n      var _document$getElementB;\n\n      (_document$getElementB = document.getElementById(\"0\")) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.classList.add(compStyle.Selected);\n    }\n  });\n  const didMountRef = useRef();\n\n  const CustomRightArrow = _ref => {\n    let {\n      onClick\n    } = _ref,\n        rest = _objectWithoutProperties(_ref, [\"onClick\"]);\n\n    // const {\n    //   onMove,\n    //   carouselState: { currentSlide, deviceType },\n    // } = rest;\n    // onMove means if dragging or swiping in progress.\n    return __jsx(\"button\", {\n      className: compStyle.carRightArrow,\n      onClick: () => onClick()\n    }, Arrow());\n  };\n\n  const CustomLeftArrow = _ref2 => {\n    let {\n      onClick\n    } = _ref2,\n        rest = _objectWithoutProperties(_ref2, [\"onClick\"]);\n\n    // const {\n    //   onMove,\n    //   carouselState: { currentSlide, deviceType },\n    // } = rest;\n    return __jsx(\"button\", {\n      onClick: () => onClick(),\n      className: compStyle.carLeftArrow\n    }, Arrow());\n  };\n\n  const handlePageClick = (e, indexOfActivePage) => {\n    console.log(\"clicked on a page\", e.currentTarget.id);\n    const pagesArray = getAllPages();\n    setActivePage(pagesArray, indexOfActivePage, props);\n  };\n\n  return __jsx(\"div\", {\n    className: compStyle.Wrapper\n  }, __jsx(\"div\", {\n    className: compStyle.BGContainer\n  }, __jsx(Carousel, {\n    containerClass: compStyle.Carousel,\n    itemClass: compStyle.Item,\n    responsive: responsive // customRightArrow={<CustomRightArrow />}\n    // customLeftArrow={<CustomLeftArrow />}\n    ,\n    dotListClass: compStyle.CarouselDots,\n    showDots: true // ssr\n\n  }, pagesAmount.map(page => {\n    return __jsx(\"div\", {\n      key: page,\n      id: String(page),\n      onClick: e => handlePageClick(e, page),\n      className: `${compStyle.Page}`\n    }, __jsx(motion.div, {\n      variants: {\n        hidden: {\n          opacity: 1\n        }\n      },\n      animate: \"hidden\"\n    }, __jsx(FMLogo, null), __jsx(\"span\", null, page + 1)));\n  }))));\n};\n\nexport const Arrow = (width, height) => __jsx(\"svg\", {\n  width: `${width || \"15\"}`,\n  height: `${height || \"21\"}`,\n  viewBox: \"0 0 15 26\",\n  fill: \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, __jsx(\"path\", {\n  d: \"M2 24L13 13L2 2\",\n  stroke: \"#2F4858\",\n  strokeWidth: \"3\",\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\"\n}));\nexport default PagesController;\n\nfunction getAllPages() {\n  return Array.from(document.getElementsByClassName(compStyle.Page));\n}\n\nfunction setActivePage(pagesArray, indexOfActivePage, props) {\n  // console.log(\"setting the green border\");\n  pagesArray.forEach((page, index) => {\n    index === indexOfActivePage ? page.classList.add(compStyle.Selected) : page.classList.remove(compStyle.Selected);\n  });\n  props.setActivePage(indexOfActivePage);\n}","map":null,"metadata":{},"sourceType":"module"}