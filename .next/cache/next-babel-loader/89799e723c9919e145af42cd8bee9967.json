{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestPreview.tsx\";\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\n\nvar TestPreview = function TestPreview(props) {\n  console.log(props.pageToRender); // function handleTextAreaQuestionChange(\n  //   event: React.ChangeEvent<HTMLTextAreaElement>\n  // ) {\n  //   // let tmpArray =\n  //   //   props.currentTestState[props.currentLanguage!].pages[props.activePage]\n  //   //     .QnAPairs;\n  //   // console.log(\"tmp\", tmpArray);\n  //   // tmpArray.forEach((ele) => console.log(ele));\n  //   const tmpArray = props.currentTestState[props.currentLanguage!].pages;\n  //   // console.log(tmpArray);\n  //   // console.log(tmpArray[props.activePage]);\n  //   // console.log(tmpArray[props.activePage].QnAPairs[event.currentTarget.id]);\n  //   tmpArray[props.activePage].QnAPairs[event.currentTarget.id].question =\n  //     event.currentTarget.value;\n  //   // console.log(tmpArray);\n  //   props.saveChanges({\n  //     ...props.currentTestState,\n  //     [props.currentLanguage!]: {\n  //       ...props.currentTestState[props.currentLanguage!],\n  //       pages: tmpArray,\n  //     },\n  //   });\n  // }\n\n  function textQuestion(iterator, // handleQuestionChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void,\n  qna) {\n    return __jsx(\"textarea\", {\n      id: String(iterator),\n      onChange: handleQuestionChange,\n      className: compStyles.Question,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, qna.question);\n  }\n\n  function imgQuestion(iterator, handleQuestionChange, qna) {\n    return __jsx(\"div\", {\n      id: String(iterator),\n      className: compStyles.Question,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, \"\\uFF0B\"));\n  }\n\n  function imgAnswer(iterator, handleQuestionChange, qna) {\n    return __jsx(\"div\", {\n      id: String(iterator),\n      className: compStyles.Question,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, \"\\uFF0B\"));\n  }\n\n  var handleQuestionChange = function handleQuestionChange(event) {\n    console.log(\"\".concat(event.currentTarget.id, \":\"), event.currentTarget.value);\n  };\n\n  var pageBody = function pageBody() {\n    return props.pageToRender.QnAPairs.map(function (qna, iterator) {\n      return __jsx(\"div\", {\n        key: iterator,\n        id: String(iterator),\n        className: compStyles.qnaPair,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 7\n        }\n      }, props.testType === \"TT\" ? textQuestion() : null, props.testType === \"PP\" || props.testType === \"PT\" ? imgQuestion : null, props.testType === \"TT\" || props.testType === \"PT\" ? textAnswer : null, props.testType === \"PP\" ? imgAnswer : null);\n    });\n  };\n\n  props.testType === \"\" ? console.log(\"no test type\") : console.log(props.testType);\n  return __jsx(\"div\", {\n    className: styles.TestPreview,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, \"Page: \", props.activePage + 1), __jsx(\"div\", {\n    className: \"\".concat(compStyles.TestBGContainer),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, __jsx(FMLogo, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: compStyles.pageBody,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, props.testType === \"\" ? __jsx(\"div\", {\n    className: compStyles.tTypeWarning,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }, \"Please choose a test type\")) : pageBody())));\n};\n\n_c = TestPreview;\nexport default TestPreview;\n\nfunction textAnswer(iterator, qna) {\n  return __jsx(\"textarea\", {\n    id: String(iterator) // onChange={handleAnswerChange}\n    ,\n    className: compStyles.Answer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, qna.answer);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"TestPreview\");","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestPreview.tsx"],"names":["React","styles","FMLogo","compStyles","TestPreview","props","console","log","pageToRender","textQuestion","iterator","qna","String","handleQuestionChange","Question","question","imgQuestion","imgAnswer","event","currentTarget","id","value","pageBody","QnAPairs","map","qnaPair","testType","textAnswer","activePage","TestBGContainer","tTypeWarning","Answer","answer"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport {\n  IQnA,\n  IQnAPairs,\n  ITest,\n  TLangOption,\n  TTestTypes,\n} from \"../@types/test\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\n\nconst TestPreview = (props: {\n  activePage: number;\n  currentLanguage: TLangOption[\"value\"] | undefined;\n  // currentTestState: ITest;\n  pageToRender: any;\n  testType: ITest[\"type\"];\n  saveChanges: (test: ITest) => void;\n}) => {\n  console.log(props.pageToRender);\n\n  // function handleTextAreaQuestionChange(\n  //   event: React.ChangeEvent<HTMLTextAreaElement>\n  // ) {\n  //   // let tmpArray =\n  //   //   props.currentTestState[props.currentLanguage!].pages[props.activePage]\n  //   //     .QnAPairs;\n  //   // console.log(\"tmp\", tmpArray);\n  //   // tmpArray.forEach((ele) => console.log(ele));\n  //   const tmpArray = props.currentTestState[props.currentLanguage!].pages;\n  //   // console.log(tmpArray);\n  //   // console.log(tmpArray[props.activePage]);\n  //   // console.log(tmpArray[props.activePage].QnAPairs[event.currentTarget.id]);\n  //   tmpArray[props.activePage].QnAPairs[event.currentTarget.id].question =\n  //     event.currentTarget.value;\n  //   // console.log(tmpArray);\n  //   props.saveChanges({\n  //     ...props.currentTestState,\n  //     [props.currentLanguage!]: {\n  //       ...props.currentTestState[props.currentLanguage!],\n  //       pages: tmpArray,\n  //     },\n  //   });\n  // }\n  function textQuestion(\n    iterator: number,\n    // handleQuestionChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void,\n    qna: IQnA\n  ) {\n    return (\n      <textarea\n        id={String(iterator)}\n        onChange={handleQuestionChange}\n        className={compStyles.Question}\n      >\n        {qna.question}\n      </textarea>\n    );\n  }\n\n  function imgQuestion(\n    iterator: number,\n    handleQuestionChange: (\n      event: React.ChangeEvent<HTMLTextAreaElement>\n    ) => void,\n    qna: IQnA\n  ) {\n    return (\n      <div id={String(iterator)} className={compStyles.Question}>\n        <span>＋</span>\n      </div>\n    );\n  }\n  function imgAnswer(\n    iterator: number,\n    handleQuestionChange: (\n      event: React.ChangeEvent<HTMLTextAreaElement>\n    ) => void,\n    qna: IQnA\n  ) {\n    return (\n      <div id={String(iterator)} className={compStyles.Question}>\n        <span>＋</span>\n      </div>\n    );\n  }\n\n  const handleQuestionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    console.log(`${event.currentTarget.id}:`, event.currentTarget.value);\n  };\n\n  const pageBody = () =>\n    props.pageToRender.QnAPairs.map((qna: IQnA, iterator: number) => (\n      <div key={iterator} id={String(iterator)} className={compStyles.qnaPair}>\n        {/* For question rendering */}\n        {props.testType === \"TT\" ? textQuestion() : null}\n        {props.testType === \"PP\" || props.testType === \"PT\"\n          ? imgQuestion\n          : null}\n        {/* For answer rendering */}\n        {props.testType === \"TT\" || props.testType === \"PT\" ? textAnswer : null}\n        {props.testType === \"PP\" ? imgAnswer : null}\n      </div>\n    ));\n\n  props.testType === \"\"\n    ? console.log(\"no test type\")\n    : console.log(props.testType);\n\n  return (\n    <div className={styles.TestPreview}>\n      <h3>Page: {props.activePage + 1}</h3>\n\n      <div className={`${compStyles.TestBGContainer}`}>\n        <FMLogo />\n        <div className={compStyles.pageBody}>\n          {props.testType === \"\" ? (\n            <div className={compStyles.tTypeWarning}>\n              <h1>Please choose a test type</h1>\n            </div>\n          ) : (\n            pageBody()\n          )}\n          {/* {pageBody()} */}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TestPreview;\nfunction textAnswer(iterator: number, qna: IQnA) {\n  return (\n    <textarea\n      id={String(iterator)}\n      // onChange={handleAnswerChange}\n      className={compStyles.Answer}\n    >\n      {qna.answer}\n    </textarea>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}