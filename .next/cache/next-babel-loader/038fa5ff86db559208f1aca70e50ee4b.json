{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestNamer.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport compStyles from \"./styles/TestNamer.module.scss\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport { useEffect } from \"react\";\n\nvar TestNamer = function TestNamer(currentLang) {\n  _s();\n\n  var _useState = useState(false),\n      isOpen = _useState[0],\n      setIsOpen = _useState[1];\n\n  var _useState2 = useState(true),\n      isNameEntryEnabled = _useState2[0],\n      setIsNameEntryEnabled = _useState2[1];\n\n  var _useState3 = useState(),\n      selectedLang = _useState3[0],\n      setSelectedLang = _useState3[1];\n\n  var _useState4 = useState({\n    ru: \"\",\n    en: \"\",\n    lv: \"\"\n  }),\n      currentNames = _useState4[0],\n      setCurrentNames = _useState4[1];\n\n  var testLang = [\"ru\", \"lv\", \"en\"];\n  var langButtons = [];\n  useEffect(function () {\n    langButtons = testLang.map(function (lang) {\n      return document.getElementById(lang);\n    });\n    console.log(langButtons);\n  }, [langButtons]);\n  useEffect(function () {\n    console.log(currentNames);\n  }, [currentNames]);\n\n  var handleLangBtnClick = function handleLangBtnClick(btn) {\n    setIsNameEntryEnabled(false);\n    console.log(btn.currentTarget.id);\n    langButtons.forEach(function (button) {\n      if ((button === null || button === void 0 ? void 0 : button.id) == btn.currentTarget.id) {\n        var _button$classList;\n\n        button === null || button === void 0 ? void 0 : (_button$classList = button.classList) === null || _button$classList === void 0 ? void 0 : _button$classList.add(compStyles.ButtonPressed);\n      } else {\n        var _button$classList2;\n\n        button === null || button === void 0 ? void 0 : (_button$classList2 = button.classList) === null || _button$classList2 === void 0 ? void 0 : _button$classList2.remove(compStyles.ButtonPressed);\n      }\n    });\n    setSelectedLang(btn.currentTarget.id);\n  };\n\n  var handleArrowClick = function handleArrowClick(btn) {\n    console.log(btn);\n  };\n\n  var handleNameChange = function handleNameChange(nameInput) {\n    setCurrentNames(_objectSpread(_objectSpread({}, currentNames), {}, _defineProperty({}, selectedLang, nameInput)));\n  };\n\n  var handleNameEntry = function handleNameEntry(event) {\n    event.preventDefault();\n    console.log(currentNames);\n  };\n\n  return __jsx(\"div\", {\n    className: styles.TestNaming,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, isOpen ? __jsx(\"div\", {\n    className: compStyles.ModalContainerBG,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: compStyles.ModalContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, __jsx(\"button\", {\n    className: compStyles.CloseBTN,\n    onClick: function onClick() {\n      return setIsOpen(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, \"\\uD835\\uDDB7\"), __jsx(\"div\", {\n    className: compStyles.Modal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: compStyles.LangSelect,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  }, __jsx(\"button\", {\n    onClick: handleLangBtnClick,\n    id: \"ru\",\n    className: compStyles.LangButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, \"RUS\"), __jsx(\"button\", {\n    onClick: handleLangBtnClick,\n    id: \"lv\",\n    className: compStyles.LangButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, \"LAT\"), __jsx(\"button\", {\n    onClick: handleLangBtnClick,\n    id: \"en\",\n    className: compStyles.LangButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, \"ENG\")), __jsx(\"form\", {\n    onSubmit: handleNameEntry,\n    className: compStyles.NameForm,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 15\n    }\n  }, __jsx(\"input\", {\n    disabled: isNameEntryEnabled,\n    onChange: function onChange(e) {\n      return handleNameChange(e.currentTarget.value);\n    },\n    type: \"text\",\n    placeholder: \"TestName\",\n    className: compStyles.TNameInput,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }), __jsx(\"input\", {\n    className: compStyles.NextLang,\n    type: \"submit\",\n    value: \"->\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }))))) : __jsx(\"div\", {\n    className: compStyles.ModalOpener,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, \"Test name\"), __jsx(\"button\", {\n    onClick: function onClick() {\n      return setIsOpen(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, \"+\")));\n};\n\n_s(TestNamer, \"HQy1pKBjqRtBmUoXuq+YzkJz/QY=\");\n\n_c = TestNamer;\nexport default TestNamer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestNamer\");","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestNamer.tsx"],"names":["React","useState","compStyles","styles","useEffect","TestNamer","currentLang","isOpen","setIsOpen","isNameEntryEnabled","setIsNameEntryEnabled","selectedLang","setSelectedLang","ru","en","lv","currentNames","setCurrentNames","testLang","langButtons","map","lang","document","getElementById","console","log","handleLangBtnClick","btn","currentTarget","id","forEach","button","classList","add","ButtonPressed","remove","handleArrowClick","handleNameChange","nameInput","handleNameEntry","event","preventDefault","TestNaming","ModalContainerBG","ModalContainer","CloseBTN","Modal","LangSelect","LangButton","NameForm","e","value","TNameInput","NextLang","ModalOpener"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport compStyles from \"./styles/TestNamer.module.scss\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport { TLangOption } from \"../@types/test\";\nimport { useEffect } from \"react\";\nimport { stringify } from \"querystring\";\n\nconst TestNamer = (currentLang: any) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isNameEntryEnabled, setIsNameEntryEnabled] = useState<boolean>(true);\n  const [selectedLang, setSelectedLang] = useState<TLangOption[\"value\"]>();\n\n  interface INameInfo extends Object {\n    ru: string;\n    en: string;\n    lv: string;\n  }\n\n  const [currentNames, setCurrentNames] = useState<INameInfo>({\n    ru: \"\",\n    en: \"\",\n    lv: \"\",\n  });\n\n  const testLang: TLangOption[\"value\"][] = [\"ru\", \"lv\", \"en\"];\n\n  let langButtons: Array<HTMLElement | null> = [];\n  useEffect(() => {\n    langButtons = testLang.map((lang: string) => document.getElementById(lang));\n    console.log(langButtons);\n  }, [langButtons]);\n\n  useEffect(() => {\n    console.log(currentNames);\n  }, [currentNames]);\n\n  const handleLangBtnClick = (\n    btn: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ): void => {\n    setIsNameEntryEnabled(false);\n    console.log(btn.currentTarget.id);\n    langButtons.forEach((button) => {\n      if (button?.id == btn.currentTarget.id) {\n        button?.classList?.add(compStyles.ButtonPressed);\n      } else {\n        button?.classList?.remove(compStyles.ButtonPressed);\n      }\n    });\n    setSelectedLang(btn.currentTarget.id);\n  };\n\n  const handleArrowClick = (btn): void => {\n    console.log(btn);\n  };\n  const handleNameChange = (nameInput: string): void => {\n    setCurrentNames({\n      ...currentNames,\n      [selectedLang as string]: nameInput,\n    });\n  };\n\n  const handleNameEntry = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n    console.log(currentNames);\n  };\n  return (\n    <div className={styles.TestNaming}>\n      {isOpen ? (\n        <div className={compStyles.ModalContainerBG}>\n          <div className={compStyles.ModalContainer}>\n            <button\n              className={compStyles.CloseBTN}\n              onClick={() => setIsOpen(false)}\n            >\n              𝖷\n            </button>\n\n            <div className={compStyles.Modal}>\n              <div className={compStyles.LangSelect}>\n                <button\n                  onClick={handleLangBtnClick}\n                  id=\"ru\"\n                  className={compStyles.LangButton}\n                >\n                  RUS\n                </button>\n                <button\n                  onClick={handleLangBtnClick}\n                  id=\"lv\"\n                  className={compStyles.LangButton}\n                >\n                  LAT\n                </button>\n                <button\n                  onClick={handleLangBtnClick}\n                  id=\"en\"\n                  className={compStyles.LangButton}\n                >\n                  ENG\n                </button>\n              </div>\n              <form onSubmit={handleNameEntry} className={compStyles.NameForm}>\n                <input\n                  disabled={isNameEntryEnabled}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    handleNameChange(e.currentTarget.value)\n                  }\n                  type=\"text\"\n                  placeholder=\"TestName\"\n                  className={compStyles.TNameInput}\n                />\n                <input\n                  className={compStyles.NextLang}\n                  type=\"submit\"\n                  value=\"->\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className={compStyles.ModalOpener}>\n          <span>Test name</span>\n          <button onClick={() => setIsOpen(true)}>+</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TestNamer;\n"]},"metadata":{},"sourceType":"module"}