{"ast":null,"code":"var _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestNamer.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport compStyles from \"./styles/TestNamer.module.scss\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport { useEffect } from \"react\";\n\nconst TestNamer = currentLang => {\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n  const {\n    0: isNameEntryEnabled,\n    1: setIsNameEntryEnabled\n  } = useState(true);\n  const {\n    0: selectedLang,\n    1: setSelectedLang\n  } = useState();\n  const {\n    0: isSubmitBtnStateDone,\n    1: setIsSubmitBtnStateDone\n  } = useState(false);\n  const {\n    0: currentNames,\n    1: setCurrentNames\n  } = useState({\n    ru: \"\",\n    en: \"\",\n    lv: \"\"\n  });\n  const testLang = [\"ru\", \"lv\", \"en\"];\n  let langButtons = [];\n  useEffect(() => {\n    langButtons = testLang.map(lang => document.getElementById(lang));\n  }, [langButtons]);\n  useEffect(() => {\n    for (const keys in Object(currentNames)) {\n      if (Object(currentNames)[keys] === \"\") {\n        console.log(\"empty\");\n        setIsSubmitBtnStateDone(false);\n        return;\n      }\n\n      setIsSubmitBtnStateDone(true);\n    }\n  }, [currentNames]);\n\n  const handleLangBtnClick = btn => {\n    setIsNameEntryEnabled(false);\n    console.log(btn.currentTarget.id);\n    langButtons.forEach(button => {\n      if ((button === null || button === void 0 ? void 0 : button.id) == btn.currentTarget.id) {\n        var _button$classList;\n\n        button === null || button === void 0 ? void 0 : (_button$classList = button.classList) === null || _button$classList === void 0 ? void 0 : _button$classList.add(compStyles.ButtonPressed);\n      } else {\n        var _button$classList2;\n\n        button === null || button === void 0 ? void 0 : (_button$classList2 = button.classList) === null || _button$classList2 === void 0 ? void 0 : _button$classList2.remove(compStyles.ButtonPressed);\n      }\n    });\n    setSelectedLang(btn.currentTarget.id);\n  };\n\n  const handleArrowClick = btn => {\n    console.log(btn);\n  };\n\n  const handleNameChange = nameInput => {\n    setCurrentNames(_objectSpread(_objectSpread({}, currentNames), {}, {\n      [selectedLang]: nameInput\n    }));\n  };\n\n  const handleNameEntry = event => {\n    event.preventDefault();\n    console.log(currentNames);\n  };\n\n  return __jsx(\"div\", {\n    className: styles.TestNaming,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, isOpen ? __jsx(\"div\", {\n    className: compStyles.ModalContainerBG,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: compStyles.ModalContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, __jsx(\"button\", {\n    className: compStyles.CloseBTN,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, __jsx(\"svg\", {\n    onClick: () => setIsOpen(false),\n    width: \"56\",\n    height: \"56\",\n    viewBox: \"0 0 56 56\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, __jsx(\"circle\", {\n    cx: \"28\",\n    cy: \"28\",\n    r: \"28\",\n    fill: \"#2F4858\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }), __jsx(\"path\", {\n    d: \"M38.5626 36.4501L30.1126 28L38.5628 19.5498C39.1458 18.9669 39.1458 18.0203 38.5626 17.4372C37.9797 16.8543 37.0332 16.8543 36.4502 17.4372L28 25.8874L19.5498 17.4372C18.9668 16.8543 18.0203 16.8543 17.4374 17.4372C16.8542 18.0203 16.8542 18.9669 17.4372 19.5498L25.8874 28L17.4374 36.4501C16.8542 37.0332 16.8542 37.9797 17.4372 38.5627C18.0203 39.1458 18.9668 39.1458 19.55 38.5627L28 30.1126L36.45 38.5627C37.0332 39.1458 37.9797 39.1458 38.5628 38.5627C39.1458 37.9797 39.1458 37.0332 38.5626 36.4501Z\",\n    fill: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }))), __jsx(\"div\", {\n    className: compStyles.Modal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: compStyles.LangSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }, __jsx(\"button\", {\n    onClick: handleLangBtnClick,\n    id: \"ru\",\n    className: compStyles.LangButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, \"RUS\"), __jsx(\"button\", {\n    onClick: handleLangBtnClick,\n    id: \"lv\",\n    className: compStyles.LangButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, \"LAT\"), __jsx(\"button\", {\n    onClick: handleLangBtnClick,\n    id: \"en\",\n    className: compStyles.LangButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, \"ENG\")), __jsx(\"form\", {\n    onSubmit: handleNameEntry,\n    className: compStyles.NameForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, __jsx(\"input\", {\n    disabled: isNameEntryEnabled,\n    onChange: e => handleNameChange(e.currentTarget.value),\n    type: \"text\",\n    placeholder: \"TestName\",\n    className: compStyles.TNameInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }), __jsx(\"input\", {\n    className: compStyles.NextLang,\n    type: \"submit\",\n    value: isSubmitBtnStateDone ? \"✔️\" : \"→\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }))))) : __jsx(\"div\", {\n    className: compStyles.ModalOpener,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, \"Test name\"), __jsx(\"button\", {\n    onClick: () => setIsOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, \"+\")));\n};\n\nexport default TestNamer;","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestNamer.tsx"],"names":["React","useState","compStyles","styles","useEffect","TestNamer","currentLang","isOpen","setIsOpen","isNameEntryEnabled","setIsNameEntryEnabled","selectedLang","setSelectedLang","isSubmitBtnStateDone","setIsSubmitBtnStateDone","currentNames","setCurrentNames","ru","en","lv","testLang","langButtons","map","lang","document","getElementById","keys","Object","console","log","handleLangBtnClick","btn","currentTarget","id","forEach","button","classList","add","ButtonPressed","remove","handleArrowClick","handleNameChange","nameInput","handleNameEntry","event","preventDefault","TestNaming","ModalContainerBG","ModalContainer","CloseBTN","Modal","LangSelect","LangButton","NameForm","e","value","TNameInput","NextLang","ModalOpener"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport compStyles from \"./styles/TestNamer.module.scss\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport { TLangOption } from \"../@types/test\";\nimport { useEffect } from \"react\";\nimport { stringify } from \"querystring\";\n\nconst TestNamer = (currentLang: any) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isNameEntryEnabled, setIsNameEntryEnabled] = useState<boolean>(true);\n  const [selectedLang, setSelectedLang] = useState<TLangOption[\"value\"]>();\n  const [isSubmitBtnStateDone, setIsSubmitBtnStateDone] = useState<boolean>(\n    false\n  );\n\n  interface INameInfo {\n    ru: string;\n    en: string;\n    lv: string;\n  }\n\n  const [currentNames, setCurrentNames] = useState<Object>({\n    ru: \"\",\n    en: \"\",\n    lv: \"\",\n  });\n\n  const testLang: TLangOption[\"value\"][] = [\"ru\", \"lv\", \"en\"];\n\n  let langButtons: Array<HTMLElement | null> = [];\n  useEffect(() => {\n    langButtons = testLang.map((lang: string) => document.getElementById(lang));\n  }, [langButtons]);\n\n  useEffect(() => {\n    for (const keys in Object(currentNames)) {\n      if (Object(currentNames)[keys] === \"\") {\n        console.log(\"empty\");\n        setIsSubmitBtnStateDone(false);\n        return;\n      }\n      setIsSubmitBtnStateDone(true);\n    }\n  }, [currentNames]);\n\n  const handleLangBtnClick = (\n    btn: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ): void => {\n    setIsNameEntryEnabled(false);\n    console.log(btn.currentTarget.id);\n    langButtons.forEach((button) => {\n      if (button?.id == btn.currentTarget.id) {\n        button?.classList?.add(compStyles.ButtonPressed);\n      } else {\n        button?.classList?.remove(compStyles.ButtonPressed);\n      }\n    });\n    setSelectedLang(btn.currentTarget.id);\n  };\n\n  const handleArrowClick = (btn): void => {\n    console.log(btn);\n  };\n  const handleNameChange = (nameInput: string): void => {\n    setCurrentNames({\n      ...currentNames,\n      [selectedLang as string]: nameInput,\n    });\n  };\n\n  const handleNameEntry = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n    console.log(currentNames);\n  };\n  return (\n    <div className={styles.TestNaming}>\n      {isOpen ? (\n        <div className={compStyles.ModalContainerBG}>\n          <div className={compStyles.ModalContainer}>\n            <button className={compStyles.CloseBTN}>\n              <svg\n                onClick={() => setIsOpen(false)}\n                width=\"56\"\n                height=\"56\"\n                viewBox=\"0 0 56 56\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <circle cx=\"28\" cy=\"28\" r=\"28\" fill=\"#2F4858\" />\n                <path\n                  d=\"M38.5626 36.4501L30.1126 28L38.5628 19.5498C39.1458 18.9669 39.1458 18.0203 38.5626 17.4372C37.9797 16.8543 37.0332 16.8543 36.4502 17.4372L28 25.8874L19.5498 17.4372C18.9668 16.8543 18.0203 16.8543 17.4374 17.4372C16.8542 18.0203 16.8542 18.9669 17.4372 19.5498L25.8874 28L17.4374 36.4501C16.8542 37.0332 16.8542 37.9797 17.4372 38.5627C18.0203 39.1458 18.9668 39.1458 19.55 38.5627L28 30.1126L36.45 38.5627C37.0332 39.1458 37.9797 39.1458 38.5628 38.5627C39.1458 37.9797 39.1458 37.0332 38.5626 36.4501Z\"\n                  fill=\"white\"\n                />\n              </svg>\n            </button>\n\n            <div className={compStyles.Modal}>\n              <div className={compStyles.LangSelect}>\n                <button\n                  onClick={handleLangBtnClick}\n                  id=\"ru\"\n                  className={compStyles.LangButton}\n                >\n                  RUS\n                </button>\n                <button\n                  onClick={handleLangBtnClick}\n                  id=\"lv\"\n                  className={compStyles.LangButton}\n                >\n                  LAT\n                </button>\n                <button\n                  onClick={handleLangBtnClick}\n                  id=\"en\"\n                  className={compStyles.LangButton}\n                >\n                  ENG\n                </button>\n              </div>\n              <form onSubmit={handleNameEntry} className={compStyles.NameForm}>\n                <input\n                  disabled={isNameEntryEnabled}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    handleNameChange(e.currentTarget.value)\n                  }\n                  type=\"text\"\n                  placeholder=\"TestName\"\n                  className={compStyles.TNameInput}\n                />\n                <input\n                  className={compStyles.NextLang}\n                  type=\"submit\"\n                  value={isSubmitBtnStateDone ? \"✔️\" : \"→\"}\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className={compStyles.ModalOpener}>\n          <span>Test name</span>\n          <button onClick={() => setIsOpen(true)}>+</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TestNamer;\n"]},"metadata":{},"sourceType":"module"}