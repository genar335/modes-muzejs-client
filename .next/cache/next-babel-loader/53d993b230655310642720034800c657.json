{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/pages/TMS/create_test.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport Select from \"react-select\";\nimport PhotoManager from \"../../components/PhotoManager\";\nimport TestPreview from \"../../components/TestPreview\";\nimport styles from \"../styles/create_test.module.scss\";\n\nvar create_test = function create_test() {\n  _s();\n\n  var _useState = useState({\n    type: \"TT\",\n    pages: 1,\n    en: {\n      name: \"\",\n      pages: []\n    },\n    lv: {\n      name: \"\",\n      pages: []\n    },\n    ru: {\n      name: \"\",\n      pages: []\n    }\n  }),\n      test = _useState[0],\n      setTest = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      currentLang = _useState2[0],\n      setCurrentLang = _useState2[1];\n\n  var handleLangChange = function handleLangChange(chosenLang) {\n    setCurrentLang(chosenLang);\n  };\n\n  var handleClick = function handleClick() {\n    setTest({\n      ru: {\n        name: \"imya\",\n        pages: test.ru.pages\n      },\n      lv: test.lv,\n      en: test.en,\n      pages: test.pages,\n      type: \"TT\"\n    });\n  };\n\n  var languageOptions = [{\n    value: \"ru\",\n    label: \"RU\"\n  }, {\n    value: \"en\",\n    label: \"EN\"\n  }, {\n    value: \"lv\",\n    label: \"LV\"\n  }];\n  var typeOptions = [{\n    value: \"TT\",\n    label: \"Text – Text\"\n  }, {\n    value: \"TP\",\n    label: \"Text – Photo\"\n  }, {\n    value: \"PP\",\n    label: \"Photo – Photo\"\n  }];\n\n  var handleTypeChange = function handleTypeChange(chosenType) {\n    return setTestType(chosenType);\n  };\n\n  return __jsx(\"div\", {\n    className: styles.CreateTestContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styles.TestType,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, __jsx(Select, {\n    options: typeOptions,\n    className: styles.TestTypeSelect,\n    onChange: function onChange(selected) {\n      return handleTypeChange;\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: styles.PageController,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: handleClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Add page\"), __jsx(\"input\", {\n    type: \"number\",\n    name: \"pageCount\",\n    id: \"\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  })), __jsx(PhotoManager, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: styles.TestNaming,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    name: \"TestName\",\n    placeholder: \"Test name\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }), __jsx(Select // TODO: Need to figure out types for the @selected parameter\n  , {\n    onChange: function onChange(selected) {\n      return handleLangChange(selected.value || '');\n    },\n    options: languageOptions,\n    className: styles.lgSelect,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  })), __jsx(TestPreview, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(create_test, \"MyMXywRrg7qVNcWPEB5SSY7eQnk=\");\n\nexport default create_test;","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/pages/TMS/create_test.tsx"],"names":["React","useState","Select","PhotoManager","TestPreview","styles","create_test","type","pages","en","name","lv","ru","test","setTest","currentLang","setCurrentLang","handleLangChange","chosenLang","handleClick","languageOptions","value","label","typeOptions","handleTypeChange","chosenType","setTestType","CreateTestContainer","TestType","TestTypeSelect","selected","PageController","TestNaming","lgSelect"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Select, { OptionsType } from \"react-select\";\nimport PhotoManager from \"../../components/PhotoManager\";\nimport TestPreview from \"../../components/TestPreview\";\nimport styles from \"../styles/create_test.module.scss\";\n\nconst create_test = () => {\n  const [test, setTest] = useState<ITest>({\n    type: \"TT\",\n    pages: 1,\n    en: {\n      name: \"\",\n      pages: [],\n    },\n    lv: {\n      name: \"\",\n      pages: [],\n    },\n    ru: {\n      name: \"\",\n      pages: [],\n    },\n  });\n  const [currentLang, setCurrentLang] = useState<string>(\"\");\n  const handleLangChange = (chosenLang: string) => {\n    setCurrentLang(chosenLang);\n  };\n\n  const handleClick = () => {\n    setTest({\n      ru: {\n        name: \"imya\",\n        pages: test.ru.pages,\n      },\n      lv: test.lv,\n      en: test.en,\n      pages: test.pages,\n      type: \"TT\",\n    });\n  };\n\n  type TLangOption = {\n    value: \"ru\" | \"en\" | \"lv\";\n    label: \"RU\" | \"EN\" | \"LV\";\n  };\n  const languageOptions: Array<TLangOption> = [\n    { value: \"ru\", label: \"RU\" },\n    { value: \"en\", label: \"EN\" },\n    { value: \"lv\", label: \"LV\" },\n  ];\n\n  type TTypeOptions = {\n    value: \"TT\" | \"TP\" | \"PP\";\n    label: \"Text – Text\" | \"Text – Photo\" | \"Photo – Photo\";\n  };\n  const typeOptions: Array<TTypeOptions> = [\n    { value: \"TT\", label: \"Text – Text\" },\n    { value: \"TP\", label: \"Text – Photo\" },\n    { value: \"PP\", label: \"Photo – Photo\" },\n  ];\n  const handleTypeChange = (chosenType: TTestTypes): void => \n    setTestType(chosenType)\n\n  return (\n    <div className={styles.CreateTestContainer}>\n      <div className={styles.TestType}>\n        <Select options={typeOptions} className={styles.TestTypeSelect} \n          onChange={(selected: any): void => handleTypeChange}\n        />\n      </div>\n      <div className={styles.PageController}>\n        <button onClick={handleClick}>Add page</button>\n        <input type=\"number\" name=\"pageCount\" id=\"\" />\n      </div>\n      <PhotoManager />\n      <div className={styles.TestNaming}>\n        <input type=\"text\" name=\"TestName\" placeholder=\"Test name\" />\n        <Select\n        // TODO: Need to figure out types for the @selected parameter\n          onChange={(selected: any): void => handleLangChange(selected.value || '')}\n          options={languageOptions}\n          className={styles.lgSelect}\n        />\n      </div>\n      <TestPreview />\n    </div>\n  );\n};\n\nexport default create_test;\n"]},"metadata":{},"sourceType":"module"}