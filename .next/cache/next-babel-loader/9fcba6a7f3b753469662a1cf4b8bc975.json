{"ast":null,"code":"var _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestPreview.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\nimport addCompStyles from \"./styles/TestNamer.module.scss\";\nimport QACard from \"./QACard\";\n\nconst TestPreview = props => {\n  const {\n    0: isQOpen,\n    1: setisQOpen\n  } = useState(false);\n  const {\n    0: isAOpen,\n    1: setisAOpen\n  } = useState(false);\n  const {\n    0: selectedLang,\n    1: setSelectedLang\n  } = useState(\"ru\");\n\n  const setSelectedLanguage = chooseLanguage => {\n    setSelectedLang(chooseLanguage);\n    props.setCurrentLang(chooseLanguage);\n  };\n\n  const inputEnabler = () => {}; // console.log(props.pageToRender);\n  // props.pageToRender.map((ele) => console.log(ele.question));\n\n\n  let tmp = props.pageToRender;\n\n  const saveNewData = (qid, data, whatToSave) => {\n    // console.log(\"from data saving\", qid);\n    tmp[qid][whatToSave] = data; // console.log(tmp[qid][whatToSave]);\n    // console.log(\"from save new data\", tmp);\n\n    props.saveChanges(tmp);\n  };\n\n  const handleQuestionKeyPress = event => {\n    event.key === \"Enter\" ? console.log(\"Efnter\") : undefined;\n  };\n\n  function q_a_TextEntry(type, id) {\n    // console.log(\"id\", id);\n    return __jsx(\"textarea\", {\n      autoFocus: true,\n      className: compStyles.textInputForQandA // type=\"text\"\n      ,\n      name: \"qaTextEntry\",\n      id: String(id),\n      value: props.pageToRender[id][type],\n      onChange: e => saveNewData(id, e.currentTarget.value, type),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    });\n  }\n\n  const handleQuestionChange = event => {\n    // console.log(`${event.currentTarget.id}:`, event.currentTarget.value);\n    saveNewData(Number(event.currentTarget.id), event.currentTarget.value, \"question\");\n  };\n\n  const handleModalOpening = event => {\n    if (event.currentTarget.classList.contains(compStyles.question)) {\n      let tmpModalsArray = Array.from(document.getElementsByClassName(addCompStyles.ModalContainerBG));\n      tmpModalsArray.forEach(modal => {\n        if (modal.id !== event.currentTarget.id) {\n          modal.classList.add(compStyles.HideModal);\n        } else {\n          modal.classList.remove(compStyles.HideModal);\n        }\n      }); // console.log(tmpModalsArray);\n\n      setisQOpen(true);\n    }\n  };\n\n  const pageBody = () => props.pageToRender.map((qna, iterator) => __jsx(\"div\", {\n    key: iterator,\n    id: String(iterator),\n    className: compStyles.qnaPair,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, __jsx(QACard, {\n    setCurrentCard: props.setCurrentCard,\n    cardType: \"question\",\n    cardContents: props.testType === \"PP\" ? \"img\" : \"text\",\n    iterator: iterator,\n    setSelectedLanguage: setSelectedLanguage,\n    inputEnabler: inputEnabler,\n    qna: qna,\n    testType: props.testType,\n    q_a_TextEntry: q_a_TextEntry,\n    togglePhotoManager: props.togglePhotoManager,\n    currentLang: props.currentLanguage,\n    pageContents: props.pageToRender[iterator][\"question\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }), __jsx(QACard, {\n    setCurrentCard: props.setCurrentCard,\n    cardType: \"answer\",\n    cardContents: props.testType === \"TT\" ? \"text\" : \"img\",\n    iterator: iterator,\n    setSelectedLanguage: setSelectedLanguage,\n    inputEnabler: inputEnabler,\n    qna: qna,\n    testType: props.testType,\n    q_a_TextEntry: q_a_TextEntry,\n    togglePhotoManager: props.togglePhotoManager,\n    currentLang: props.currentLanguage,\n    pageContents: props.pageToRender[iterator][\"answer\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  })));\n\n  return __jsx(\"div\", {\n    className: styles.TestPreview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, \"Page: \", props.activePage + 1), __jsx(\"div\", {\n    className: `${compStyles.TestBGContainer}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, __jsx(FMLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: compStyles.pageBody,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, props.testType === \"\" ? __jsx(\"div\", {\n    className: compStyles.tTypeWarning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 15\n    }\n  }, \"Please choose a test type\")) : pageBody())));\n};\n\nexport default TestPreview;","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestPreview.tsx"],"names":["React","useState","styles","FMLogo","compStyles","addCompStyles","QACard","TestPreview","props","isQOpen","setisQOpen","isAOpen","setisAOpen","selectedLang","setSelectedLang","setSelectedLanguage","chooseLanguage","setCurrentLang","inputEnabler","tmp","pageToRender","saveNewData","qid","data","whatToSave","saveChanges","handleQuestionKeyPress","event","key","console","log","undefined","q_a_TextEntry","type","id","textInputForQandA","String","e","currentTarget","value","handleQuestionChange","Number","handleModalOpening","classList","contains","question","tmpModalsArray","Array","from","document","getElementsByClassName","ModalContainerBG","forEach","modal","add","HideModal","remove","pageBody","map","qna","iterator","qnaPair","setCurrentCard","testType","togglePhotoManager","currentLanguage","activePage","TestBGContainer","tTypeWarning"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  ILangSpecificBody,\n  IQnA,\n  IQnAPairs,\n  ITest,\n  TLangOption,\n  TTestTypes,\n} from \"../@types/test\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\nimport addCompStyles from \"./styles/TestNamer.module.scss\";\nimport { closeBtn, CreateLangSwitchers } from \"./TestNamer\";\nimport QACard from \"./QACard\";\n\nconst TestPreview = (props: {\n  activePage: number;\n  currentLanguage: TLangOption[\"value\"] | undefined;\n  // currentTestState: ITest;\n  pageToRender: IQnA[];\n  setCurrentLang: (lang: TLangOption[\"value\"]) => void;\n  testType: ITest[\"type\"];\n  saveChanges: (page: any) => void;\n  togglePhotoManager: (toggle: boolean) => void;\n  setCurrentCard: React.Dispatch<React.SetStateAction<undefined>>;\n}) => {\n  const [isQOpen, setisQOpen] = useState(false);\n  const [isAOpen, setisAOpen] = useState(false);\n  const [selectedLang, setSelectedLang] = useState<TLangOption[\"value\"]>(\"ru\");\n  const setSelectedLanguage = (chooseLanguage: TLangOption[\"value\"]): void => {\n    setSelectedLang(chooseLanguage);\n    props.setCurrentLang(chooseLanguage);\n  };\n  const inputEnabler = () => {};\n\n  // console.log(props.pageToRender);\n  // props.pageToRender.map((ele) => console.log(ele.question));\n\n  let tmp = props.pageToRender;\n\n  const saveNewData = (\n    qid: number,\n    data: string,\n    whatToSave: \"answer\" | \"question\"\n  ) => {\n    // console.log(\"from data saving\", qid);\n    tmp[qid][whatToSave] = data;\n    // console.log(tmp[qid][whatToSave]);\n    // console.log(\"from save new data\", tmp);\n    props.saveChanges(tmp);\n  };\n\n  const handleQuestionKeyPress = (\n    event: React.KeyboardEvent<HTMLTextAreaElement>\n  ) => {\n    event.key === \"Enter\" ? console.log(\"Efnter\") : undefined;\n  };\n\n  function q_a_TextEntry(type: \"answer\" | \"question\", id: number) {\n    // console.log(\"id\", id);\n    return (\n      <textarea\n        autoFocus\n        className={compStyles.textInputForQandA}\n        // type=\"text\"\n        name=\"qaTextEntry\"\n        id={String(id)}\n        value={props.pageToRender[id][type]}\n        onChange={(e) => saveNewData(id, e.currentTarget.value, type)}\n      />\n    );\n  }\n\n  const handleQuestionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    // console.log(`${event.currentTarget.id}:`, event.currentTarget.value);\n    saveNewData(\n      Number(event.currentTarget.id),\n      event.currentTarget.value,\n      \"question\"\n    );\n  };\n\n  const handleModalOpening = (\n    event: React.MouseEvent<HTMLSpanElement, MouseEvent>\n  ) => {\n    if (event.currentTarget.classList.contains(compStyles.question)) {\n      let tmpModalsArray = Array.from(\n        document.getElementsByClassName(addCompStyles.ModalContainerBG)\n      );\n      tmpModalsArray.forEach((modal) => {\n        if (modal.id !== event.currentTarget.id) {\n          modal.classList.add(compStyles.HideModal);\n        } else {\n          modal.classList.remove(compStyles.HideModal);\n        }\n      });\n      // console.log(tmpModalsArray);\n      setisQOpen(true);\n    }\n  };\n\n  const pageBody = () =>\n    props.pageToRender.map((qna: IQnA, iterator: number) => (\n      <div key={iterator} id={String(iterator)} className={compStyles.qnaPair}>\n        <QACard\n          setCurrentCard={props.setCurrentCard}\n          cardType=\"question\"\n          cardContents={props.testType === \"PP\" ? \"img\" : \"text\"}\n          iterator={iterator}\n          setSelectedLanguage={setSelectedLanguage}\n          inputEnabler={inputEnabler}\n          qna={qna}\n          testType={props.testType}\n          q_a_TextEntry={q_a_TextEntry}\n          togglePhotoManager={props.togglePhotoManager}\n          currentLang={props.currentLanguage}\n          pageContents={props.pageToRender[iterator][\"question\"]}\n        />\n        {/* For answer rendering */}\n        <QACard\n          setCurrentCard={props.setCurrentCard}\n          cardType=\"answer\"\n          cardContents={props.testType === \"TT\" ? \"text\" : \"img\"}\n          iterator={iterator}\n          setSelectedLanguage={setSelectedLanguage}\n          inputEnabler={inputEnabler}\n          qna={qna}\n          testType={props.testType}\n          q_a_TextEntry={q_a_TextEntry}\n          togglePhotoManager={props.togglePhotoManager}\n          currentLang={props.currentLanguage}\n          pageContents={props.pageToRender[iterator][\"answer\"]}\n        />\n      </div>\n    ));\n\n  return (\n    <div className={styles.TestPreview}>\n      <h3>Page: {props.activePage + 1}</h3>\n\n      <div className={`${compStyles.TestBGContainer}`}>\n        <FMLogo />\n        <div className={compStyles.pageBody}>\n          {props.testType === \"\" ? (\n            <div className={compStyles.tTypeWarning}>\n              <h1>Please choose a test type</h1>\n            </div>\n          ) : (\n            pageBody()\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TestPreview;\n"]},"metadata":{},"sourceType":"module"}