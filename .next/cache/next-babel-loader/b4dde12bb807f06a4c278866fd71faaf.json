{"ast":null,"code":"var _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/pages/TMS/create_test.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Select from \"react-select\";\nimport FMLogo from \"../../components/FMlogo\";\nimport PagesController from \"../../components/PagesController\";\nimport PhotoManager from \"../../components/PhotoManager\";\nimport TestNamer from \"../../components/TestNamer\";\nimport TestPreview from \"../../components/TestPreview\";\nimport styles from \"../styles/create_test.module.scss\";\nimport Switch from \"react-switch\";\nimport Axios from \"axios\";\n\nfunction create_test() {\n  // useEffect(() => {\n  //   console.log(\"pages have changed\");\n  //   socket.emit(\"Pages update\", String(test.pages));\n  //   if (test.pages >= 2) {\n  //   }\n  // }, [test.pages]);\n  // useEffect(() => {\n  //   socket.emit(\"Test changed\", test);\n  // }, [test]);\n  // useEffect(() => {\n  //   const socket = io(APIURL, {\n  //     reconnectionDelayMax: 10000,\n  //     query: \"123\",\n  //   });\n  // });\n  // const [currentPages, setCurrentPages] = useState<number>(1);\n  // let tmpPages: number = 0;\n  const {\n    0: currentCard,\n    1: setCurrentCard\n  } = useState();\n\n  const saveCurrentCard = card => setCurrentCard(card);\n\n  const qnaEmptyArray = () => {\n    return {\n      question: \"\",\n      answer: \"\"\n    };\n  };\n\n  const qnaEmptyNArray = pairs => {\n    let tmpArray = [];\n\n    for (let i = 0; i < pairs; i++) {\n      tmpArray.push(qnaEmptyArray());\n    }\n\n    return tmpArray;\n  };\n\n  const currentNumberOfPairsForQnAPairs = 3;\n  const {\n    0: activePage,\n    1: setActivePage\n  } = useState(0);\n\n  const activateAPage = index => setActivePage(index);\n\n  const {\n    0: pagesRendered,\n    1: setPagesRendered\n  } = useState();\n  const testTemplateWithThreeCards = {\n    pages: 1,\n    en: {\n      name: \"\",\n      pages: [{\n        QnAPairs: qnaEmptyNArray(currentNumberOfPairsForQnAPairs)\n      }]\n    },\n    lv: {\n      name: \"\",\n      pages: [{\n        QnAPairs: qnaEmptyNArray(currentNumberOfPairsForQnAPairs)\n      }]\n    },\n    ru: {\n      name: \"\",\n      pages: [{\n        QnAPairs: qnaEmptyNArray(currentNumberOfPairsForQnAPairs)\n      }]\n    },\n    type: \"\"\n  };\n  const {\n    0: test,\n    1: setTest\n  } = useState(testTemplateWithThreeCards);\n  const {\n    0: isPhotoManagerOpen,\n    1: setIsPhotoManagerOpen\n  } = useState(true);\n\n  const openPhotos = toggle => setIsPhotoManagerOpen(toggle);\n\n  const saveTest = test => setTest(test);\n\n  const {\n    0: currentLang,\n    1: setCurrentLang\n  } = useState(\"ru\");\n\n  const activateCurrentLang = lang => setCurrentLang(lang);\n  /*   const handleClick = () => {\n    setTest({\n      ru: {\n        name: \"imya\",\n        pages: test.ru.pages,\n      },\n      lv: test.lv,\n      en: test.en,\n      pages: test.pages,\n      type: \"TP\",\n    });\n  }; */\n\n\n  const typeOptions = [{\n    value: \"TT\",\n    label: \"Text – Text\"\n  }, {\n    value: \"TP\",\n    label: \"Text – Photo\"\n  }, {\n    value: \"PP\",\n    label: \"Photo – Photo\"\n  }];\n  const {\n    0: testType,\n    1: setTestType\n  } = useState();\n\n  const handleTypeChange = chosenType => {\n    setTestType(chosenType);\n    setTest(_objectSpread(_objectSpread({}, test), {}, {\n      type: chosenType\n    }));\n  };\n\n  function savePage(page) {\n    console.log(page);\n    let tmp = test[currentLang].pages;\n    tmp[activePage].QnAPairs = page;\n    console.log(tmp);\n    setTest(_objectSpread(_objectSpread({}, test), {}, {\n      [currentLang]: _objectSpread(_objectSpread({}, test[currentLang]), {}, {\n        pages: tmp\n      })\n    }));\n  }\n\n  const handleNumberInputChange = event => {\n    console.log(event.currentTarget.value);\n\n    if (Number(event.currentTarget.value) >= 2 && event.currentTarget.value != undefined && Number(event.currentTarget.value) < 50) {\n      if (Number(event.currentTarget.value) > test.pages) {\n        console.log(\"test\");\n        let tmpArray = [];\n\n        for (let i = 0; i < Number(event.currentTarget.value) - test.pages; i++) {\n          tmpArray.push({\n            QnAPairs: qnaEmptyNArray(currentNumberOfPairsForQnAPairs)\n          });\n        }\n\n        console.log(...tmpArray);\n        setTest(_objectSpread(_objectSpread({}, test), {}, {\n          en: _objectSpread(_objectSpread({}, test.en), {}, {\n            pages: [...test.en.pages, ...tmpArray]\n          }),\n          ru: _objectSpread(_objectSpread({}, test.ru), {}, {\n            pages: [...test.ru.pages, ...tmpArray]\n          }),\n          lv: _objectSpread(_objectSpread({}, test.lv), {}, {\n            pages: [...test.lv.pages, ...tmpArray]\n          }),\n          pages: Number(event.currentTarget.value)\n        }));\n      } else {\n        setTest(_objectSpread(_objectSpread({}, test), {}, {\n          en: _objectSpread(_objectSpread({}, test.en), {}, {\n            pages: test.en.pages.slice(0, test.pages - (test.pages - Number(event.currentTarget.value)))\n          }),\n          ru: _objectSpread(_objectSpread({}, test.ru), {}, {\n            pages: test.ru.pages.slice(0, test.pages - (test.pages - Number(event.currentTarget.value)))\n          }),\n          lv: _objectSpread(_objectSpread({}, test.lv), {}, {\n            pages: test.lv.pages.slice(0, test.pages - (test.pages - Number(event.currentTarget.value)))\n          }),\n          pages: Number(event.currentTarget.value)\n        }));\n      } // event.currentTarget.value = String(test.pages);\n\n    }\n\n    console.log(test);\n  };\n\n  const removePage = event => {\n    if (test.pages !== 1) {\n      setTest(_objectSpread(_objectSpread({}, test), {}, {\n        en: _objectSpread(_objectSpread({}, test.en), {}, {\n          pages: test.en.pages.slice(0, test.pages - 1)\n        }),\n        ru: _objectSpread(_objectSpread({}, test.ru), {}, {\n          pages: test.ru.pages.slice(0, test.pages - 1)\n        }),\n        lv: _objectSpread(_objectSpread({}, test.lv), {}, {\n          pages: test.lv.pages.slice(0, test.pages - 1)\n        }),\n        pages: test.pages - 1\n      }));\n    }\n  };\n\n  const addPage = event => {\n    if (test.pages < 50) {\n      setTest(_objectSpread(_objectSpread({}, test), {}, {\n        en: _objectSpread(_objectSpread({}, test.en), {}, {\n          pages: [...test.en.pages, {\n            QnAPairs: qnaEmptyNArray(currentNumberOfPairsForQnAPairs)\n          }]\n        }),\n        ru: _objectSpread(_objectSpread({}, test.ru), {}, {\n          pages: [...test.ru.pages, {\n            QnAPairs: qnaEmptyNArray(currentNumberOfPairsForQnAPairs)\n          }]\n        }),\n        lv: _objectSpread(_objectSpread({}, test.lv), {}, {\n          pages: [...test.lv.pages, {\n            QnAPairs: qnaEmptyNArray(currentNumberOfPairsForQnAPairs)\n          }]\n        }),\n        pages: test.pages + 1\n      }));\n    }\n  };\n\n  useEffect(() => {\n    console.log(test.pages);\n\n    if (didMountRef.current) {\n      setPagesRendered(false);\n    } else {\n      setPagesRendered(true);\n    }\n  });\n  const didMountRef = useRef();\n\n  const handleTestSaving = event => {\n    event.preventDefault();\n    Axios.post(\"http://localhost:4000/tests/create\", test).catch(res => alert(res)).then(res => console.log(res));\n  };\n\n  const testLang = [\"ru\", \"lv\", \"en\"];\n\n  const handleLangSwitchChange = (checked, event, id) => {\n    console.log(id);\n    setCurrentLang(id); // testLang.forEach((lang: TLangOption[\"value\"]) => {\n    //   setLangSwitchesState({\n    //     ...langSwitchesStates,\n    //     [lang]: !langSwitchesStates[lang],\n    //   });\n    // });\n\n    const tmp = langSwitchesStates;\n\n    for (const key in tmp) setLangSwitchesState(_objectSpread(_objectSpread({}, langSwitchesStates), {}, {\n      [id]: !langSwitchesStates[id]\n    }));\n  };\n\n  const {\n    0: tmpLangSwitch,\n    1: setTmpLangSwitch\n  } = useState(false);\n  const {\n    0: langSwitchesStates,\n    1: setLangSwitchesState\n  } = useState({\n    ru: false,\n    lv: false,\n    en: false\n  });\n\n  const renderLangSwitcher = languagesToHaveSwitches => languagesToHaveSwitches.map(lang => __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 9\n    }\n  }, lang.toLocaleUpperCase()), __jsx(Switch, {\n    id: lang,\n    onChange: handleLangSwitchChange,\n    checked: langSwitchesStates[lang],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 9\n    }\n  })));\n\n  return __jsx(\"div\", {\n    className: styles.CreateTestContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 5\n    }\n  }, __jsx(FMLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: styles.TestNaming,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }\n  }, __jsx(TestNamer, {\n    currentLang: currentLang,\n    setCurrentLang: activateCurrentLang,\n    saveTest: saveTest,\n    currentStateOfTest: test,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 9\n    }\n  })), renderLangSwitcher(testLang), __jsx(\"div\", {\n    className: styles.TestType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }\n  }, __jsx(Select, {\n    options: typeOptions,\n    className: styles.TestTypeSelect,\n    onChange: selected => {\n      setTest(_objectSpread(_objectSpread({}, testTemplateWithThreeCards), {}, {\n        type: selected.value\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: styles.PageController,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: styles.AddPageCont,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 9\n    }\n  }, __jsx(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 11\n    }\n  }, \"Pages\"), __jsx(\"button\", {\n    className: styles.ChangePagesBtn,\n    onClick: removePage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 11\n    }\n  }, removePageIcon()), __jsx(\"input\", {\n    // disabled={pagesRendered}\n    type: \"number\",\n    name: \"pagesNumber\",\n    className: styles.pagesNumberIndicator,\n    placeholder: test.pages.toString() // value={currentPages}\n    ,\n    onChange: handleNumberInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 11\n    }\n  }), __jsx(\"button\", {\n    className: styles.ChangePagesBtn,\n    onClick: addPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 11\n    }\n  }, addPageIcon())), __jsx(PagesController, {\n    activePage: activePage,\n    setActivePage: activateAPage,\n    currentPages: test.pages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 9\n    }\n  })), __jsx(PhotoManager, {\n    togglePhotoManager: openPhotos,\n    displayed: isPhotoManagerOpen,\n    currentCard: currentCard,\n    setCurrentCard: setCurrentCard,\n    pageToRender: test[currentLang].pages[activePage].QnAPairs,\n    saveChanges: savePage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }\n  }), __jsx(TestPreview, {\n    togglePhotoManager: openPhotos,\n    activePage: activePage,\n    currentLanguage: currentLang,\n    setCurrentLang: activateCurrentLang // currentTestState={test}\n    ,\n    pageToRender: test[currentLang].pages[activePage].QnAPairs,\n    testType: test.type,\n    saveChanges: savePage,\n    setCurrentCard: saveCurrentCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 7\n    }\n  }), __jsx(\"button\", {\n    onClick: handleTestSaving,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 7\n    }\n  }, \"Send the test!\"));\n}\n\nexport default create_test;\n\nfunction addPageIcon() {\n  return __jsx(\"svg\", {\n    width: \"60\",\n    height: \"60\",\n    viewBox: \"0 0 35 36\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 5\n    }\n  }, __jsx(\"circle\", {\n    r: \"17.3744\",\n    transform: \"matrix(1 0 0 -1 17.3744 18)\",\n    fill: \"#2F4858\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }\n  }), __jsx(\"path\", {\n    d: \"M23.5173 18.6826H18.0569V24.1431C18.0569 24.5198 17.7511 24.8257 17.3743 24.8257C16.9976 24.8257 16.6918 24.5198 16.6918 24.1431V18.6826H11.2312C10.8545 18.6826 10.5487 18.3768 10.5487 18.0001C10.5487 17.6233 10.8545 17.3174 11.2312 17.3174H16.6918V11.857C16.6918 11.4802 16.9976 11.1744 17.3743 11.1744C17.7511 11.1744 18.0569 11.4802 18.0569 11.857V17.3174H23.5173C23.8942 17.3174 24.2 17.6233 24.2 18.0001C24.2 18.3768 23.8942 18.6826 23.5173 18.6826Z\",\n    fill: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction removePageIcon() {\n  return __jsx(\"svg\", {\n    width: \"60\",\n    height: \"60\",\n    viewBox: \"0 0 35 36\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 5\n    }\n  }, __jsx(\"circle\", {\n    r: \"17.3744\",\n    transform: \"matrix(1 0 0 -1 17.3744 18)\",\n    fill: \"#2F4858\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }\n  }), __jsx(\"path\", {\n    d: \"M11.1692 18H23.5794\",\n    stroke: \"white\",\n    \"stroke-width\": \"2\",\n    \"stroke-linecap\": \"round\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/pages/TMS/create_test.tsx"],"names":["React","useEffect","useRef","useState","Select","FMLogo","PagesController","PhotoManager","TestNamer","TestPreview","styles","Switch","Axios","create_test","currentCard","setCurrentCard","saveCurrentCard","card","qnaEmptyArray","question","answer","qnaEmptyNArray","pairs","tmpArray","i","push","currentNumberOfPairsForQnAPairs","activePage","setActivePage","activateAPage","index","pagesRendered","setPagesRendered","testTemplateWithThreeCards","pages","en","name","QnAPairs","lv","ru","type","test","setTest","isPhotoManagerOpen","setIsPhotoManagerOpen","openPhotos","toggle","saveTest","currentLang","setCurrentLang","activateCurrentLang","lang","typeOptions","value","label","testType","setTestType","handleTypeChange","chosenType","savePage","page","console","log","tmp","handleNumberInputChange","event","currentTarget","Number","undefined","slice","removePage","addPage","didMountRef","current","handleTestSaving","preventDefault","post","catch","res","alert","then","testLang","handleLangSwitchChange","checked","id","langSwitchesStates","key","setLangSwitchesState","tmpLangSwitch","setTmpLangSwitch","renderLangSwitcher","languagesToHaveSwitches","map","toLocaleUpperCase","CreateTestContainer","TestNaming","TestType","TestTypeSelect","selected","PageController","AddPageCont","ChangePagesBtn","removePageIcon","pagesNumberIndicator","toString","addPageIcon"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Select from \"react-select\";\nimport { IQnA, ITest, TLangOption, TTestTypes } from \"../../@types/test\";\nimport FMLogo from \"../../components/FMlogo\";\nimport PagesController from \"../../components/PagesController\";\nimport PhotoManager from \"../../components/PhotoManager\";\nimport TestNamer from \"../../components/TestNamer\";\nimport TestPreview from \"../../components/TestPreview\";\nimport styles from \"../styles/create_test.module.scss\";\nimport { APIURL } from \"../../components/constants\";\nimport Switch from \"react-switch\";\nimport Axios from \"axios\";\n\nfunction create_test() {\n  // useEffect(() => {\n  //   console.log(\"pages have changed\");\n  //   socket.emit(\"Pages update\", String(test.pages));\n  //   if (test.pages >= 2) {\n  //   }\n  // }, [test.pages]);\n\n  // useEffect(() => {\n  //   socket.emit(\"Test changed\", test);\n  // }, [test]);\n  // useEffect(() => {\n  //   const socket = io(APIURL, {\n  //     reconnectionDelayMax: 10000,\n  //     query: \"123\",\n  //   });\n  // });\n  // const [currentPages, setCurrentPages] = useState<number>(1);\n  // let tmpPages: number = 0;\n\n  const [currentCard, setCurrentCard] = useState<\n    React.MutableRefObject<null>\n  >();\n  const saveCurrentCard = (\n    card: React.SetStateAction<React.MutableRefObject<null> | undefined>\n  ) => setCurrentCard(card);\n\n  const qnaEmptyArray = (): IQnA => {\n    return {\n      question: \"\",\n      answer: \"\",\n    };\n  };\n  const qnaEmptyNArray = (pairs: number): IQnA[] => {\n    let tmpArray = [];\n    for (let i = 0; i < pairs; i++) {\n      tmpArray.push(qnaEmptyArray());\n    }\n    return tmpArray;\n  };\n  const currentNumberOfPairsForQnAPairs = 3;\n  const [activePage, setActivePage] = useState<number>(0);\n  const activateAPage = (index: number) => setActivePage(index);\n  const [pagesRendered, setPagesRendered] = useState<boolean>();\n  const testTemplateWithThreeCards = {\n    pages: 1,\n    en: {\n      name: \"\",\n      pages: [\n        {\n          QnAPairs: qnaEmptyNArray(currentNumberOfPairsForQnAPairs),\n        },\n      ],\n    },\n    lv: {\n      name: \"\",\n      pages: [\n        {\n          QnAPairs: qnaEmptyNArray(currentNumberOfPairsForQnAPairs),\n        },\n      ],\n    },\n    ru: {\n      name: \"\",\n      pages: [\n        {\n          QnAPairs: qnaEmptyNArray(currentNumberOfPairsForQnAPairs),\n        },\n      ],\n    },\n    type: \"\",\n  };\n  const [test, setTest] = useState<ITest>(testTemplateWithThreeCards);\n\n  const [isPhotoManagerOpen, setIsPhotoManagerOpen] = useState<boolean>(true);\n  const openPhotos = (toggle: boolean) => setIsPhotoManagerOpen(toggle);\n\n  const saveTest = (test: ITest): void => setTest(test);\n  const [currentLang, setCurrentLang] = useState<TLangOption[\"value\"]>(\"ru\");\n  const activateCurrentLang = (lang: TLangOption[\"value\"]) =>\n    setCurrentLang(lang);\n\n  /*   const handleClick = () => {\n    setTest({\n      ru: {\n        name: \"imya\",\n        pages: test.ru.pages,\n      },\n      lv: test.lv,\n      en: test.en,\n      pages: test.pages,\n      type: \"TP\",\n    });\n  }; */\n\n  type TTypeOptions = {\n    value: \"TT\" | \"TP\" | \"PP\";\n    label: \"Text – Text\" | \"Text – Photo\" | \"Photo – Photo\";\n  };\n  const typeOptions: Array<TTypeOptions> = [\n    { value: \"TT\", label: \"Text – Text\" },\n    { value: \"TP\", label: \"Text – Photo\" },\n    { value: \"PP\", label: \"Photo – Photo\" },\n  ];\n\n  const [testType, setTestType] = useState<TTestTypes>();\n  const handleTypeChange = (chosenType: TTestTypes): void => {\n    setTestType(chosenType);\n    setTest({\n      ...test,\n      type: chosenType,\n    });\n  };\n\n  function savePage(page: any) {\n    console.log(page);\n    let tmp = test[currentLang].pages;\n    tmp[activePage].QnAPairs = page;\n    console.log(tmp);\n    setTest({\n      ...test,\n      [currentLang]: {\n        ...test[currentLang],\n        pages: tmp,\n      },\n    });\n  }\n\n  const handleNumberInputChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    console.log(event.currentTarget.value);\n    if (\n      Number(event.currentTarget.value) >= 2 &&\n      event.currentTarget.value != undefined &&\n      Number(event.currentTarget.value) < 50\n    ) {\n      if (Number(event.currentTarget.value) > test.pages) {\n        console.log(\"test\");\n        let tmpArray = [];\n        for (\n          let i = 0;\n          i < Number(event.currentTarget.value) - test.pages;\n          i++\n        ) {\n          tmpArray.push({\n            QnAPairs: qnaEmptyNArray(currentNumberOfPairsForQnAPairs),\n          });\n        }\n        console.log(...tmpArray);\n        setTest({\n          ...test,\n          en: {\n            ...test.en,\n            pages: [...test.en.pages, ...tmpArray],\n          },\n          ru: {\n            ...test.ru,\n            pages: [...test.ru.pages, ...tmpArray],\n          },\n          lv: {\n            ...test.lv,\n            pages: [...test.lv.pages, ...tmpArray],\n          },\n          pages: Number(event.currentTarget.value),\n        });\n      } else {\n        setTest({\n          ...test,\n          en: {\n            ...test.en,\n            pages: test.en.pages.slice(\n              0,\n              test.pages - (test.pages - Number(event.currentTarget.value))\n            ),\n          },\n          ru: {\n            ...test.ru,\n            pages: test.ru.pages.slice(\n              0,\n              test.pages - (test.pages - Number(event.currentTarget.value))\n            ),\n          },\n          lv: {\n            ...test.lv,\n            pages: test.lv.pages.slice(\n              0,\n              test.pages - (test.pages - Number(event.currentTarget.value))\n            ),\n          },\n          pages: Number(event.currentTarget.value),\n        });\n      }\n      // event.currentTarget.value = String(test.pages);\n    }\n    console.log(test);\n  };\n\n  const removePage = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ): void => {\n    if (test.pages !== 1) {\n      setTest({\n        ...test,\n        en: {\n          ...test.en,\n          pages: test.en.pages.slice(0, test.pages - 1),\n        },\n        ru: {\n          ...test.ru,\n          pages: test.ru.pages.slice(0, test.pages - 1),\n        },\n        lv: {\n          ...test.lv,\n          pages: test.lv.pages.slice(0, test.pages - 1),\n        },\n        pages: test.pages - 1,\n      });\n    }\n  };\n\n  const addPage = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ): void => {\n    if (test.pages < 50) {\n      setTest({\n        ...test,\n        en: {\n          ...test.en,\n          pages: [\n            ...test.en.pages,\n            { QnAPairs: qnaEmptyNArray(currentNumberOfPairsForQnAPairs) },\n          ],\n        },\n        ru: {\n          ...test.ru,\n          pages: [\n            ...test.ru.pages,\n            { QnAPairs: qnaEmptyNArray(currentNumberOfPairsForQnAPairs) },\n          ],\n        },\n        lv: {\n          ...test.lv,\n          pages: [\n            ...test.lv.pages,\n            { QnAPairs: qnaEmptyNArray(currentNumberOfPairsForQnAPairs) },\n          ],\n        },\n        pages: test.pages + 1,\n      });\n    }\n  };\n\n  useEffect(() => {\n    console.log(test.pages);\n    if (didMountRef.current) {\n      setPagesRendered(false);\n    } else {\n      setPagesRendered(true);\n    }\n  });\n\n  const didMountRef = useRef();\n\n  const handleTestSaving = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n    Axios.post(\"http://localhost:4000/tests/create\", test)\n      .catch((res) => alert(res))\n      .then((res) => console.log(res));\n  };\n\n  const testLang: TLangOption[\"value\"][] = [\"ru\", \"lv\", \"en\"];\n  const handleLangSwitchChange = (\n    checked: boolean,\n    event: MouseEvent | React.SyntheticEvent<MouseEvent | KeyboardEvent, Event>,\n    id: string\n  ) => {\n    console.log(id);\n    setCurrentLang(id as TLangOption[\"value\"]);\n\n    // testLang.forEach((lang: TLangOption[\"value\"]) => {\n    //   setLangSwitchesState({\n    //     ...langSwitchesStates,\n    //     [lang]: !langSwitchesStates[lang],\n    //   });\n    // });\n    const tmp = langSwitchesStates;\n    for (const key in tmp)\n    setLangSwitchesState({\n      ...langSwitchesStates,\n      [id]: !langSwitchesStates[id as \"ru\" | \"lv\" | \"en\"],\n    });\n  };\n\n  const [tmpLangSwitch, setTmpLangSwitch] = useState<boolean>(false);\n  const [langSwitchesStates, setLangSwitchesState] = useState({\n    ru: false,\n    lv: false,\n    en: false,\n  });\n  const renderLangSwitcher = (\n    languagesToHaveSwitches: TLangOption[\"value\"][]\n  ) =>\n    languagesToHaveSwitches.map((lang: TLangOption[\"value\"]) => (\n      <div>\n        <p>{lang.toLocaleUpperCase()}</p>\n        <Switch\n          id={lang}\n          onChange={handleLangSwitchChange}\n          checked={langSwitchesStates[lang]}\n        />\n      </div>\n    ));\n\n  return (\n    <div className={styles.CreateTestContainer}>\n      <FMLogo />\n      <div className={styles.TestNaming}>\n        <TestNamer\n          currentLang={currentLang}\n          setCurrentLang={activateCurrentLang}\n          saveTest={saveTest}\n          currentStateOfTest={test}\n        />\n      </div>\n      {/* <Switch\n        id=\"ru\"\n        onChange={handleLangSwitchChange}\n        checked={tmpLangSwitch}\n      /> */}\n      {renderLangSwitcher(testLang)}\n      <div className={styles.TestType}>\n        <Select\n          options={typeOptions}\n          className={styles.TestTypeSelect}\n          onChange={(selected: any): void => {\n            setTest({\n              ...testTemplateWithThreeCards,\n              type: selected.value,\n            });\n          }}\n        />\n      </div>\n      <div className={styles.PageController}>\n        <div className={styles.AddPageCont}>\n          <h5>Pages</h5>\n          <button className={styles.ChangePagesBtn} onClick={removePage}>\n            {removePageIcon()}\n          </button>\n          <input\n            // disabled={pagesRendered}\n            type=\"number\"\n            name=\"pagesNumber\"\n            className={styles.pagesNumberIndicator}\n            placeholder={test.pages.toString()}\n            // value={currentPages}\n            onChange={handleNumberInputChange}\n          />\n          <button className={styles.ChangePagesBtn} onClick={addPage}>\n            {addPageIcon()}\n          </button>\n        </div>\n        <PagesController\n          activePage={activePage}\n          setActivePage={activateAPage}\n          currentPages={test.pages}\n        />\n      </div>\n\n      <PhotoManager\n        togglePhotoManager={openPhotos}\n        displayed={isPhotoManagerOpen}\n        currentCard={currentCard}\n        setCurrentCard={setCurrentCard}\n        pageToRender={test[currentLang].pages[activePage].QnAPairs}\n        saveChanges={savePage}\n      />\n      <TestPreview\n        togglePhotoManager={openPhotos}\n        activePage={activePage}\n        currentLanguage={currentLang}\n        setCurrentLang={activateCurrentLang}\n        // currentTestState={test}\n        pageToRender={test[currentLang].pages[activePage].QnAPairs}\n        testType={test.type}\n        saveChanges={savePage}\n        setCurrentCard={saveCurrentCard}\n      />\n      <button onClick={handleTestSaving}>Send the test!</button>\n    </div>\n  );\n}\n\nexport default create_test;\nfunction addPageIcon() {\n  return (\n    <svg\n      width=\"60\"\n      height=\"60\"\n      viewBox=\"0 0 35 36\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <circle\n        r=\"17.3744\"\n        transform=\"matrix(1 0 0 -1 17.3744 18)\"\n        fill=\"#2F4858\"\n      />\n      <path\n        d=\"M23.5173 18.6826H18.0569V24.1431C18.0569 24.5198 17.7511 24.8257 17.3743 24.8257C16.9976 24.8257 16.6918 24.5198 16.6918 24.1431V18.6826H11.2312C10.8545 18.6826 10.5487 18.3768 10.5487 18.0001C10.5487 17.6233 10.8545 17.3174 11.2312 17.3174H16.6918V11.857C16.6918 11.4802 16.9976 11.1744 17.3743 11.1744C17.7511 11.1744 18.0569 11.4802 18.0569 11.857V17.3174H23.5173C23.8942 17.3174 24.2 17.6233 24.2 18.0001C24.2 18.3768 23.8942 18.6826 23.5173 18.6826Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n}\n\nfunction removePageIcon() {\n  return (\n    <svg\n      width=\"60\"\n      height=\"60\"\n      viewBox=\"0 0 35 36\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <circle\n        r=\"17.3744\"\n        transform=\"matrix(1 0 0 -1 17.3744 18)\"\n        fill=\"#2F4858\"\n      />\n      <path\n        d=\"M11.1692 18H23.5794\"\n        stroke=\"white\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n      />\n    </svg>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}