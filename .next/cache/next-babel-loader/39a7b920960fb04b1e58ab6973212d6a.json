{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestPreview.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\nimport addCompStyles from \"./styles/TestNamer.module.scss\";\nimport QACard from \"./QACard\";\n\nvar TestPreview = function TestPreview(props) {\n  _s();\n\n  var _useState = useState(false),\n      isQOpen = _useState[0],\n      setisQOpen = _useState[1];\n\n  var _useState2 = useState(false),\n      isAOpen = _useState2[0],\n      setisAOpen = _useState2[1];\n\n  var _useState3 = useState(\"ru\"),\n      selectedLang = _useState3[0],\n      setSelectedLang = _useState3[1];\n\n  var setSelectedLanguage = function setSelectedLanguage(chooseLanguage) {\n    setSelectedLang(chooseLanguage);\n    props.setCurrentLang(chooseLanguage);\n  };\n\n  var inputEnabler = function inputEnabler() {};\n\n  console.log(props.pageToRender); // props.pageToRender.map((ele) => console.log(ele.question));\n\n  var tmp = props.pageToRender;\n\n  var saveNewData = function saveNewData(qid, data, whatToSave) {\n    console.log(\"from data saving\", qid);\n    tmp[qid][whatToSave] = data; // console.log(tmp[qid][whatToSave]);\n    // console.log(\"from save new data\", tmp);\n\n    props.saveChanges(tmp);\n  };\n\n  var handleQuestionKeyPress = function handleQuestionKeyPress(event) {\n    event.key === \"Enter\" ? console.log(\"Efnter\") : undefined;\n  };\n\n  function textQuestion(iterator, // handleQuestionChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void,\n  qna) {\n    return __jsx(\"textarea\", {\n      defaultValue: \"Enter your text\",\n      id: String(iterator),\n      onChange: handleQuestionChange,\n      className: compStyles.Question,\n      onKeyPress: handleQuestionKeyPress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    });\n  }\n\n  function imgQuestion(iterator, // handleQuestionChange: (\n  // event: React.ChangeEvent<HTMLTextAreaElement>\n  // ) => void,\n  qna) {\n    return __jsx(\"div\", {\n      id: String(iterator),\n      className: compStyles.Question,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, \"\\uFF0B\"));\n  }\n\n  function q_a_TextEntry(type, id) {\n    console.log(\"id\", id);\n    return __jsx(\"textarea\", {\n      className: compStyles.textInputForQandA // type=\"text\"\n      ,\n      name: \"qaTextEntry\",\n      id: String(id),\n      value: props.pageToRender[id][type],\n      onChange: function onChange(e) {\n        return saveNewData(id, e.currentTarget.value, type);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    });\n  }\n\n  var handleQuestionChange = function handleQuestionChange(event) {\n    console.log(\"\".concat(event.currentTarget.id, \":\"), event.currentTarget.value);\n    saveNewData(Number(event.currentTarget.id), event.currentTarget.value, \"question\");\n  };\n\n  var handleModalOpening = function handleModalOpening(event) {\n    if (event.currentTarget.classList.contains(compStyles.question)) {\n      var tmpModalsArray = Array.from(document.getElementsByClassName(addCompStyles.ModalContainerBG));\n      tmpModalsArray.forEach(function (modal) {\n        if (modal.id !== event.currentTarget.id) {\n          modal.classList.add(compStyles.HideModal);\n        } else {\n          modal.classList.remove(compStyles.HideModal);\n        }\n      });\n      console.log(tmpModalsArray);\n      setisQOpen(true);\n    }\n  };\n\n  console.log(props.pageToRender, \"jfhdskajfkl;ds\");\n\n  var pageBody = function pageBody() {\n    return props.pageToRender.map(function (qna, iterator) {\n      return __jsx(\"div\", {\n        key: iterator,\n        id: String(iterator),\n        className: compStyles.qnaPair,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 7\n        }\n      }, __jsx(QACard, {\n        setCurrentCard: props.setCurrentCard,\n        cardType: \"question\",\n        cardContents: props.testType === \"PP\" ? \"img\" : \"text\",\n        iterator: iterator,\n        setSelectedLanguage: setSelectedLanguage,\n        inputEnabler: inputEnabler,\n        qna: qna,\n        testType: props.testType,\n        q_a_TextEntry: q_a_TextEntry,\n        togglePhotoManager: props.togglePhotoManager,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 9\n        }\n      }), __jsx(QACard, {\n        setCurrentCard: props.setCurrentCard,\n        cardType: \"answer\",\n        cardContents: props.testType === \"TT\" ? \"text\" : \"img\",\n        iterator: iterator,\n        setSelectedLanguage: setSelectedLanguage,\n        inputEnabler: inputEnabler,\n        qna: qna,\n        testType: props.testType,\n        q_a_TextEntry: q_a_TextEntry,\n        togglePhotoManager: props.togglePhotoManager,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 9\n        }\n      }));\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: styles.TestPreview,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }, \"Page: \", props.activePage + 1), __jsx(\"div\", {\n    className: \"\".concat(compStyles.TestBGContainer),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }, __jsx(FMLogo, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: compStyles.pageBody,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }, props.testType === \"\" ? __jsx(\"div\", {\n    className: compStyles.tTypeWarning,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 15\n    }\n  }, \"Please choose a test type\")) : pageBody())));\n};\n\n_s(TestPreview, \"Qx3nyvlWQFOKRZdBKNWWScfqKHA=\");\n\n_c = TestPreview;\nexport default TestPreview;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestPreview\");","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestPreview.tsx"],"names":["React","useState","styles","FMLogo","compStyles","addCompStyles","QACard","TestPreview","props","isQOpen","setisQOpen","isAOpen","setisAOpen","selectedLang","setSelectedLang","setSelectedLanguage","chooseLanguage","setCurrentLang","inputEnabler","console","log","pageToRender","tmp","saveNewData","qid","data","whatToSave","saveChanges","handleQuestionKeyPress","event","key","undefined","textQuestion","iterator","qna","String","handleQuestionChange","Question","imgQuestion","q_a_TextEntry","type","id","textInputForQandA","e","currentTarget","value","Number","handleModalOpening","classList","contains","question","tmpModalsArray","Array","from","document","getElementsByClassName","ModalContainerBG","forEach","modal","add","HideModal","remove","pageBody","map","qnaPair","setCurrentCard","testType","togglePhotoManager","activePage","TestBGContainer","tTypeWarning"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  ILangSpecificBody,\n  IQnA,\n  IQnAPairs,\n  ITest,\n  TLangOption,\n  TTestTypes,\n} from \"../@types/test\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\nimport addCompStyles from \"./styles/TestNamer.module.scss\";\nimport { closeBtn, CreateLangSwitchers } from \"./TestNamer\";\nimport QACard from \"./QACard\";\n\nconst TestPreview = (props: {\n  activePage: number;\n  currentLanguage: TLangOption[\"value\"] | undefined;\n  // currentTestState: ITest;\n  pageToRender: IQnA[];\n  setCurrentLang: (lang: TLangOption[\"value\"]) => void;\n  testType: ITest[\"type\"];\n  saveChanges: (page: any) => void;\n  togglePhotoManager: (toggle: boolean) => void;\n  setCurrentCard: React.Dispatch<React.SetStateAction<undefined>>;\n}) => {\n  const [isQOpen, setisQOpen] = useState(false);\n  const [isAOpen, setisAOpen] = useState(false);\n  const [selectedLang, setSelectedLang] = useState<TLangOption[\"value\"]>(\"ru\");\n  const setSelectedLanguage = (chooseLanguage: TLangOption[\"value\"]): void => {\n    setSelectedLang(chooseLanguage);\n    props.setCurrentLang(chooseLanguage);\n  };\n  const inputEnabler = () => {};\n\n  console.log(props.pageToRender);\n  // props.pageToRender.map((ele) => console.log(ele.question));\n\n  let tmp = props.pageToRender;\n\n  const saveNewData = (\n    qid: number,\n    data: string,\n    whatToSave: \"answer\" | \"question\"\n  ) => {\n    console.log(\"from data saving\", qid);\n    tmp[qid][whatToSave] = data;\n    // console.log(tmp[qid][whatToSave]);\n    // console.log(\"from save new data\", tmp);\n    props.saveChanges(tmp);\n  };\n\n  const handleQuestionKeyPress = (\n    event: React.KeyboardEvent<HTMLTextAreaElement>\n  ) => {\n    event.key === \"Enter\" ? console.log(\"Efnter\") : undefined;\n  };\n\n  function textQuestion(\n    iterator: number,\n    // handleQuestionChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void,\n    qna: IQnA\n  ) {\n    return (\n      <textarea\n        defaultValue={\"Enter your text\"}\n        id={String(iterator)}\n        onChange={handleQuestionChange}\n        className={compStyles.Question}\n        onKeyPress={handleQuestionKeyPress}\n      >\n        {/* {qna.question} */}\n      </textarea>\n    );\n  }\n  function imgQuestion(\n    iterator: number,\n    // handleQuestionChange: (\n    // event: React.ChangeEvent<HTMLTextAreaElement>\n    // ) => void,\n    qna: IQnA\n  ) {\n    return (\n      <div id={String(iterator)} className={compStyles.Question}>\n        <span>＋</span>\n      </div>\n    );\n  }\n\n  function q_a_TextEntry(type: \"answer\" | \"question\", id: number) {\n    console.log(\"id\", id);\n    return (\n      <textarea\n        className={compStyles.textInputForQandA}\n        // type=\"text\"\n        name=\"qaTextEntry\"\n        id={String(id)}\n        value={props.pageToRender[id][type]}\n        onChange={(e) => saveNewData(id, e.currentTarget.value, type)}\n      />\n    );\n  }\n\n  const handleQuestionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    console.log(`${event.currentTarget.id}:`, event.currentTarget.value);\n    saveNewData(\n      Number(event.currentTarget.id),\n      event.currentTarget.value,\n      \"question\"\n    );\n  };\n\n  const handleModalOpening = (\n    event: React.MouseEvent<HTMLSpanElement, MouseEvent>\n  ) => {\n    if (event.currentTarget.classList.contains(compStyles.question)) {\n      let tmpModalsArray = Array.from(\n        document.getElementsByClassName(addCompStyles.ModalContainerBG)\n      );\n      tmpModalsArray.forEach((modal) => {\n        if (modal.id !== event.currentTarget.id) {\n          modal.classList.add(compStyles.HideModal);\n        } else {\n          modal.classList.remove(compStyles.HideModal);\n        }\n      });\n      console.log(tmpModalsArray);\n      setisQOpen(true);\n    }\n  };\n\n  console.log(props.pageToRender, \"jfhdskajfkl;ds\");\n\n  const pageBody = () =>\n    props.pageToRender.map((qna: IQnA, iterator: number) => (\n      <div key={iterator} id={String(iterator)} className={compStyles.qnaPair}>\n        <QACard\n          setCurrentCard={props.setCurrentCard}\n          cardType=\"question\"\n          cardContents={props.testType === \"PP\" ? \"img\" : \"text\"}\n          iterator={iterator}\n          setSelectedLanguage={setSelectedLanguage}\n          inputEnabler={inputEnabler}\n          qna={qna}\n          testType={props.testType}\n          q_a_TextEntry={q_a_TextEntry}\n          togglePhotoManager={props.togglePhotoManager}\n        />\n        {/* For answer rendering */}\n        <QACard\n          setCurrentCard={props.setCurrentCard}\n          cardType=\"answer\"\n          cardContents={props.testType === \"TT\" ? \"text\" : \"img\"}\n          iterator={iterator}\n          setSelectedLanguage={setSelectedLanguage}\n          inputEnabler={inputEnabler}\n          qna={qna}\n          testType={props.testType}\n          q_a_TextEntry={q_a_TextEntry}\n          togglePhotoManager={props.togglePhotoManager}\n        />\n      </div>\n    ));\n\n  return (\n    <div className={styles.TestPreview}>\n      <h3>Page: {props.activePage + 1}</h3>\n\n      <div className={`${compStyles.TestBGContainer}`}>\n        <FMLogo />\n        <div className={compStyles.pageBody}>\n          {props.testType === \"\" ? (\n            <div className={compStyles.tTypeWarning}>\n              <h1>Please choose a test type</h1>\n            </div>\n          ) : (\n            pageBody()\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TestPreview;\n"]},"metadata":{},"sourceType":"module"}