{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\nimport QACard from \"./QACard\";\nimport { textEntryCountLimit } from \"./constants\"; // import { URLCheckForLocalhost } from \"./constants\";\n\nvar TestPreview = function TestPreview(props) {\n  var _useState = useState(false),\n      isQOpen = _useState[0],\n      setisQOpen = _useState[1];\n\n  var _useState2 = useState(false),\n      isAOpen = _useState2[0],\n      setisAOpen = _useState2[1];\n\n  var _useState3 = useState(\"ru\"),\n      selectedLang = _useState3[0],\n      setSelectedLang = _useState3[1];\n\n  var setSelectedLanguage = function setSelectedLanguage(chooseLanguage) {\n    setSelectedLang(chooseLanguage);\n    props.setCurrentLang(chooseLanguage);\n  };\n\n  var inputEnabler = function inputEnabler() {}; // console.log(props.pageToRender);\n  // props.pageToRender.map((ele) => console.log(ele.question));\n  // let tmp = props.pageToRender;\n\n\n  var saveNewData = function saveNewData(qid, data, whatToSave, lang) {\n    // console.log(\"from data saving\", qid);\n    console.log(data);\n    console.log(lang);\n\n    if (lang === \"all\") {\n      var tmpLocal = props.fullTest.ru.pages[props.activePage].QnAPairs;\n      tmpLocal[qid][whatToSave] = data;\n      props.saveChanges(tmpLocal, \"ru\");\n      tmpLocal = props.fullTest.en.pages[props.activePage].QnAPairs;\n      tmpLocal[qid][whatToSave] = data;\n      props.saveChanges(tmpLocal, \"en\");\n      tmpLocal = props.fullTest.lv.pages[props.activePage].QnAPairs;\n      tmpLocal[qid][whatToSave] = data;\n      props.saveChanges(tmpLocal, \"lv\");\n    } else {\n      console.log(props.fullTest[lang].pages[props.activePage].QnAPairs);\n      var _tmpLocal = props.fullTest[lang].pages[props.activePage].QnAPairs;\n      console.log(_tmpLocal);\n      _tmpLocal[qid][whatToSave] = data; // console.log(tmp[qid][whatToSave]);\n      // console.log(\"from save new data\", tmp);\n\n      props.saveChanges(_tmpLocal, lang);\n    }\n  };\n\n  var handleQuestionKeyPress = function handleQuestionKeyPress(event) {\n    event.key === \"Enter\" ? console.log(\"Efnter\") : undefined;\n  };\n\n  var qaTextEntryHeaderStyle = {\n    color: \"whitesmoke\",\n    fontSize: \"24px\",\n    margin: \"0\"\n  };\n  var qaTextEntryPContainer = {\n    display: \"flex\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n    width: \"7.5%\",\n    height: \"3rem\",\n    border: \"1px solid rgba(0,0,0,0)\",\n    borderRadius: \"31px\",\n    backgroundColor: \"rgb(214\t180\t156\t)\"\n  };\n  var qaTextEntryContainer = {\n    width: \"90%\",\n    height: \"35%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\"\n  };\n  var qaTextEntryCharCounter = {\n    color: \"rgb(47 71 88)\",\n    fontSize: \"25px\",\n    margin: \"0\",\n    width: \"5%\"\n  };\n\n  function q_a_TextEntry(type, id) {\n    // console.log(\"id\", id);\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      style: qaTextEntryContainer\n    }, __jsx(\"div\", {\n      style: qaTextEntryPContainer\n    }, __jsx(\"p\", {\n      style: qaTextEntryHeaderStyle\n    }, \"RUS\")), __jsx(\"textarea\", {\n      // * RU\n      autoFocus: true,\n      className: compStyles.textInputForQandA,\n      name: \"qaTextEntry\",\n      id: String(id),\n      value: props.fullTest.ru.pages[props.activePage].QnAPairs[id][type] // value={props.pageToRender[id][type]}\n      ,\n      maxLength: textEntryCountLimit,\n      onChange: function onChange(e) {\n        return saveNewData(id, e.currentTarget.value, type, \"ru\");\n      }\n    }), __jsx(\"p\", {\n      style: qaTextEntryCharCounter\n    }, props.fullTest.ru.pages[props.activePage].QnAPairs[id][type].length, \"/\", textEntryCountLimit)), __jsx(\"div\", {\n      style: qaTextEntryContainer\n    }, __jsx(\"div\", {\n      style: qaTextEntryPContainer\n    }, __jsx(\"p\", {\n      style: qaTextEntryHeaderStyle\n    }, \"ENG\")), __jsx(\"textarea\", {\n      // * EN\n      className: compStyles.textInputForQandA,\n      name: \"qaTextEntry\",\n      id: String(id),\n      value: props.fullTest.en.pages[props.activePage].QnAPairs[id][type],\n      maxLength: textEntryCountLimit,\n      onChange: function onChange(e) {\n        return saveNewData(id, e.currentTarget.value, type, \"en\");\n      }\n    }), __jsx(\"p\", {\n      style: qaTextEntryCharCounter\n    }, props.fullTest.en.pages[props.activePage].QnAPairs[id][type].length, \"/\", textEntryCountLimit)), __jsx(\"div\", {\n      style: qaTextEntryContainer\n    }, __jsx(\"div\", {\n      style: qaTextEntryPContainer\n    }, __jsx(\"p\", {\n      style: qaTextEntryHeaderStyle\n    }, \"LAT\")), __jsx(\"textarea\", {\n      // * LV\n      className: compStyles.textInputForQandA,\n      name: \"qaTextEntry\",\n      value: props.fullTest.lv.pages[props.activePage].QnAPairs[id][type],\n      maxLength: textEntryCountLimit,\n      onChange: function onChange(e) {\n        return saveNewData(id, e.currentTarget.value, type, \"lv\");\n      }\n    }), __jsx(\"p\", {\n      style: qaTextEntryCharCounter\n    }, props.fullTest.lv.pages[props.activePage].QnAPairs[id][type].length, \"/\", textEntryCountLimit)));\n  } // const handleQuestionChange = (\n  //   event: React.ChangeEvent<HTMLTextAreaElement>\n  // ) => {\n  //   // console.log(`${event.currentTarget.id}:`, event.currentTarget.value);\n  //   saveNewData(\n  //     Number(event.currentTarget.id),\n  //     event.currentTarget.value,\n  //     \"question\"\n  //   );\n  // };\n  // const handleModalOpening = (\n  //   event: React.MouseEvent<HTMLSpanElement, MouseEvent>\n  // ) => {\n  //   if (event.currentTarget.classList.contains(compStyles.question)) {\n  //     let tmpModalsArray = Array.from(\n  //       document.getElementsByClassName(addCompStyles.ModalContainerBG)\n  //     );\n  //     tmpModalsArray.forEach((modal) => {\n  //       if (modal.id !== event.currentTarget.id) {\n  //         modal.classList.add(compStyles.HideModal);\n  //       } else {\n  //         modal.classList.remove(compStyles.HideModal);\n  //       }\n  //     });\n  //     // console.log(tmpModalsArray);\n  //     setisQOpen(true);\n  //   }\n  // };\n\n\n  function testTypeToQaCard(tt, cardType) {\n    var content;\n\n    if (cardType === \"question\") {\n      tt === \"TT\" || tt === \"TP\" ? content = \"text\" : content = \"img\";\n      return content;\n    } else if (cardType === \"answer\") {\n      tt === \"TT\" || tt === \"PT\" ? content = \"text\" : content = \"img\";\n      return content;\n    }\n\n    return \"text\";\n  }\n\n  var pageBody = function pageBody() {\n    return props.pageToRender.map(function (qna, qnaIterator) {\n      return __jsx(\"div\", {\n        key: qnaIterator,\n        id: String(qnaIterator),\n        className: compStyles.qnaPair\n      }, __jsx(QACard, {\n        setCurrentCard: props.setCurrentCard,\n        cardType: \"question\" // cardContents={props.testType === \"PP\" ? \"img\" : \"text\"}\n        ,\n        cardContents: testTypeToQaCard(props.testType, \"question\"),\n        iterator: qnaIterator,\n        setSelectedLanguage: setSelectedLanguage,\n        inputEnabler: inputEnabler,\n        qna: qna,\n        testType: props.testType,\n        q_a_TextEntry: q_a_TextEntry,\n        togglePhotoManager: props.togglePhotoManager,\n        currentLang: props.currentLanguage || \"ru\",\n        pageContents: props.pageToRender[qnaIterator][\"question\"],\n        pageNumber: props.activePage,\n        saveIMG: saveNewData\n      }), __jsx(QACard, {\n        setCurrentCard: props.setCurrentCard,\n        cardType: \"answer\" // cardContents={props.testType === \"TT\" ? \"text\" : \"img\"}\n        ,\n        cardContents: testTypeToQaCard(props.testType, \"answer\"),\n        iterator: qnaIterator,\n        setSelectedLanguage: setSelectedLanguage,\n        inputEnabler: inputEnabler,\n        qna: qna,\n        testType: props.testType,\n        q_a_TextEntry: q_a_TextEntry,\n        togglePhotoManager: props.togglePhotoManager,\n        currentLang: props.currentLanguage,\n        pageContents: props.pageToRender[qnaIterator][\"answer\"],\n        pageNumber: props.activePage,\n        saveIMG: saveNewData\n      }));\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: styles.TestPreview\n  }, __jsx(\"p\", {\n    className: styles.TPHeader\n  }, \"\\u0421\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0430 \", props.activePage + 1), __jsx(\"div\", {\n    className: \"\".concat(compStyles.TestBGContainer)\n  }, __jsx(FMLogo, null), __jsx(\"div\", {\n    className: compStyles.pageBody\n  }, props.testType === \"\" ? __jsx(\"div\", {\n    className: compStyles.tTypeWarning\n  }) : pageBody())));\n};\n\nexport default TestPreview;","map":null,"metadata":{},"sourceType":"module"}