{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestNamer.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport compStyles from \"./styles/TestNamer.module.scss\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport { useEffect } from \"react\";\n\nvar TestNamer = function TestNamer(props) {\n  _s();\n\n  var _useState = useState(false),\n      isOpen = _useState[0],\n      setIsOpen = _useState[1];\n\n  var testLang = [\"ru\", \"lv\", \"en\"];\n\n  var _useState2 = useState([[null, false], [null, false], [null, false]]),\n      langButtons = _useState2[0],\n      setLangButtons = _useState2[1];\n\n  useEffect(function () {\n    setLangButtons(testLang.map(function (lang) {\n      return [document.getElementById(lang), false];\n    }));\n    console.log(langButtons);\n  }, [langButtons]);\n\n  var handleLangBtnClick = function handleLangBtnClick(btn) {\n    var _btn$target;\n\n    console.log((_btn$target = btn.target) === null || _btn$target === void 0 ? void 0 : _btn$target.id);\n    langButtons.forEach(function (button) {\n      var _button$, _btn$target2;\n\n      console.log(button[1]);\n\n      if (((_button$ = button[0]) === null || _button$ === void 0 ? void 0 : _button$.id) == ((_btn$target2 = btn.target) === null || _btn$target2 === void 0 ? void 0 : _btn$target2.id)) {\n        var _button$2, _button$2$classList;\n\n        (_button$2 = button[0]) === null || _button$2 === void 0 ? void 0 : (_button$2$classList = _button$2.classList) === null || _button$2$classList === void 0 ? void 0 : _button$2$classList.add(compStyles.ButtonPressed);\n        button[1] = true;\n      } else {\n        var _button$3, _button$3$classList;\n\n        (_button$3 = button[0]) === null || _button$3 === void 0 ? void 0 : (_button$3$classList = _button$3.classList) === null || _button$3$classList === void 0 ? void 0 : _button$3$classList.remove(compStyles.ButtonPressed);\n        button[1] = false;\n      }\n    });\n    props.currentLang(btn.target.id);\n  };\n\n  var handleArrowClick = function handleArrowClick(btn) {};\n\n  return __jsx(\"div\", {\n    className: styles.TestNaming,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, isOpen ? __jsx(\"div\", {\n    className: compStyles.ModalContainerBG,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: compStyles.ModalContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, __jsx(\"button\", {\n    className: compStyles.CloseBTN,\n    onClick: function onClick() {\n      return setIsOpen(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, \"\\uD835\\uDDB7\"), __jsx(\"div\", {\n    className: compStyles.Modal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: compStyles.LangSelect,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }, __jsx(\"button\", {\n    onClick: handleLangBtnClick,\n    id: \"ru\",\n    className: compStyles.LangButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, \"RUS\"), __jsx(\"button\", {\n    onClick: handleLangBtnClick,\n    id: \"lv\",\n    className: compStyles.LangButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, \"LAT\"), __jsx(\"button\", {\n    onClick: handleLangBtnClick,\n    id: \"en\",\n    className: compStyles.LangButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, \"ENG\")), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"TestName\",\n    className: compStyles.TNameInput,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  }), __jsx(\"button\", {\n    className: compStyles.NextLang,\n    onClick: handleArrowClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 15\n    }\n  }, \"\\u2192\")))) : __jsx(\"div\", {\n    className: compStyles.ModalOpener,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, \"Test name\"), __jsx(\"button\", {\n    onClick: function onClick() {\n      return setIsOpen(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, \"+\")));\n};\n\n_s(TestNamer, \"FadfKOGBfPU2uTjNPLHvUGlFtKU=\");\n\n_c = TestNamer;\nexport default TestNamer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestNamer\");","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestNamer.tsx"],"names":["React","useState","compStyles","styles","useEffect","TestNamer","props","isOpen","setIsOpen","testLang","langButtons","setLangButtons","map","lang","document","getElementById","console","log","handleLangBtnClick","btn","target","id","forEach","button","classList","add","ButtonPressed","remove","currentLang","handleArrowClick","TestNaming","ModalContainerBG","ModalContainer","CloseBTN","Modal","LangSelect","LangButton","TNameInput","NextLang","ModalOpener"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport compStyles from \"./styles/TestNamer.module.scss\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport { TLangOption } from \"../@types/test\";\nimport { useEffect } from \"react\";\n\nconst TestNamer = (props: any) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const testLang: TLangOption[\"value\"][] = [\"ru\", \"lv\", \"en\"];\n\n  const [langButtons, setLangButtons] = useState<\n    Array<[HTMLElement | null, boolean]>\n  >([\n    [null, false],\n    [null, false],\n    [null, false],\n  ]);\n\n  useEffect(() => {\n    setLangButtons(testLang.map((lang: string) => {\n      return [document.getElementById(lang), false];\n    }));\n    console.log(langButtons);\n  }, [langButtons]);\n\n  const handleLangBtnClick = (\n    btn: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    console.log(btn.target?.id);\n    langButtons.forEach((button) => {\n      console.log(button[1]);\n      if (button[0]?.id == btn.target?.id) {\n        button[0]?.classList?.add(compStyles.ButtonPressed);\n        button[1] = true;\n      } else {\n        button[0]?.classList?.remove(compStyles.ButtonPressed);\n        button[1] = false;\n      }\n    });\n    props.currentLang(btn.target.id);\n  };\n\n  const handleArrowClick = (btn) => {};\n\n  return (\n    <div className={styles.TestNaming}>\n      {isOpen ? (\n        <div className={compStyles.ModalContainerBG}>\n          <div className={compStyles.ModalContainer}>\n            <button\n              className={compStyles.CloseBTN}\n              onClick={() => setIsOpen(false)}\n            >\n              𝖷\n            </button>\n\n            <div className={compStyles.Modal}>\n              <div className={compStyles.LangSelect}>\n                <button\n                  onClick={handleLangBtnClick}\n                  id=\"ru\"\n                  className={compStyles.LangButton}\n                >\n                  RUS\n                </button>\n                <button\n                  onClick={handleLangBtnClick}\n                  id=\"lv\"\n                  className={compStyles.LangButton}\n                >\n                  LAT\n                </button>\n                <button\n                  onClick={handleLangBtnClick}\n                  id=\"en\"\n                  className={compStyles.LangButton}\n                >\n                  ENG\n                </button>\n              </div>\n              <input\n                type=\"text\"\n                placeholder=\"TestName\"\n                className={compStyles.TNameInput}\n              />\n              <button\n                className={compStyles.NextLang}\n                onClick={handleArrowClick}\n              >\n                &rarr;\n              </button>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className={compStyles.ModalOpener}>\n          <span>Test name</span>\n          <button onClick={() => setIsOpen(true)}>+</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TestNamer;\n"]},"metadata":{},"sourceType":"module"}