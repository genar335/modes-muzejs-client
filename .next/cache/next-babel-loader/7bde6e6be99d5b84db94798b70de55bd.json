{"ast":null,"code":"var _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestNamer.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport compStyles from \"./styles/TestNamer.module.scss\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport { useEffect } from \"react\";\n\nconst TestNamer = currentLang => {\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n  const testLang = [\"ru\", \"lv\", \"en\"];\n  let langButtons = [];\n  useEffect(() => {\n    langButtons = testLang.map(lang => document.getElementById(lang));\n    console.log(langButtons);\n  });\n\n  const handleLangBtnClick = btn => {\n    var _btn$target;\n\n    console.log((_btn$target = btn.target) === null || _btn$target === void 0 ? void 0 : _btn$target.id);\n    langButtons.forEach(button => {\n      var _btn$target2;\n\n      if ((button === null || button === void 0 ? void 0 : button.id) == ((_btn$target2 = btn.target) === null || _btn$target2 === void 0 ? void 0 : _btn$target2.id)) {\n        var _button$classList;\n\n        button === null || button === void 0 ? void 0 : (_button$classList = button.classList) === null || _button$classList === void 0 ? void 0 : _button$classList.add(compStyles.ButtonPressed);\n      } else {\n        var _button$classList2;\n\n        button === null || button === void 0 ? void 0 : (_button$classList2 = button.classList) === null || _button$classList2 === void 0 ? void 0 : _button$classList2.remove(compStyles.ButtonPressed);\n      }\n    });\n    currentLang(btn.target.id);\n  };\n\n  return __jsx(\"div\", {\n    className: styles.TestNaming,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, isOpen ? __jsx(\"div\", {\n    className: compStyles.ModalContainerBG,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: compStyles.ModalContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, __jsx(\"button\", {\n    className: compStyles.CloseBTN,\n    onClick: () => setIsOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, \"\\uD835\\uDDB7\"), __jsx(\"div\", {\n    className: compStyles.Modal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: compStyles.LangSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }\n  }, __jsx(\"button\", {\n    onClick: handleLangBtnClick,\n    id: \"ru\",\n    className: compStyles.LangButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, \"RUS\"), __jsx(\"button\", {\n    onClick: handleLangBtnClick,\n    id: \"lv\",\n    className: compStyles.LangButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, \"LAT\"), __jsx(\"button\", {\n    onClick: handleLangBtnClick,\n    id: \"en\",\n    className: compStyles.LangButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, \"ENG\")), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"TestName\",\n    className: compStyles.TNameInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }\n  }), __jsx(\"button\", {\n    className: compStyles.NextLang // onClick={handleArrowClick}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, \"\\u2192\")))) : __jsx(\"div\", {\n    className: compStyles.ModalOpener,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, \"Test name\"), __jsx(\"button\", {\n    onClick: () => setIsOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, \"+\")));\n};\n\nexport default TestNamer;","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestNamer.tsx"],"names":["React","useState","compStyles","styles","useEffect","TestNamer","currentLang","isOpen","setIsOpen","testLang","langButtons","map","lang","document","getElementById","console","log","handleLangBtnClick","btn","target","id","forEach","button","classList","add","ButtonPressed","remove","TestNaming","ModalContainerBG","ModalContainer","CloseBTN","Modal","LangSelect","LangButton","TNameInput","NextLang","ModalOpener"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport compStyles from \"./styles/TestNamer.module.scss\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport { TLangOption } from \"../@types/test\";\nimport { useEffect } from \"react\";\n\nconst TestNamer = (currentLang: any) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const testLang: TLangOption[\"value\"][] = [\"ru\", \"lv\", \"en\"];\n\n  let langButtons: Array<HTMLElement | null> = [];\n  useEffect(() => {\n    langButtons = testLang.map((lang: string) => document.getElementById(lang));\n    console.log(langButtons);\n  });\n\n  const handleLangBtnClick = (\n    btn: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    console.log(btn.target?.id);\n    langButtons.forEach((button) => {\n      if (button?.id == btn.target?.id) {\n        button?.classList?.add(compStyles.ButtonPressed);\n      } else {\n        button?.classList?.remove(compStyles.ButtonPressed);\n      }\n    });\n    currentLang(btn.target.id);\n  };\n\n  return (\n    <div className={styles.TestNaming}>\n      {isOpen ? (\n        <div className={compStyles.ModalContainerBG}>\n          <div className={compStyles.ModalContainer}>\n            <button\n              className={compStyles.CloseBTN}\n              onClick={() => setIsOpen(false)}\n            >\n              ùñ∑\n            </button>\n\n            <div className={compStyles.Modal}>\n              <div className={compStyles.LangSelect}>\n                <button\n                  onClick={handleLangBtnClick}\n                  id=\"ru\"\n                  className={compStyles.LangButton}\n                >\n                  RUS\n                </button>\n                <button\n                  onClick={handleLangBtnClick}\n                  id=\"lv\"\n                  className={compStyles.LangButton}\n                >\n                  LAT\n                </button>\n                <button\n                  onClick={handleLangBtnClick}\n                  id=\"en\"\n                  className={compStyles.LangButton}\n                >\n                  ENG\n                </button>\n              </div>\n              <input\n                type=\"text\"\n                placeholder=\"TestName\"\n                className={compStyles.TNameInput}\n              />\n              <button\n                className={compStyles.NextLang}\n                // onClick={handleArrowClick}\n              >\n                &rarr;\n              </button>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className={compStyles.ModalOpener}>\n          <span>Test name</span>\n          <button onClick={() => setIsOpen(true)}>+</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TestNamer;\n"]},"metadata":{},"sourceType":"module"}