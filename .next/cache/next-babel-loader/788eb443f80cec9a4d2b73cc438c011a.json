{"ast":null,"code":"var _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestPreview.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\n\nconst TestPreview = props => {\n  console.log(props.pageToRender); // function handleTextAreaQuestionChange(\n  //   event: React.ChangeEvent<HTMLTextAreaElement>\n  // ) {\n  //   // let tmpArray =\n  //   //   props.currentTestState[props.currentLanguage!].pages[props.activePage]\n  //   //     .QnAPairs;\n  //   // console.log(\"tmp\", tmpArray);\n  //   // tmpArray.forEach((ele) => console.log(ele));\n  //   const tmpArray = props.currentTestState[props.currentLanguage!].pages;\n  //   // console.log(tmpArray);\n  //   // console.log(tmpArray[props.activePage]);\n  //   // console.log(tmpArray[props.activePage].QnAPairs[event.currentTarget.id]);\n  //   tmpArray[props.activePage].QnAPairs[event.currentTarget.id].question =\n  //     event.currentTarget.value;\n  //   // console.log(tmpArray);\n  //   props.saveChanges({\n  //     ...props.currentTestState,\n  //     [props.currentLanguage!]: {\n  //       ...props.currentTestState[props.currentLanguage!],\n  //       pages: tmpArray,\n  //     },\n  //   });\n  // }\n\n  function questionRenderController(currentItem, currentPair) {\n    switch (props.testType) {\n      case \"TT\":\n        return;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  const handleQuestionChange = event => {\n    console.log(`${event.currentTarget.id}:`, event.currentTarget.value);\n  };\n\n  const pageBody = () => props.pageToRender.QnAPairs.map((qna, iterator) => __jsx(\"div\", {\n    key: iterator,\n    id: String(iterator),\n    className: compStyles.qnaPair,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, __jsx(\"textarea\", {\n    id: String(iterator),\n    onChange: handleQuestionChange,\n    className: compStyles.Question,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, qna.question), __jsx(\"textarea\", {\n    id: String(iterator) // onChange={handleAnswerChange}\n    ,\n    className: compStyles.Answer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, qna.answer)));\n\n  props.testType === \"\" ? console.log(\"no test type\") : console.log(props.testType);\n  return __jsx(\"div\", {\n    className: styles.TestPreview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, \"Page: \", props.activePage + 1), __jsx(\"div\", {\n    className: `${compStyles.TestBGContainer}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, __jsx(FMLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: compStyles.pageBody,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, props.testType === \"\" ? __jsx(\"div\", {\n    className: compStyles.tTypeWarning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, \"Please choose a test type\")) : null, pageBody())));\n};\n\nexport default TestPreview;","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestPreview.tsx"],"names":["React","styles","FMLogo","compStyles","TestPreview","props","console","log","pageToRender","questionRenderController","currentItem","currentPair","testType","handleQuestionChange","event","currentTarget","id","value","pageBody","QnAPairs","map","qna","iterator","String","qnaPair","Question","question","Answer","answer","activePage","TestBGContainer","tTypeWarning"],"mappings":";;AAAA,OAAOA,KAAP,MAAiC,OAAjC;AAQA,OAAOC,MAAP,MAAmB,yCAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAOd;AACJC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,YAAlB,EADI,CAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAASC,wBAAT,CAAkCC,WAAlC,EAAuDC,WAAvD,EAA0E;AACxE,YAAQN,KAAK,CAACO,QAAd;AACE,WAAK,IAAL;AACE;AACA;;AAEF;AACE;AANJ;AAQD;;AAED,QAAMC,oBAAoB,GACxBC,KAD2B,IAExB;AACHR,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAEO,KAAK,CAACC,aAAN,CAAoBC,EAAG,GAAtC,EAA0CF,KAAK,CAACC,aAAN,CAAoBE,KAA9D;AACD,GAJD;;AAMA,QAAMC,QAAQ,GAAG,MACfb,KAAK,CAACG,YAAN,CAAmBW,QAAnB,CAA4BC,GAA5B,CAAgC,CAACC,GAAD,EAAYC,QAAZ,KAC9B;AAAK,IAAA,GAAG,EAAEA,QAAV;AAAoB,IAAA,EAAE,EAAEC,MAAM,CAACD,QAAD,CAA9B;AAA0C,IAAA,SAAS,EAAEnB,UAAU,CAACqB,OAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,EAAE,EAAED,MAAM,CAACD,QAAD,CADZ;AAEE,IAAA,QAAQ,EAAET,oBAFZ;AAGE,IAAA,SAAS,EAAEV,UAAU,CAACsB,QAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGJ,GAAG,CAACK,QALP,CADF,EAQE;AACE,IAAA,EAAE,EAAEH,MAAM,CAACD,QAAD,CADZ,CAEE;AAFF;AAGE,IAAA,SAAS,EAAEnB,UAAU,CAACwB,MAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGN,GAAG,CAACO,MALP,CARF,CADF,CADF;;AAoBAvB,EAAAA,KAAK,CAACO,QAAN,KAAmB,EAAnB,GACIN,OAAO,CAACC,GAAR,CAAY,cAAZ,CADJ,GAEID,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACO,QAAlB,CAFJ;AAIA,SACE;AAAK,IAAA,SAAS,EAAEX,MAAM,CAACG,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAWC,KAAK,CAACwB,UAAN,GAAmB,CAA9B,CADF,EAGE;AAAK,IAAA,SAAS,EAAG,GAAE1B,UAAU,CAAC2B,eAAgB,EAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAK,IAAA,SAAS,EAAE3B,UAAU,CAACe,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGb,KAAK,CAACO,QAAN,KAAmB,EAAnB,GACC;AAAK,IAAA,SAAS,EAAET,UAAU,CAAC4B,YAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,CADD,GAIG,IALN,EAMGb,QAAQ,EANX,CAFF,CAHF,CADF;AAiBD,CA5FD;;AA8FA,eAAed,WAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport {\n  IQnA,\n  IQnAPairs,\n  ITest,\n  TLangOption,\n  TTestTypes,\n} from \"../@types/test\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\n\nconst TestPreview = (props: {\n  activePage: number;\n  currentLanguage: TLangOption[\"value\"] | undefined;\n  // currentTestState: ITest;\n  pageToRender: any;\n  testType: ITest[\"type\"];\n  saveChanges: (test: ITest) => void;\n}) => {\n  console.log(props.pageToRender);\n\n  // function handleTextAreaQuestionChange(\n  //   event: React.ChangeEvent<HTMLTextAreaElement>\n  // ) {\n  //   // let tmpArray =\n  //   //   props.currentTestState[props.currentLanguage!].pages[props.activePage]\n  //   //     .QnAPairs;\n  //   // console.log(\"tmp\", tmpArray);\n  //   // tmpArray.forEach((ele) => console.log(ele));\n  //   const tmpArray = props.currentTestState[props.currentLanguage!].pages;\n  //   // console.log(tmpArray);\n  //   // console.log(tmpArray[props.activePage]);\n  //   // console.log(tmpArray[props.activePage].QnAPairs[event.currentTarget.id]);\n  //   tmpArray[props.activePage].QnAPairs[event.currentTarget.id].question =\n  //     event.currentTarget.value;\n  //   // console.log(tmpArray);\n  //   props.saveChanges({\n  //     ...props.currentTestState,\n  //     [props.currentLanguage!]: {\n  //       ...props.currentTestState[props.currentLanguage!],\n  //       pages: tmpArray,\n  //     },\n  //   });\n  // }\n\n  function questionRenderController(currentItem: number, currentPair: IQnA) {\n    switch (props.testType) {\n      case \"TT\":\n        return;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  const handleQuestionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    console.log(`${event.currentTarget.id}:`, event.currentTarget.value);\n  };\n\n  const pageBody = () =>\n    props.pageToRender.QnAPairs.map((qna: IQnA, iterator: number) => (\n      <div key={iterator} id={String(iterator)} className={compStyles.qnaPair}>\n        <textarea\n          id={String(iterator)}\n          onChange={handleQuestionChange}\n          className={compStyles.Question}\n        >\n          {qna.question}\n        </textarea>\n        <textarea\n          id={String(iterator)}\n          // onChange={handleAnswerChange}\n          className={compStyles.Answer}\n        >\n          {qna.answer}\n        </textarea>\n      </div>\n    ));\n\n  props.testType === \"\"\n    ? console.log(\"no test type\")\n    : console.log(props.testType);\n\n  return (\n    <div className={styles.TestPreview}>\n      <h3>Page: {props.activePage + 1}</h3>\n\n      <div className={`${compStyles.TestBGContainer}`}>\n        <FMLogo />\n        <div className={compStyles.pageBody}>\n          {props.testType === \"\" ? (\n            <div className={compStyles.tTypeWarning}>\n              <h1>Please choose a test type</h1>\n            </div>\n          ) : null}\n          {pageBody()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TestPreview;\n"]},"metadata":{},"sourceType":"module"}