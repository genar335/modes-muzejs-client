{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/pages/TMS/main.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport ActiveTests from \"../../components/ActiveTests\";\nimport { devURL } from \"../../components/constants\";\nimport Gallery from \"../../components/Gallery\";\nimport { motion } from \"framer-motion\";\nimport styles from \"../styles/main.module.scss\";\nimport { pageAppearance } from \"./create_test\";\nimport PleaseWaitModal from \"../../components/PleaseWaitModal\";\n\nvar main = function main() {\n  _s();\n\n  var getTestsByActive = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(isTestActive) {\n      var _tests;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return Axios.get(\"http://localhost:4000/tests/getTest?active=\".concat(isTestActive));\n\n            case 3:\n              _tests = _context.sent;\n              console.log(_tests.data, \"recieved tests\");\n              return _context.abrupt(\"return\", _tests.data);\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              alert(_context.t0);\n              return _context.abrupt(\"return\", []);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function getTestsByActive(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var _useState = useState(false),\n      hasEverythingFetched = _useState[0],\n      setHasEverythingFetched = _useState[1];\n\n  var _useState2 = useState({\n    activeTests: [],\n    inActiveTests: []\n  }),\n      tests = _useState2[0],\n      setTests = _useState2[1];\n\n  var getAllTests = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var serverResponse, data, tmpactiveTests, tmpinActiveTests;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setHasEverythingFetched(false);\n              _context2.next = 3;\n              return Axios.get(\"\".concat(devURL, \"tests/allTests\"));\n\n            case 3:\n              serverResponse = _context2.sent;\n              data = serverResponse.data;\n              setHasEverythingFetched(true);\n              console.log(data);\n              tmpactiveTests = [];\n              tmpinActiveTests = [];\n              filterTests(tmpactiveTests, tmpinActiveTests, data);\n              setTests({\n                activeTests: tmpactiveTests,\n                inActiveTests: tmpinActiveTests\n              });\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getAllTests() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var filterTests = function filterTests(activeTests, inActiveTests, arrToFilter) {\n    arrToFilter.forEach(function (test) {\n      if (test.active !== undefined) {\n        test.active ? activeTests.push(test) : inActiveTests.push(test);\n      }\n    });\n  };\n\n  var toggleTest = function toggleTest(testID) {\n    var tmpActive = tests.activeTests;\n    var tmpInactive = tests.inActiveTests;\n    var combinedTests = [].concat(_toConsumableArray(tests.activeTests), _toConsumableArray(tests.inActiveTests));\n    combinedTests.forEach(function (test) {\n      if (test._id === testID) {\n        if (combinedTests.indexOf(test) < tmpActive.length) {\n          tmpActive.splice(tmpActive.indexOf(test), 1);\n          tmpInactive.push(_objectSpread(_objectSpread({}, test), {}, {\n            active: !test.active\n          }));\n        } else {\n          tmpInactive.splice(tmpInactive.indexOf(test), 1);\n          tmpActive.push(_objectSpread(_objectSpread({}, test), {}, {\n            active: !test.active\n          }));\n        }\n      }\n    });\n    setTests({\n      activeTests: tmpActive,\n      inActiveTests: tmpInactive\n    });\n  };\n\n  useEffect(function () {\n    getAllTests();\n  }, []);\n  return __jsx(motion.div, {\n    className: styles.MainContainer,\n    variants: pageAppearance,\n    initial: \"hidden\",\n    animate: \"visible\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, __jsx(PleaseWaitModal, {\n    isDisplayed: !hasEverythingFetched,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }), __jsx(ActiveTests // getActiveTests={getTestsByActive}\n  , {\n    activeTests: tests.activeTests,\n    updateTheTests: toggleTest,\n    fetchAllTests: getAllTests,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }), __jsx(Gallery // getInactiveTests={getTestsByActive}\n  , {\n    testsToRender: tests.inActiveTests,\n    updateTheTests: toggleTest,\n    fetchAllTests: getAllTests,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(main, \"YvsAJrG/dFiufSfdx6oKRiTJOdw=\");\n\nexport default main;","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/pages/TMS/main.tsx"],"names":["Axios","React","useEffect","useState","ActiveTests","devURL","Gallery","motion","styles","pageAppearance","PleaseWaitModal","main","getTestsByActive","isTestActive","get","tests","console","log","data","alert","hasEverythingFetched","setHasEverythingFetched","activeTests","inActiveTests","setTests","getAllTests","serverResponse","tmpactiveTests","tmpinActiveTests","filterTests","arrToFilter","forEach","test","active","undefined","push","toggleTest","testID","tmpActive","tmpInactive","combinedTests","_id","indexOf","length","splice","MainContainer"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { ITest } from \"../../@types/test\";\nimport ActiveTests from \"../../components/ActiveTests\";\nimport { devURL } from \"../../components/constants\";\nimport Gallery from \"../../components/Gallery\";\nimport { motion } from \"framer-motion\";\nimport styles from \"../styles/main.module.scss\";\nimport { pageAppearance } from \"./create_test\";\nimport PleaseWaitModal from \"../../components/PleaseWaitModal\";\nconst main = () => {\n  const getTestsByActive = async (isTestActive: boolean): Promise<any> => {\n    try {\n      const tests = await Axios.get(\n        `http://localhost:4000/tests/getTest?active=${isTestActive}`\n      );\n      console.log(tests.data, \"recieved tests\");\n      return tests.data as ITest[];\n    } catch (error) {\n      alert(error);\n      return [];\n    }\n  };\n  const [hasEverythingFetched, setHasEverythingFetched] = useState<boolean>(\n    false\n  );\n  const [tests, setTests] = useState<{\n    activeTests: ITest[];\n    inActiveTests: ITest[];\n  }>({\n    activeTests: [],\n    inActiveTests: [],\n  });\n\n  const getAllTests = async () => {\n    setHasEverythingFetched(false);\n    const serverResponse = await Axios.get(`${devURL}tests/allTests`);\n    const data = serverResponse.data;\n    setHasEverythingFetched(true);\n    console.log(data);\n    let tmpactiveTests: Array<ITest> = [];\n    let tmpinActiveTests: Array<ITest> = [];\n    filterTests(tmpactiveTests, tmpinActiveTests, data);\n    setTests({\n      activeTests: tmpactiveTests,\n      inActiveTests: tmpinActiveTests,\n    });\n  };\n\n  const filterTests = (\n    activeTests: ITest[],\n    inActiveTests: ITest[],\n    arrToFilter: ITest[]\n  ) => {\n    arrToFilter.forEach((test: ITest) => {\n      if (test.active !== undefined) {\n        test.active ? activeTests.push(test) : inActiveTests.push(test);\n      }\n    });\n  };\n\n  const toggleTest = (testID: string) => {\n    let tmpActive = tests.activeTests;\n    let tmpInactive = tests.inActiveTests;\n    let combinedTests = [...tests.activeTests, ...tests.inActiveTests];\n\n    combinedTests.forEach((test: ITest) => {\n      if (test._id === testID) {\n        if (combinedTests.indexOf(test) < tmpActive.length) {\n          tmpActive.splice(tmpActive.indexOf(test), 1);\n          tmpInactive.push({\n            ...test,\n            active: !test.active,\n          });\n        } else {\n          tmpInactive.splice(tmpInactive.indexOf(test), 1);\n          tmpActive.push({\n            ...test,\n            active: !test.active,\n          });\n        }\n      }\n    });\n\n    setTests({\n      activeTests: tmpActive,\n      inActiveTests: tmpInactive,\n    });\n  };\n\n  useEffect(() => {\n    getAllTests();\n  }, []);\n\n  return (\n    <motion.div\n      className={styles.MainContainer}\n      variants={pageAppearance}\n      initial=\"hidden\"\n      animate=\"visible\"\n    >\n      <PleaseWaitModal isDisplayed={!hasEverythingFetched} />\n      <ActiveTests\n        // getActiveTests={getTestsByActive}\n        activeTests={tests.activeTests}\n        updateTheTests={toggleTest}\n        fetchAllTests={getAllTests}\n      />\n      <Gallery\n        // getInactiveTests={getTestsByActive}\n        testsToRender={tests.inActiveTests}\n        updateTheTests={toggleTest}\n        fetchAllTests={getAllTests}\n      />\n    </motion.div>\n  );\n};\n\nexport default main;\n"]},"metadata":{},"sourceType":"module"}