{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestCard.tsx\",\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport editIcon from \"../GAssets/create_icon_big.png\";\nimport styles from \"./styles/TestCard.module.scss\";\nimport Switch from \"react-switch\";\nimport Axios from \"axios\";\nimport { devURL } from \"./constants\";\n\nvar TestCard = function TestCard(props) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  var CardStyle = {\n    background: \"rgb(\".concat(props.colour, \")\")\n  };\n  console.log(props, \"card props\");\n\n  var _useState = useState(props.active),\n      isTestActive = _useState[0],\n      setIsTestActive = _useState[1];\n\n  useEffect(_s(function () {\n    _s();\n\n    setIsTestActive(props.active);\n    useForceUpdate();\n  }, \"alSQ9t+zv4znxzrqgfSJeHP1rEk=\", false, function () {\n    return [useForceUpdate];\n  }), []); // const [switchIsActive, setSwichIsActive] = useState<boolean>(props.active);\n\n  var _useState2 = useState(0),\n      value = _useState2[0],\n      setValue = _useState2[1]; // integer state\n\n\n  function useForceUpdate() {\n    return function () {\n      return setValue(function (value) {\n        return ++value;\n      });\n    }; // update the state to force render\n  }\n\n  var changeTestState = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(testID, isActive) {\n      var changedTest, responseFromServer;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return Axios.post(\"\".concat(devURL, \"tests/toggleTestActiveState\"), {\n                testID: testID,\n                isActive: isActive\n              });\n\n            case 3:\n              responseFromServer = _context.sent;\n              changedTest = responseFromServer.data; // setSwichIsActive(!switchIsActive);\n\n              setIsTestActive(changedTest.active);\n              console.log(changedTest, \"recieved a response\");\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n\n    return function changeTestState(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleActiveChange = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return changeTestState(props._id, !isTestActive);\n\n            case 2:\n              console.log(\"Calling all tests\");\n              setTimeout(function () {\n                props.updateTests(props._id);\n              }, 1000);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleActiveChange() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", {\n    key: props._id,\n    id: props._id,\n    className: styles.TestCard,\n    style: CardStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, __jsx(Switch, {\n    onChange: handleActiveChange,\n    checked: isTestActive,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), __jsx(\"img\", {\n    src: editIcon,\n    alt: \"Edit icon\",\n    className: styles.LookingGlass,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), __jsx(\"h1\", {\n    onClick: handleActiveChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, \"Test title in ru: \", props.nameInRu), __jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, \"Test id: \", props._id), __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, \"Main question of test\"));\n};\n\n_s2(TestCard, \"sFZ7V8JJ9JMKfNl9eBYOTyqKJ5o=\");\n\n_c = TestCard;\nexport default TestCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestCard\");","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestCard.tsx"],"names":["React","useEffect","useState","editIcon","styles","Switch","Axios","devURL","TestCard","props","CardStyle","background","colour","console","log","active","isTestActive","setIsTestActive","useForceUpdate","value","setValue","changeTestState","testID","isActive","post","responseFromServer","changedTest","data","error","handleActiveChange","_id","setTimeout","updateTests","LookingGlass","nameInRu"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport editIcon from \"../GAssets/create_icon_big.png\";\nimport styles from \"./styles/TestCard.module.scss\";\nimport Switch from \"react-switch\";\nimport Axios from \"axios\";\nimport { devURL } from \"./constants\";\nimport { ITest } from \"../@types/test\";\n\nconst TestCard = (props: {\n  iterator: number;\n  colour: string;\n  _id: string;\n  nameInRu: string;\n  active: boolean;\n  // parentComponentTestFetcher: () => Promise<void>;\n  // mainTestFetcher: () => Promise<void>;\n  updateTests: (testID: string) => void;\n}) => {\n  const CardStyle: Object = {\n    background: `rgb(${props.colour})`,\n  };\n\n  console.log(props, \"card props\");\n  const [isTestActive, setIsTestActive] = useState<boolean>(props.active);\n  useEffect(() => {\n    setIsTestActive(props.active);\n    useForceUpdate();\n  }, []);\n  // const [switchIsActive, setSwichIsActive] = useState<boolean>(props.active);\n\n  const [value, setValue] = useState(0); // integer state\n  function useForceUpdate() {\n    return () => setValue((value) => ++value); // update the state to force render\n  }\n\n  const changeTestState = async (testID: string, isActive: boolean) => {\n    let changedTest: ITest;\n    try {\n      const responseFromServer = await Axios.post(\n        `${devURL}tests/toggleTestActiveState`,\n        {\n          testID,\n          isActive,\n        }\n      );\n      changedTest = responseFromServer.data;\n      // setSwichIsActive(!switchIsActive);\n      setIsTestActive(changedTest.active);\n      console.log(changedTest, \"recieved a response\");\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleActiveChange = async () => {\n    // setIsActive(!isActive);\n    await changeTestState(props._id, !isTestActive);\n    console.log(\"Calling all tests\");\n    setTimeout(() => {\n      props.updateTests(props._id);\n    }, 1000);\n  };\n\n  return (\n    <div\n      key={props._id}\n      id={props._id}\n      className={styles.TestCard}\n      style={CardStyle}\n    >\n      <Switch onChange={handleActiveChange} checked={isTestActive} />\n      {/* \n      //! Need to figure out how to time the switch\n      */}\n      <img src={editIcon} alt=\"Edit icon\" className={styles.LookingGlass} />\n      <h1 onClick={handleActiveChange}>Test title in ru: {props.nameInRu}</h1>\n      <h2>Test id: {props._id}</h2>\n      <span>Main question of test</span>\n    </div>\n  );\n};\n\nexport default TestCard;\n"]},"metadata":{},"sourceType":"module"}