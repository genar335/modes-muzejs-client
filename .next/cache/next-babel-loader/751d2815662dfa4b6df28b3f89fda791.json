{"ast":null,"code":"var _jsxFileName = \"/Users/yberfox/Documents/personal-projects/modes-muzejs-client/components/QACard.tsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState } from \"react\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\nimport addCompStyles from \"./styles/TestNamer.module.scss\";\nimport { closeBtn, SaveBtn } from \"./TestNamer\";\nimport { productionURL, URLCheckForLocalHost } from \"./constants\";\nimport 'react-toastify/dist/ReactToastify.css'; // import { sendTheDataToTheServer } from \"./PhotoManager\";\n//\n//  const jwt = document.cookie.slice(document.cookie.indexOf('=') + 1);\n// Axios.defaults.headers.common[\"Authorization\"] =\n//\n\nimport Axios from \"axios\";\nimport ReactTooltip from \"react-tooltip\";\nimport { toast, ToastContainer } from \"react-toastify\";\n\nconst QACard = props => {\n  // useEffect(() => {\n  //   // Axios.defaults.headers.common[\"Authorization\"] =\n  //   //   \"Bearer \" + store.get(\"jwt\");\n  // }, []);\n  const charLimit = 90;\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false); // console.log(props.cardContents);\n  // console.log(\"Test for page contents\", props.pageContents);\n\n  const textPreviewer = text => {\n    // console.log(\"Hello from text preview\");\n    if (text.match(URLCheckForLocalHost) !== null) {\n      console.log(\"Hello there from URL checker\");\n      return \"There was an image before\";\n    }\n\n    if (text.length < 1) return __jsx(\"div\", {\n      className: compStyles.emptyText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 37\n      }\n    }, \"T\");\n\n    if (text.length > charLimit) {\n      return text.slice(0, 65) + \"...\";\n    } else {\n      return text;\n    }\n  };\n\n  const QACardRefIMG = useRef(null); // useEffect(() => {\n  //   console.log(\"Yayyy\");\n  // }, [QACardRef.current]);\n\n  const handleCardReference = () => {\n    props.setCurrentCard(QACardRefIMG); // props.togglePhotoManager(false, `${props.cardType}_${props.iterator}`);\n  }; //! Image upload portion\n  // const [recievedIMGLocations, setRecievedIMGLocation] = useState<\n  //   Array<string>\n  // >([]);\n\n\n  const {\n    0: readIMG,\n    1: setReadIMG\n  } = useState();\n  const fileInputRef = useRef(null);\n\n  const readAnImage = async imageToBeRead => {\n    console.log(imageToBeRead.size);\n    const tmpFileReader = new FileReader();\n    return new Promise((resolve, reject) => {\n      console.log(imageToBeRead.size);\n\n      if (imageToBeRead.size > 50000000) {\n        reject(new DOMException('File size is bigger than 50MB'));\n      }\n\n      tmpFileReader.onerror = () => {\n        tmpFileReader.abort();\n        reject(new DOMException(\"Problem occurred when reading the file.\"));\n      };\n\n      tmpFileReader.onload = () => {\n        if (tmpFileReader.result) resolve(tmpFileReader.result);\n      };\n\n      tmpFileReader.readAsDataURL(imageToBeRead);\n    });\n  };\n\n  const sendTheDataToTheServerToParse = async (file, fileName) => {\n    let fileLocation = \"\";\n\n    try {\n      console.log(\"Sending\", file);\n      const locationOfTheFile = await Axios.post(`${productionURL}tests/imgSaving`, // `${APIURL}tests/imgSaving`,\n      {\n        fileName,\n        fileContents: file\n      });\n      console.log(locationOfTheFile);\n      fileLocation = locationOfTheFile.data;\n    } catch (error) {\n      console.error(error);\n      alert(error);\n    }\n\n    return fileLocation;\n  };\n\n  const handleFileinput = async event => {\n    event.preventDefault();\n    const tmpCurrent = fileInputRef.current;\n    const files = tmpCurrent.files;\n\n    if (files !== null) {\n      const chosenFile = files[0];\n      console.log(chosenFile, 'hello');\n\n      if (chosenFile.size > 50000000) {\n        throw new DOMException('File size is bigger than 50MB');\n      }\n\n      if (fileInputRef.current) {\n        try {\n          const fileContents = await readAnImage(chosenFile);\n          setReadIMG(fileContents); // console.log(fileContents);\n\n          const fileLocationOnServer = await sendTheDataToTheServerToParse(fileContents, chosenFile.name);\n\n          if (fileLocationOnServer.length > 0) {\n            props.saveIMG(props.iterator, fileLocationOnServer, props.cardType);\n          } else {\n            props.saveIMG(props.iterator, fileContents, props.cardType);\n          } // console.log(QACardRefIMG.current!.src, \"OI\");\n\n        } catch (error) {\n          alert(\"There was an error reading the file. Please try again, or choose a differenet file\");\n          console.error(error);\n        }\n      }\n    } else {\n      alert(\"No file has been chosen.\");\n    } // const resp = await sendTheDataToTheServerToParse(\n    //   fileInputRef.current.files[0],\n    //   fileInputRef.current.files[0].name\n    // );\n    // console.log(resp);\n\n  };\n\n  const {\n    0: imgLocation,\n    1: setimgLocation\n  } = useState(\"\");\n\n  function handleFileinputChange(event) {\n    toast.dismiss();\n\n    if (event.target.files[0].size > 50000000) {\n      toast.error('File size is more than 50MB', {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      }); // throw new DOMException('File size is more that 50MB')\n      // alert('File size is more that 50MB')\n      // delete file;\n\n      fileInputRef.current.form.reset();\n      return;\n    } // console.log(event.target.files[0]);\n\n\n    const file = event.target.files[0] || new File([], \"err\");\n    console.log(file.size); // } else {\n\n    let fd = new FormData();\n    fd.append(\"image\", file);\n    console.log(fd.getAll(\"image\"));\n    console.log(\"heelooo\");\n    Axios.post(`${productionURL}tests/testimg`, fd, {\n      // Axios.post(`http://localhost:4000/api/quiz/tests/testimg`, fd, {\n      headers: {\n        \"content-type\": \"multipart/form-data\"\n      }\n    }).then(res => {\n      console.log(res);\n      setimgLocation(res.data);\n      props.saveIMG(props.iterator, res.data, props.cardType, \"all\");\n      toast.success('Image has been successfully uploaded');\n    }).catch(err => {\n      console.error(err);\n      fileInputRef.current.form.reset();\n      toast.error('Server has encountered an error');\n    }); // }\n  } // useEffect(() => {\n  //   console.log(\"Input has \", fileInputRef.current?.files);\n  // }, [fileInputRef.current]);\n\n\n  return __jsx(\"div\", {\n    className: `${compStyles[props.cardType]}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  }, __jsx(ToastContainer, {\n    position: \"top-right\",\n    autoClose: 5000,\n    hideProgressBar: false,\n    newestOnTop: false,\n    closeOnClick: true,\n    rtl: false,\n    pauseOnFocusLoss: true,\n    draggable: true,\n    pauseOnHover: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    // ref={QACardRef}\n    id: `${props.cardType}_${props.iterator}`,\n    className: `${addCompStyles.ModalContainerBG} ${!isOpen ? addCompStyles.Hidden : null}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: addCompStyles.ModalContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 17\n    }\n  }, closeBtn(setIsOpen), __jsx(\"div\", {\n    className: addCompStyles.Modal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    className: addCompStyles.NameForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 25\n    }\n  }, props.cardContents === \"text\" && props.q_a_TextEntry(props.cardType, props.iterator)), __jsx(\"button\", {\n    onClick: e => setIsOpen(!isOpen),\n    className: addCompStyles.SaveBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 25\n    }\n  }, SaveBtn())))), __jsx(\"div\", {\n    className: compStyles.QADescription,\n    onClick: e => {\n      props.cardContents === \"img\" ? handleCardReference() : setIsOpen(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }\n  }, props.cardContents === \"text\" ? __jsx(\"p\", {\n    className: compStyles.textInACard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 21\n    }\n  }, textPreviewer(props.qna[props.cardType])) : __jsx(\"form\", {\n    onSubmit: handleFileinput,\n    className: compStyles.IMGForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 21\n    }\n  }, props.pageContents.match(URLCheckForLocalHost) !== null ? __jsx(\"img\", {\n    id: `${props.cardType}_${props.iterator}_page-${props.pageNumber}` // onChange={(e) => console.log(\"YAyyy\")}\n    ,\n    className: compStyles.SelectedIMGPreview // src={/* imgLocation || */ props.pageContents}\n    ,\n    src: // props.pageContents.match(URLCheckForLocalHost) !== null\n    props.pageContents // : \"\"\n    ,\n    alt: \"Click here to select the image Width: 245px Height: 245px Aspect ratio: ~ 1:1\",\n    ref: QACardRefIMG,\n    onClick: e => fileInputRef.current.click(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 29\n    }\n  }) : __jsx(React.Fragment, null, __jsx(\"span\", {\n    onClick: e => fileInputRef.current.click(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 33\n    }\n  }, __jsx(\"p\", {\n    \"data-tip\": true,\n    \"data-for\": \"image-size-guidelines\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 34\n    }\n  }, \"?\")), __jsx(ReactTooltip, {\n    id: \"image-size-guidelines\",\n    place: \"top\",\n    type: \"dark\",\n    effect: \"float\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 33\n    }\n  }, __jsx(\"p\", {\n    style: {\n      fontSize: '1rem',\n      marginTop: '0.5rem',\n      marginBottom: '0.5rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 37\n    }\n  }, \"Click here to select the image\"), __jsx(\"p\", {\n    style: {\n      fontSize: '1rem',\n      marginBottom: '0.5rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 37\n    }\n  }, \"Maximum image size: 50MB\"), __jsx(\"p\", {\n    style: {\n      fontSize: '1rem',\n      marginBottom: '0.5rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 37\n    }\n  }, \"Recommended width: 245px\"), __jsx(\"p\", {\n    style: {\n      fontSize: '1rem',\n      marginBottom: '0.5rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 37\n    }\n  }, \"Recommended height: 245px\"), __jsx(\"p\", {\n    style: {\n      fontSize: '1rem',\n      marginBottom: '0.5rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 37\n    }\n  }, \"Aspect ratio: ~ 1:1\"))), __jsx(\"input\", {\n    className: compStyles.FileChooser,\n    style: {\n      display: \"none\"\n    },\n    type: \"file\",\n    accept: \"image/*\",\n    ref: fileInputRef,\n    onChange: handleFileinputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 25\n    }\n  }))));\n};\n\nexport default QACard;","map":{"version":3,"sources":["/Users/yberfox/Documents/personal-projects/modes-muzejs-client/components/QACard.tsx"],"names":["React","useRef","useState","compStyles","addCompStyles","closeBtn","SaveBtn","productionURL","URLCheckForLocalHost","Axios","ReactTooltip","toast","ToastContainer","QACard","props","charLimit","isOpen","setIsOpen","textPreviewer","text","match","console","log","length","emptyText","slice","QACardRefIMG","handleCardReference","setCurrentCard","readIMG","setReadIMG","fileInputRef","readAnImage","imageToBeRead","size","tmpFileReader","FileReader","Promise","resolve","reject","DOMException","onerror","abort","onload","result","readAsDataURL","sendTheDataToTheServerToParse","file","fileName","fileLocation","locationOfTheFile","post","fileContents","data","error","alert","handleFileinput","event","preventDefault","tmpCurrent","current","files","chosenFile","fileLocationOnServer","name","saveIMG","iterator","cardType","imgLocation","setimgLocation","handleFileinputChange","dismiss","target","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","form","reset","File","fd","FormData","append","getAll","headers","then","res","success","catch","err","ModalContainerBG","Hidden","ModalContainer","Modal","NameForm","cardContents","q_a_TextEntry","e","QADescription","textInACard","qna","IMGForm","pageContents","pageNumber","SelectedIMGPreview","click","fontSize","marginTop","marginBottom","FileChooser","display"],"mappings":"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","sourcesContent":["import React, {useRef, useState} from \"react\";\nimport {IQnA, TLangOption} from \"../@types/test\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\nimport addCompStyles from \"./styles/TestNamer.module.scss\";\nimport {closeBtn, SaveBtn} from \"./TestNamer\";\nimport {APIURL, productionURL, URLCheckForLocalHost,} from \"./constants\";\nimport 'react-toastify/dist/ReactToastify.css';\n\n\n// import { sendTheDataToTheServer } from \"./PhotoManager\";\n//\n//  const jwt = document.cookie.slice(document.cookie.indexOf('=') + 1);\n// Axios.defaults.headers.common[\"Authorization\"] =\n//\nimport Axios from \"axios\";\nimport ReactTooltip from \"react-tooltip\";\nimport {toast, ToastContainer} from \"react-toastify\";\n\nconst QACard = (props: {\n    cardType: \"answer\" | \"question\";\n    cardContents: \"img\" | \"text\";\n    // saveData: (data) => void;\n    iterator: number;\n    setSelectedLanguage: (chooseLanguage: TLangOption[\"value\"]) => void;\n    inputEnabler: () => void;\n    qna: IQnA;\n    testType: any;\n    q_a_TextEntry: (type: \"answer\" | \"question\", id: number) => JSX.Element;\n    togglePhotoManager: (toggle: boolean, cardID: string) => void;\n    setCurrentCard: React.Dispatch<React.SetStateAction<undefined>>;\n    pageContents: string;\n    currentLang: TLangOption[\"value\"];\n    pageNumber: number;\n    saveIMG: (\n        qid: number,\n        data: string,\n        whatToSave: \"answer\" | \"question\",\n        langSetting?: \"all\" | TLangOption[\"value\"]\n    ) => void;\n}) => {\n    // useEffect(() => {\n    //   // Axios.defaults.headers.common[\"Authorization\"] =\n    //   //   \"Bearer \" + store.get(\"jwt\");\n    // }, []);\n    const charLimit = 90;\n    const [isOpen, setIsOpen] = useState(false);\n    // console.log(props.cardContents);\n    // console.log(\"Test for page contents\", props.pageContents);\n\n    const textPreviewer = (text: string) => {\n        // console.log(\"Hello from text preview\");\n        if (text.match(URLCheckForLocalHost) !== null) {\n            console.log(\"Hello there from URL checker\");\n            return \"There was an image before\";\n        }\n        if (text.length < 1) return <div className={compStyles.emptyText}>T</div>;\n        if (text.length > charLimit) {\n            return text.slice(0, 65) + \"...\";\n        } else {\n            return text;\n        }\n    };\n\n    const QACardRefIMG = useRef(null);\n\n    // useEffect(() => {\n    //   console.log(\"Yayyy\");\n    // }, [QACardRef.current]);\n\n    const handleCardReference = () => {\n        props.setCurrentCard(QACardRefIMG as any);\n        // props.togglePhotoManager(false, `${props.cardType}_${props.iterator}`);\n    };\n\n    //! Image upload portion\n\n    // const [recievedIMGLocations, setRecievedIMGLocation] = useState<\n    //   Array<string>\n    // >([]);\n    const [readIMG, setReadIMG] = useState<string>();\n    const fileInputRef = useRef<HTMLInputElement>(null);\n\n    const readAnImage = async (imageToBeRead: Blob) => {\n        console.log(imageToBeRead.size)\n\n        const tmpFileReader: FileReader = new FileReader();\n\n        return new Promise((resolve, reject) => {\n            console.log(imageToBeRead.size)\n            if (imageToBeRead.size > 50_000_000) {\n                reject(new DOMException('File size is bigger than 50MB'))\n            }\n            tmpFileReader.onerror = () => {\n                tmpFileReader.abort();\n                reject(new DOMException(\"Problem occurred when reading the file.\"));\n            };\n\n            tmpFileReader.onload = () => {\n                if (tmpFileReader.result)\n                resolve(tmpFileReader.result);\n            };\n            tmpFileReader.readAsDataURL(imageToBeRead);\n        });\n    };\n\n    const sendTheDataToTheServerToParse = async (\n        file: string,\n        fileName: string\n    ) => {\n        let fileLocation: string = \"\";\n        try {\n            console.log(\"Sending\", file);\n            const locationOfTheFile = await Axios.post(\n                `${productionURL}tests/imgSaving`,\n                // `${APIURL}tests/imgSaving`,\n                {\n                    fileName,\n                    fileContents: file,\n                }\n            );\n            console.log(locationOfTheFile);\n            fileLocation = locationOfTheFile.data;\n        } catch (error) {\n            console.error(error);\n            alert(error);\n        }\n        return fileLocation;\n    };\n\n    const handleFileinput = async (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const tmpCurrent = fileInputRef.current!;\n        const files = tmpCurrent.files;\n        if (files !== null) {\n            const chosenFile: File = files[0] as File;\n            console.log(chosenFile, 'hello');\n            if(chosenFile.size > 50_000_000) {\n                throw new DOMException('File size is bigger than 50MB')\n            }\n            if (fileInputRef.current) {\n                try {\n                    const fileContents: string = (await readAnImage(\n                        chosenFile\n                    )) as string;\n                    setReadIMG(fileContents);\n                    // console.log(fileContents);\n                    const fileLocationOnServer = await sendTheDataToTheServerToParse(\n                        fileContents,\n                        chosenFile.name\n                    );\n                    if (fileLocationOnServer.length > 0) {\n                        props.saveIMG(props.iterator, fileLocationOnServer, props.cardType);\n                    } else {\n                        props.saveIMG(props.iterator, fileContents, props.cardType);\n                    }\n                    // console.log(QACardRefIMG.current!.src, \"OI\");\n                } catch (error) {\n                    alert(\n                        \"There was an error reading the file. Please try again, or choose a differenet file\"\n                    );\n                    console.error(error);\n                }\n            }\n        } else {\n            alert(\"No file has been chosen.\");\n        }\n\n        // const resp = await sendTheDataToTheServerToParse(\n        //   fileInputRef.current.files[0],\n        //   fileInputRef.current.files[0].name\n        // );\n        // console.log(resp);\n    };\n\n    const [imgLocation, setimgLocation] = useState(\"\");\n\n    function handleFileinputChange(event: React.ChangeEvent<HTMLInputElement>) {\n        toast.dismiss()\n        if (event!.target!.files![0].size > 50_000_000) {\n            toast.error('File size is more than 50MB', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n            });\n            // throw new DOMException('File size is more that 50MB')\n            // alert('File size is more that 50MB')\n            // delete file;\n            fileInputRef.current!.form!.reset()\n            return;\n        }\n        // console.log(event.target.files[0]);\n        const file = event!.target!.files![0] || new File([], \"err\");\n        console.log(file.size)\n        // } else {\n            let fd = new FormData();\n            fd.append(\"image\", file);\n            console.log(fd.getAll(\"image\"));\n            console.log(\"heelooo\")\n            Axios.post(`${productionURL}tests/testimg`, fd, {\n                // Axios.post(`http://localhost:4000/api/quiz/tests/testimg`, fd, {\n                headers: {\n                    \"content-type\": \"multipart/form-data\",\n                },\n            })\n                .then((res) => {\n                    console.log(res);\n                    setimgLocation(res.data);\n                    props.saveIMG(props.iterator, res.data, props.cardType, \"all\");\n                    toast.success('Image has been successfully uploaded')\n                })\n                .catch((err) => {\n                    console.error(err)\n                    fileInputRef.current!.form!.reset()\n                    toast.error('Server has encountered an error')\n                });\n        // }\n    }\n\n    // useEffect(() => {\n    //   console.log(\"Input has \", fileInputRef.current?.files);\n    // }, [fileInputRef.current]);\n\n    return (\n        <div className={`${compStyles[props.cardType]}`}>\n            {/*<div style={{*/}\n            {/*    position: 'absolute',*/}\n            {/*    width: '30vw',*/}\n            {/*    height: '30vh',*/}\n            {/*    top: 0,*/}\n            {/*    right: 0,*/}\n            {/*    pointerEvents: 'none'*/}\n            {/*}}>*/}\n\n            <ToastContainer\n                position=\"top-right\"\n                autoClose={5000}\n                hideProgressBar={false}\n                newestOnTop={false}\n                closeOnClick\n                rtl={false}\n                pauseOnFocusLoss\n                draggable\n                pauseOnHover\n            />\n            {/*</div>*/}\n            <div\n                // ref={QACardRef}\n                id={`${props.cardType}_${props.iterator}`}\n                className={`${addCompStyles.ModalContainerBG} ${\n                    !isOpen ? addCompStyles.Hidden : null\n                }`}\n            >\n                <div className={addCompStyles.ModalContainer}>\n                    {closeBtn(setIsOpen)}\n                    <div className={addCompStyles.Modal}>\n                        {/* {CreateLangSwitchers(\n              props.setSelectedLanguage,\n              props.inputEnabler,\n              props.currentLang\n            )} */}\n                        <div className={addCompStyles.NameForm}>\n                            {props.cardContents === \"text\" &&\n                                props.q_a_TextEntry(props.cardType, props.iterator)}\n                        </div>\n                        <button\n                            onClick={(e) => setIsOpen(!isOpen)}\n                            className={addCompStyles.SaveBtn}\n                        >\n                            {SaveBtn()}\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div\n                className={compStyles.QADescription}\n                onClick={(e) => {\n                    props.cardContents === \"img\"\n                        ? handleCardReference()\n                        : setIsOpen(true);\n                }}\n            >\n                {props.cardContents === \"text\" ? (\n                    <p className={compStyles.textInACard}>\n                        {textPreviewer(props.qna[props.cardType])}\n                    </p>\n                ) : (\n                    <form onSubmit={handleFileinput} className={compStyles.IMGForm}>\n                        {props.pageContents.match(URLCheckForLocalHost) !== null ? (\n                            <img\n                                id={`${props.cardType}_${props.iterator}_page-${props.pageNumber}`}\n                                // onChange={(e) => console.log(\"YAyyy\")}\n                                className={compStyles.SelectedIMGPreview}\n                                // src={/* imgLocation || */ props.pageContents}\n                                src={\n                                    // props.pageContents.match(URLCheckForLocalHost) !== null\n                                    props.pageContents\n                                    // : \"\"\n                                }\n                                alt=\"Click here to select the image\n                                Width: 245px\n                                Height: 245px\n                                Aspect ratio: ~ 1:1\"\n                                ref={QACardRefIMG}\n                                onClick={(e) => fileInputRef!.current!.click()}\n                            />) : (<>\n                                {/*<span><p>?</p></span>*/}\n                                <span\n                                    onClick={(e) => fileInputRef!.current!.click()}\n                                ><p data-tip data-for={\"image-size-guidelines\"}>?</p></span>\n                                <ReactTooltip id=\"image-size-guidelines\" place=\"top\" type=\"dark\" effect=\"float\">\n                                    <p style={{\n                                        fontSize: '1rem',\n                                        marginTop: '0.5rem',\n                                        marginBottom: '0.5rem',\n                                    }}>Click here to select the image</p>\n                                    <p style={{\n                                        fontSize: '1rem',\n                                        marginBottom: '0.5rem',\n                                    }}>Maximum image size: 50MB</p>\n                                    <p style={{\n                                        fontSize: '1rem',\n                                        marginBottom: '0.5rem',\n                                    }}>Recommended width: 245px</p>\n                                    <p style={{\n                                        fontSize: '1rem',\n                                        marginBottom: '0.5rem',\n                                    }}>Recommended height: 245px</p>\n                                    <p style={{\n                                        fontSize: '1rem',\n                                        marginBottom: '0.5rem',\n                                    }}>Aspect ratio: ~ 1:1</p>\n                                </ReactTooltip>\n                            </>\n                        )}\n                        <input\n                            className={compStyles.FileChooser}\n                            style={{display: \"none\"}}\n                            type=\"file\"\n                            accept=\"image/*\"\n                            ref={fileInputRef}\n                            onChange={handleFileinputChange}\n                        />\n                        {/* <input\n              className={compStyles.FileSubmiter}\n              type=\"submit\"\n              value=\"Upload the image\"\n            /> */}\n                    </form>\n                )}\n            </div>\n        </div>\n    );\n};\nexport default QACard;\n"]},"metadata":{},"sourceType":"module"}