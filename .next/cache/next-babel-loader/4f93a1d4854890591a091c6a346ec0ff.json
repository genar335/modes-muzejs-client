{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestPreview.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\nimport addCompStyles from \"./styles/TestNamer.module.scss\";\nimport { closeBtn, CreateLangSwitchers } from \"./TestNamer\";\nimport QACard from \"./QACard\";\n\nvar TestPreview = function TestPreview(props) {\n  _s();\n\n  var _useState = useState(false),\n      isQOpen = _useState[0],\n      setisQOpen = _useState[1];\n\n  var _useState2 = useState(false),\n      isAOpen = _useState2[0],\n      setisAOpen = _useState2[1];\n\n  var _useState3 = useState(\"ru\"),\n      selectedLang = _useState3[0],\n      setSelectedLang = _useState3[1];\n\n  var setSelectedLanguage = function setSelectedLanguage(chooseLanguage) {\n    setSelectedLang(chooseLanguage);\n    props.setCurrentLang(chooseLanguage);\n  };\n\n  var inputEnabler = function inputEnabler() {};\n\n  console.log(props.pageToRender);\n  props.pageToRender.map(function (ele) {\n    return console.log(ele.question);\n  });\n  var tmp = props.pageToRender;\n\n  var saveNewData = function saveNewData(qid, data, whatToSave) {\n    console.log(\"from data saving\", qid);\n    tmp[qid][whatToSave] = data; // console.log(tmp[qid][whatToSave]);\n    // console.log(\"from save new data\", tmp);\n\n    props.saveChanges(tmp);\n  };\n\n  var handleQuestionKeyPress = function handleQuestionKeyPress(event) {\n    event.key === \"Enter\" ? console.log(\"Efnter\") : undefined;\n  };\n\n  function textQuestion(iterator, // handleQuestionChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void,\n  qna) {\n    return __jsx(\"textarea\", {\n      defaultValue: \"Enter your text\",\n      id: String(iterator),\n      onChange: handleQuestionChange,\n      className: compStyles.Question,\n      onKeyPress: handleQuestionKeyPress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    });\n  }\n\n  function imgQuestion(iterator, // handleQuestionChange: (\n  // event: React.ChangeEvent<HTMLTextAreaElement>\n  // ) => void,\n  qna) {\n    return __jsx(\"div\", {\n      id: String(iterator),\n      className: compStyles.Question,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, \"\\uFF0B\"));\n  }\n\n  var handleAnswerChange = function handleAnswerChange(event) {\n    saveNewData(event.currentTarget.id, event.currentTarget.value, \"answer\");\n  };\n\n  function textAnswer(iterator, qna) {\n    // const [curValue, setCurValue] = useState(\"\");\n    // useEffect(() => {\n    //   console.log(curValue);\n    // }, [curValue]);\n    return __jsx(\"textarea\", {\n      // defaultValue={\"Enter your text\"}\n      id: String(iterator),\n      onChange: function onChange(e) {\n        handleAnswerChange(e); // setCurValue(e.currentTarget.value);\n      },\n      className: compStyles.Answer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }\n    }, qna.answer);\n  }\n\n  function imgAnswer(iterator, // handleQuestionChange: (\n  //   event: React.ChangeEvent<HTMLTextAreaElement>\n  // ) => void,\n  qna) {\n    return __jsx(\"div\", {\n      id: String(iterator),\n      className: compStyles.Question,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }, \"\\uFF0B\"));\n  }\n\n  var handleQuestionChange = function handleQuestionChange(event) {\n    console.log(\"\".concat(event.currentTarget.id, \":\"), event.currentTarget.value);\n    saveNewData(event.currentTarget.id, event.currentTarget.value, \"question\");\n  };\n\n  var textPreviewer = function textPreviewer(text) {\n    return text.slice(0, 90) + \"...\";\n  };\n\n  var handleModalOpening = function handleModalOpening(event) {\n    if (event.currentTarget.classList.contains(compStyles.question)) {\n      var tmpModalsArray = Array.from(document.getElementsByClassName(addCompStyles.ModalContainerBG));\n      tmpModalsArray.forEach(function (modal) {\n        if (modal.id !== event.currentTarget.id) {\n          modal.classList.add(compStyles.HideModal);\n        } else {\n          modal.classList.remove(compStyles.HideModal);\n        }\n      });\n      console.log(tmpModalsArray);\n      setisQOpen(true);\n    }\n  };\n\n  var pageBody = function pageBody() {\n    return props.pageToRender.map(function (qna, iterator) {\n      return __jsx(\"div\", {\n        key: iterator,\n        id: String(iterator),\n        className: compStyles.qnaPair,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 7\n        }\n      },\n      /* For question rendering */\n      __jsx(\"div\", {\n        id: String(iterator),\n        className: \"\".concat(addCompStyles.ModalContainerBG, \" \").concat(!isQOpen ? addCompStyles.Hidden : null),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }\n      }, __jsx(\"div\", {\n        className: addCompStyles.ModalContainer,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }\n      }, closeBtn(setisQOpen), __jsx(\"div\", {\n        className: addCompStyles.Modal,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 15\n        }\n      }, CreateLangSwitchers(setSelectedLanguage, inputEnabler), __jsx(\"div\", {\n        className: addCompStyles.NameForm,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 17\n        }\n      }, props.testType === \"TT\" ? q_a_TextEntry(\"question\", iterator) : null)))), __jsx(\"span\", {\n        id: String(iterator),\n        className: compStyles.question,\n        onClick: handleModalOpening,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 9\n        }\n      }, textPreviewer(qna.question)), __jsx(QACard, {\n        cardType: \"answer\",\n        cardContents: \"text\",\n        iterator: iterator,\n        setSelectedLanguage: setSelectedLanguage,\n        inputEnabler: inputEnabler,\n        qna: qna,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 9\n        }\n      }));\n    });\n  };\n\n  props.testType === \"\" ? console.log(\"no test type\") : console.log(props.testType);\n  return __jsx(\"div\", {\n    className: styles.TestPreview,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }\n  }, \"Page: \", props.activePage + 1), __jsx(\"div\", {\n    className: \"\".concat(compStyles.TestBGContainer),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }\n  }, __jsx(FMLogo, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: compStyles.pageBody,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  }, props.testType === \"\" ? __jsx(\"div\", {\n    className: compStyles.tTypeWarning,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 15\n    }\n  }, \"Please choose a test type\")) : pageBody())));\n};\n\n_s(TestPreview, \"Qx3nyvlWQFOKRZdBKNWWScfqKHA=\");\n\n_c = TestPreview;\nexport default TestPreview;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestPreview\");","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestPreview.tsx"],"names":["React","useState","styles","FMLogo","compStyles","addCompStyles","closeBtn","CreateLangSwitchers","QACard","TestPreview","props","isQOpen","setisQOpen","isAOpen","setisAOpen","selectedLang","setSelectedLang","setSelectedLanguage","chooseLanguage","setCurrentLang","inputEnabler","console","log","pageToRender","map","ele","question","tmp","saveNewData","qid","data","whatToSave","saveChanges","handleQuestionKeyPress","event","key","undefined","textQuestion","iterator","qna","String","handleQuestionChange","Question","imgQuestion","handleAnswerChange","currentTarget","id","value","textAnswer","e","Answer","answer","imgAnswer","textPreviewer","text","slice","handleModalOpening","classList","contains","tmpModalsArray","Array","from","document","getElementsByClassName","ModalContainerBG","forEach","modal","add","HideModal","remove","pageBody","qnaPair","Hidden","ModalContainer","Modal","NameForm","testType","q_a_TextEntry","activePage","TestBGContainer","tTypeWarning"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  ILangSpecificBody,\n  IQnA,\n  IQnAPairs,\n  ITest,\n  TLangOption,\n  TTestTypes,\n} from \"../@types/test\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\nimport addCompStyles from \"./styles/TestNamer.module.scss\";\nimport { closeBtn, CreateLangSwitchers } from \"./TestNamer\";\nimport QACard from \"./QACard\";\n\nconst TestPreview = (props: {\n  activePage: number;\n  currentLanguage: TLangOption[\"value\"] | undefined;\n  // currentTestState: ITest;\n  pageToRender: IQnA[];\n  setCurrentLang: (lang: TLangOption[\"value\"]) => void;\n  testType: ITest[\"type\"];\n  saveChanges: (page: any) => void;\n}) => {\n  const [isQOpen, setisQOpen] = useState(false);\n  const [isAOpen, setisAOpen] = useState(false);\n  const [selectedLang, setSelectedLang] = useState<TLangOption[\"value\"]>(\"ru\");\n  const setSelectedLanguage = (chooseLanguage: TLangOption[\"value\"]): void => {\n    setSelectedLang(chooseLanguage);\n    props.setCurrentLang(chooseLanguage);\n  };\n  const inputEnabler = () => {};\n\n  console.log(props.pageToRender);\n  props.pageToRender.map((ele) => console.log(ele.question));\n\n  let tmp = props.pageToRender;\n\n  const saveNewData = (\n    qid: number,\n    data: string,\n    whatToSave: \"answer\" | \"question\"\n  ) => {\n    console.log(\"from data saving\", qid);\n    tmp[qid][whatToSave] = data;\n    // console.log(tmp[qid][whatToSave]);\n    // console.log(\"from save new data\", tmp);\n    props.saveChanges(tmp);\n  };\n\n  const handleQuestionKeyPress = (\n    event: React.KeyboardEvent<HTMLTextAreaElement>\n  ) => {\n    event.key === \"Enter\" ? console.log(\"Efnter\") : undefined;\n  };\n\n  function textQuestion(\n    iterator: number,\n    // handleQuestionChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void,\n    qna: IQnA\n  ) {\n    return (\n      <textarea\n        defaultValue={\"Enter your text\"}\n        id={String(iterator)}\n        onChange={handleQuestionChange}\n        className={compStyles.Question}\n        onKeyPress={handleQuestionKeyPress}\n      >\n        {/* {qna.question} */}\n      </textarea>\n    );\n  }\n  function imgQuestion(\n    iterator: number,\n    // handleQuestionChange: (\n    // event: React.ChangeEvent<HTMLTextAreaElement>\n    // ) => void,\n    qna: IQnA\n  ) {\n    return (\n      <div id={String(iterator)} className={compStyles.Question}>\n        <span>＋</span>\n      </div>\n    );\n  }\n\n  const handleAnswerChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    saveNewData(event.currentTarget.id, event.currentTarget.value, \"answer\");\n  };\n\n  function textAnswer(iterator: number, qna: IQnA) {\n    // const [curValue, setCurValue] = useState(\"\");\n\n    // useEffect(() => {\n    //   console.log(curValue);\n    // }, [curValue]);\n\n    return (\n      <textarea\n        // defaultValue={\"Enter your text\"}\n        id={String(iterator)}\n        onChange={(e) => {\n          handleAnswerChange(e);\n          // setCurValue(e.currentTarget.value);\n        }}\n        className={compStyles.Answer}\n      >\n        {qna.answer}\n      </textarea>\n    );\n  }\n\n  function imgAnswer(\n    iterator: number,\n    // handleQuestionChange: (\n    //   event: React.ChangeEvent<HTMLTextAreaElement>\n    // ) => void,\n    qna: IQnA\n  ) {\n    return (\n      <div id={String(iterator)} className={compStyles.Question}>\n        <span>＋</span>\n      </div>\n    );\n  }\n\n  \n\n  const handleQuestionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    console.log(`${event.currentTarget.id}:`, event.currentTarget.value);\n    saveNewData(event.currentTarget.id, event.currentTarget.value, \"question\");\n  };\n\n  const textPreviewer = (text: string) => {\n    return text.slice(0, 90) + \"...\";\n  };\n\n  const handleModalOpening = (\n    event: React.MouseEvent<HTMLSpanElement, MouseEvent>\n  ) => {\n    if (event.currentTarget.classList.contains(compStyles.question)) {\n      let tmpModalsArray = Array.from(\n        document.getElementsByClassName(addCompStyles.ModalContainerBG)\n      );\n      tmpModalsArray.forEach((modal) => {\n        if (modal.id !== event.currentTarget.id) {\n          modal.classList.add(compStyles.HideModal);\n        } else {\n          modal.classList.remove(compStyles.HideModal);\n        }\n      });\n      console.log(tmpModalsArray);\n      setisQOpen(true);\n    }\n  };\n\n  const pageBody = () =>\n    props.pageToRender.map((qna: IQnA, iterator: number) => (\n      <div key={iterator} id={String(iterator)} className={compStyles.qnaPair}>\n        {\n          /* For question rendering */\n\n          <div\n            id={String(iterator)}\n            className={`${addCompStyles.ModalContainerBG} ${\n              !isQOpen ? addCompStyles.Hidden : null\n            }`}\n          >\n            <div className={addCompStyles.ModalContainer}>\n              {closeBtn(setisQOpen)}\n              <div className={addCompStyles.Modal}>\n                {CreateLangSwitchers(setSelectedLanguage, inputEnabler)}\n                <div className={addCompStyles.NameForm}>\n                  {props.testType === \"TT\"\n                    ? q_a_TextEntry(\"question\", iterator)\n                    : null}\n                </div>\n              </div>\n            </div>\n          </div>\n        }\n        <span\n          id={String(iterator)}\n          className={compStyles.question}\n          onClick={handleModalOpening}\n        >\n          {textPreviewer(qna.question)}\n        </span>\n        {/* For answer rendering */}\n        {/* <div className=\"tmpContainer\">\n          <div\n            id={String(iterator)}\n            className={`${addCompStyles.ModalContainerBG} ${\n              !isAOpen ? addCompStyles.Hidden : null\n            }`}\n          >\n            <div className={addCompStyles.ModalContainer}>\n              {closeBtn(setisAOpen)}\n              <div className={addCompStyles.Modal}>\n                {CreateLangSwitchers(setSelectedLanguage, inputEnabler)}\n                <div className={addCompStyles.NameForm}>\n                  {props.testType === \"TT\"\n                    ? q_a_TextEntry(\"answer\", iterator)\n                    : null}\n                </div>\n              </div>\n            </div>\n          </div>\n          <span className={compStyles.answer} onClick={(e) => setisAOpen(true)}>\n            {textPreviewer(qna.answer)}\n          </span>\n        </div> */}\n        <QACard \n        cardType=\"answer\"\n        cardContents='text'\n        iterator={iterator}\n        setSelectedLanguage={setSelectedLanguage}\n        inputEnabler={inputEnabler}\n        qna={qna}\n        />\n      </div>\n    ));\n\n  props.testType === \"\"\n    ? console.log(\"no test type\")\n    : console.log(props.testType);\n\n  return (\n    <div className={styles.TestPreview}>\n      <h3>Page: {props.activePage + 1}</h3>\n\n      <div className={`${compStyles.TestBGContainer}`}>\n        <FMLogo />\n        <div className={compStyles.pageBody}>\n          {props.testType === \"\" ? (\n            <div className={compStyles.tTypeWarning}>\n              <h1>Please choose a test type</h1>\n            </div>\n          ) : (\n            pageBody()\n          )}\n          {/* {pageBody()} */}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TestPreview;\n"]},"metadata":{},"sourceType":"module"}