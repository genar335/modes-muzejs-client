{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/LangBtnController.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport LanguageBtn from \"./LanguageBtn\";\nimport compStyle from \"./styles/LangBtnController.module.scss\";\n\nvar LangBtnController = function LangBtnController(props) {\n  _s();\n\n  var _useState = useState(),\n      activeBtnPosition = _useState[0],\n      setActiveBtnPosition = _useState[1];\n\n  var _useState2 = useState([]),\n      flatBtns = _useState2[0],\n      setFlatBtns = _useState2[1];\n\n  console.log(activeBtnPosition);\n  var forceUpdate = React.useReducer(function () {\n    return {};\n  }, {})[1];\n\n  function activeBtnSwitcher(Btns) {\n    var flatBtns = Btns.flat().filter(function (ele) {\n      return typeof ele != \"object\";\n    });\n    setFlatBtns(flatBtns);\n    console.log(flatBtns);\n    setActiveBtnPosition(flatBtns.indexOf(true));\n    flatBtns.pop();\n\n    if (activeBtnPosition == flatBtns.length) {\n      flatBtns.unshift(true);\n    } else {\n      flatBtns.unshift(false);\n    }\n\n    console.log(flatBtns, \"after manipulation\");\n    Btns.forEach(function (btn, index) {\n      return btn[1] = flatBtns[index];\n    });\n    forceUpdate();\n  }\n\n  useEffect(function () {\n    console.log(\"Heello from arrow\");\n    Btns.forEach(function (button, index) {// button[1] = flatBtns\n    });\n  }, [activeBtnPosition]);\n\n  var _useState3 = useState(props.active),\n      activeBtn = _useState3[0],\n      setActiveBtn = _useState3[1];\n  /**\n   * Sets currently active button.\n   * @param id of a button\n   */\n\n\n  var activeBtnSetter = function activeBtnSetter(id) {\n    return setActiveBtn(id);\n  };\n\n  var handleArrowClick = function handleArrowClick() {\n    activeBtnSwitcher(Btns);\n    console.log(Btns);\n  };\n\n  var arrowBtn;\n  useEffect(function () {\n    var _arrowBtn;\n\n    console.log(document.getElementById(\"arrowButton\"), \"found it\");\n    arrowBtn = document.getElementById(\"arrowButton\");\n    (_arrowBtn = arrowBtn) === null || _arrowBtn === void 0 ? void 0 : _arrowBtn.addEventListener(\"click\", handleArrowClick);\n    return function () {\n      var _arrowBtn2;\n\n      return (_arrowBtn2 = arrowBtn) === null || _arrowBtn2 === void 0 ? void 0 : _arrowBtn2.removeEventListener(\"click\", handleArrowClick);\n    };\n  }); // * Cleans other buttons from the pressed class.\n\n  useEffect(function () {\n    Btns.forEach(function (button) {\n      console.log(button[0].props.btnID);\n\n      if (button[0].props.btnID !== activeBtn) {\n        button[1] = false;\n      }\n    });\n    console.log(Btns);\n  }, []);\n  var Btns = props.BtnArray.map(function (button, key) {\n    return [__jsx(LanguageBtn, {\n      btnID: button,\n      btnText: button.toUpperCase(),\n      handleBtnClick: props.clickHandler,\n      inputEnabler: props.setIsNameEntryEnabled,\n      pressed: button === activeBtn ? true : false,\n      key: key,\n      langSelect: props.langSelector,\n      setActiveBtn: activeBtnSetter,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }), button === activeBtn ? true : false];\n  });\n  return __jsx(\"div\", {\n    className: compStyle.LangSelect,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, Btns.map(function (ele) {\n    return ele;\n  }));\n};\n\n_s(LangBtnController, \"p/aPYWTLq2j/Y94BLG7+/4dGRBg=\");\n\n_c = LangBtnController;\nexport default LangBtnController;\n\nvar _c;\n\n$RefreshReg$(_c, \"LangBtnController\");","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/LangBtnController.tsx"],"names":["React","useEffect","useState","LanguageBtn","compStyle","LangBtnController","props","activeBtnPosition","setActiveBtnPosition","flatBtns","setFlatBtns","console","log","forceUpdate","useReducer","activeBtnSwitcher","Btns","flat","filter","ele","indexOf","pop","length","unshift","forEach","btn","index","button","active","activeBtn","setActiveBtn","activeBtnSetter","id","handleArrowClick","arrowBtn","document","getElementById","addEventListener","removeEventListener","btnID","BtnArray","map","key","toUpperCase","clickHandler","setIsNameEntryEnabled","langSelector","LangSelect"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,wCAAtB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAW;AAAA;;AAAA,kBAKeJ,QAAQ,EALvB;AAAA,MAK5BK,iBAL4B;AAAA,MAKTC,oBALS;;AAAA,mBAMHN,QAAQ,CAAiB,EAAjB,CANL;AAAA,MAM5BO,QAN4B;AAAA,MAMlBC,WANkB;;AAOnCC,EAAAA,OAAO,CAACC,GAAR,CAAYL,iBAAZ;AACA,MAAMM,WAAW,GAAGb,KAAK,CAACc,UAAN,CAAiB;AAAA,WAAO,EAAP;AAAA,GAAjB,EAA6B,EAA7B,EAAiC,CAAjC,CAApB;;AAEA,WAASC,iBAAT,CAA2BC,IAA3B,EAAqE;AACnE,QAAIP,QAAQ,GAAGO,IAAI,CAACC,IAAL,GAAYC,MAAZ,CAAmB,UAACC,GAAD;AAAA,aAAS,OAAOA,GAAP,IAAc,QAAvB;AAAA,KAAnB,CAAf;AACAT,IAAAA,WAAW,CAACD,QAAD,CAAX;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAD,IAAAA,oBAAoB,CAACC,QAAQ,CAACW,OAAT,CAAiB,IAAjB,CAAD,CAApB;AACAX,IAAAA,QAAQ,CAACY,GAAT;;AACA,QAAId,iBAAiB,IAAIE,QAAQ,CAACa,MAAlC,EAA0C;AACxCb,MAAAA,QAAQ,CAACc,OAAT,CAAiB,IAAjB;AACD,KAFD,MAEO;AACLd,MAAAA,QAAQ,CAACc,OAAT,CAAiB,KAAjB;AACD;;AACDZ,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAAsB,oBAAtB;AACAO,IAAAA,IAAI,CAACQ,OAAL,CAAa,UAACC,GAAD,EAAMC,KAAN;AAAA,aAAiBD,GAAG,CAAC,CAAD,CAAH,GAAShB,QAAQ,CAACiB,KAAD,CAAlC;AAAA,KAAb;AACAb,IAAAA,WAAW;AACZ;;AAEDZ,EAAAA,SAAS,CAAC,YAAM;AACdU,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAI,IAAAA,IAAI,CAACQ,OAAL,CAAa,UAACG,MAAD,EAASD,KAAT,EAAmB,CAC9B;AACD,KAFD;AAGD,GALQ,EAKN,CAACnB,iBAAD,CALM,CAAT;;AA1BmC,mBAiCDL,QAAQ,CAASI,KAAK,CAACsB,MAAf,CAjCP;AAAA,MAiC5BC,SAjC4B;AAAA,MAiCjBC,YAjCiB;AAkCnC;;;;;;AAIA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,EAAD;AAAA,WAAgBF,YAAY,CAACE,EAAD,CAA5B;AAAA,GAAxB;;AAEA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7BlB,IAAAA,iBAAiB,CAACC,IAAD,CAAjB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AACD,GAHD;;AAIA,MAAIkB,QAAJ;AACAjC,EAAAA,SAAS,CAAC,YAAM;AAAA;;AACdU,IAAAA,OAAO,CAACC,GAAR,CAAYuB,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAZ,EAAoD,UAApD;AACAF,IAAAA,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAX;AACA,iBAAAF,QAAQ,UAAR,8CAAUG,gBAAV,CAA2B,OAA3B,EAAoCJ,gBAApC;AACA,WAAO;AAAA;;AAAA,2BAAMC,QAAN,+CAAM,WAAUI,mBAAV,CAA8B,OAA9B,EAAuCL,gBAAvC,CAAN;AAAA,KAAP;AACD,GALQ,CAAT,CA7CmC,CAoDnC;;AACAhC,EAAAA,SAAS,CAAC,YAAM;AACde,IAAAA,IAAI,CAACQ,OAAL,CAAa,UAACG,MAAD,EAAY;AACvBhB,MAAAA,OAAO,CAACC,GAAR,CAAYe,MAAM,CAAC,CAAD,CAAN,CAAUrB,KAAV,CAAgBiC,KAA5B;;AACA,UAAIZ,MAAM,CAAC,CAAD,CAAN,CAAUrB,KAAV,CAAgBiC,KAAhB,KAA0BV,SAA9B,EAAyC;AACvCF,QAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,KAAZ;AACD;AACF,KALD;AAMAhB,IAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AACD,GARQ,EAQN,EARM,CAAT;AAUA,MAAMA,IAAsC,GAAGV,KAAK,CAACkC,QAAN,CAAeC,GAAf,CAC7C,UAACd,MAAD,EAASe,GAAT,EAAiB;AACf,WAAO,CACL,MAAC,WAAD;AACE,MAAA,KAAK,EAAEf,MADT;AAEE,MAAA,OAAO,EAAEA,MAAM,CAACgB,WAAP,EAFX;AAGE,MAAA,cAAc,EAAErC,KAAK,CAACsC,YAHxB;AAIE,MAAA,YAAY,EAAEtC,KAAK,CAACuC,qBAJtB;AAKE,MAAA,OAAO,EAAElB,MAAM,KAAKE,SAAX,GAAuB,IAAvB,GAA8B,KALzC;AAME,MAAA,GAAG,EAAEa,GANP;AAOE,MAAA,UAAU,EAAEpC,KAAK,CAACwC,YAPpB;AAQE,MAAA,YAAY,EAAEf,eARhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,EAWLJ,MAAM,KAAKE,SAAX,GAAuB,IAAvB,GAA8B,KAXzB,CAAP;AAaD,GAf4C,CAA/C;AAkBA,SACE;AAAK,IAAA,SAAS,EAAEzB,SAAS,CAAC2C,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuC/B,IAAI,CAACyB,GAAL,CAAS,UAACtB,GAAD;AAAA,WAAcA,GAAd;AAAA,GAAT,CAAvC,CADF;AAGD,CApFD;;GAAMd,iB;;KAAAA,iB;AAsFN,eAAeA,iBAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport LanguageBtn from \"./LanguageBtn\";\nimport compStyle from \"./styles/LangBtnController.module.scss\";\n\nconst LangBtnController = (props) => {\n  type TBtnArrayWithPressedState = {\n    btns: [JSX.Element, boolean];\n  };\n\n  const [activeBtnPosition, setActiveBtnPosition] = useState<Number>();\n  const [flatBtns, setFlatBtns] = useState<Array<boolean>>([]);\n  console.log(activeBtnPosition);\n  const forceUpdate = React.useReducer(() => ({}), {})[1] as () => void;\n\n  function activeBtnSwitcher(Btns: { btns: [JSX.Element, boolean] }[]) {\n    let flatBtns = Btns.flat().filter((ele) => typeof ele != \"object\");\n    setFlatBtns(flatBtns);\n    console.log(flatBtns);\n    setActiveBtnPosition(flatBtns.indexOf(true));\n    flatBtns.pop();\n    if (activeBtnPosition == flatBtns.length) {\n      flatBtns.unshift(true);\n    } else {\n      flatBtns.unshift(false);\n    }\n    console.log(flatBtns, \"after manipulation\");\n    Btns.forEach((btn, index) => (btn[1] = flatBtns[index]));\n    forceUpdate();\n  }\n\n  useEffect(() => {\n    console.log(\"Heello from arrow\");\n    Btns.forEach((button, index) => {\n      // button[1] = flatBtns\n    });\n  }, [activeBtnPosition]);\n\n  const [activeBtn, setActiveBtn] = useState<string>(props.active);\n  /**\n   * Sets currently active button.\n   * @param id of a button\n   */\n  const activeBtnSetter = (id: string) => setActiveBtn(id);\n\n  const handleArrowClick = () => {\n    activeBtnSwitcher(Btns);\n    console.log(Btns);\n  };\n  let arrowBtn: HTMLElement | null;\n  useEffect(() => {\n    console.log(document.getElementById(\"arrowButton\"), \"found it\");\n    arrowBtn = document.getElementById(\"arrowButton\");\n    arrowBtn?.addEventListener(\"click\", handleArrowClick);\n    return () => arrowBtn?.removeEventListener(\"click\", handleArrowClick);\n  });\n\n  // * Cleans other buttons from the pressed class.\n  useEffect(() => {\n    Btns.forEach((button) => {\n      console.log(button[0].props.btnID);\n      if (button[0].props.btnID !== activeBtn) {\n        button[1] = false;\n      }\n    });\n    console.log(Btns);\n  }, []);\n\n  const Btns: Array<TBtnArrayWithPressedState> = props.BtnArray.map(\n    (button, key) => {\n      return [\n        <LanguageBtn\n          btnID={button}\n          btnText={button.toUpperCase()}\n          handleBtnClick={props.clickHandler}\n          inputEnabler={props.setIsNameEntryEnabled}\n          pressed={button === activeBtn ? true : false}\n          key={key}\n          langSelect={props.langSelector}\n          setActiveBtn={activeBtnSetter}\n        />,\n        button === activeBtn ? true : false,\n      ];\n    }\n  );\n\n  return (\n    <div className={compStyle.LangSelect}>{Btns.map((ele: any) => ele)}</div>\n  );\n};\n\nexport default LangBtnController;\n"]},"metadata":{},"sourceType":"module"}