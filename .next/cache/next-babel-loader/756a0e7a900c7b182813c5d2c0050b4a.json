{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useRef, useState } from \"react\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\nimport addCompStyles from \"./styles/TestNamer.module.scss\";\nimport { closeBtn, SaveBtn } from \"./TestNamer\";\nimport { APIURL, productionURL, URLCheckForLocalHost } from \"./constants\"; // import { sendTheDataToTheServer } from \"./PhotoManager\";\n//\n//  const jwt = document.cookie.slice(document.cookie.indexOf('=') + 1);\n// Axios.defaults.headers.common[\"Authorization\"] =\n//\n\nimport Axios from \"axios\";\n\nconst QACard = props => {\n  // useEffect(() => {\n  //   // Axios.defaults.headers.common[\"Authorization\"] =\n  //   //   \"Bearer \" + store.get(\"jwt\");\n  // }, []);\n  const charLimit = 90;\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false); // console.log(props.cardContents);\n  // console.log(\"Test for page contents\", props.pageContents);\n\n  const textPreviewer = text => {\n    // console.log(\"Hello from text preview\");\n    if (text.match(URLCheckForLocalHost) !== null) {\n      console.log(\"Hello there from URL checker\");\n      return \"There was an image before\";\n    }\n\n    if (text.length < 1) return __jsx(\"div\", {\n      className: compStyles.emptyText\n    }, \"T\");\n\n    if (text.length > charLimit) {\n      return text.slice(0, 65) + \"...\";\n    } else {\n      return text;\n    }\n  };\n\n  const QACardRefIMG = useRef(null); // useEffect(() => {\n  //   console.log(\"Yayyy\");\n  // }, [QACardRef.current]);\n\n  const handleCardReference = () => {\n    props.setCurrentCard(QACardRefIMG); // props.togglePhotoManager(false, `${props.cardType}_${props.iterator}`);\n  }; //! Image upload portion\n  // const [recievedIMGLocations, setRecievedIMGLocation] = useState<\n  //   Array<string>\n  // >([]);\n\n\n  const {\n    0: readIMG,\n    1: setReadIMG\n  } = useState();\n  const fileInputRef = useRef(null);\n\n  const readAnImage = async imageToBeRead => {\n    const tmpFileReader = new FileReader();\n    return new Promise((resolve, reject) => {\n      tmpFileReader.onerror = () => {\n        tmpFileReader.abort();\n        reject(new DOMException(\"Problem occured when reading the file.\"));\n      };\n\n      tmpFileReader.onload = () => {\n        resolve(tmpFileReader.result);\n      };\n\n      tmpFileReader.readAsDataURL(imageToBeRead);\n    });\n  };\n\n  const sendTheDataToTheServerToParse = async (file, fileName) => {\n    let fileLocation = \"\";\n\n    try {\n      console.log(\"Sending\", file);\n      const locationOfTheFile = await Axios.post( // `${producionURL}tests/imgSaving`,\n      `${APIURL}tests/imgSaving`, {\n        fileName,\n        fileContents: file\n      });\n      console.log(locationOfTheFile);\n      fileLocation = locationOfTheFile.data;\n    } catch (error) {\n      console.error(error);\n      alert(error);\n    }\n\n    return fileLocation;\n  };\n\n  const handleFileinput = async event => {\n    event.preventDefault();\n    const tmpCurrent = fileInputRef.current;\n    const files = tmpCurrent.files;\n\n    if (files !== null) {\n      const chosenFile = files[0];\n      console.log(chosenFile);\n\n      if (fileInputRef.current) {\n        try {\n          const fileContents = await readAnImage(chosenFile);\n          setReadIMG(fileContents); // console.log(fileContents);\n\n          const fileLocationOnServer = await sendTheDataToTheServerToParse(fileContents, chosenFile.name);\n\n          if (fileLocationOnServer.length > 0) {\n            props.saveIMG(props.iterator, fileLocationOnServer, props.cardType);\n          } else {\n            props.saveIMG(props.iterator, fileContents, props.cardType);\n          } // console.log(QACardRefIMG.current!.src, \"OI\");\n\n        } catch (error) {\n          alert(\"There was an error reading the file. Please try again, or choose a differenet file\");\n          console.error(error);\n        }\n      }\n    } else {\n      alert(\"No file has been chosen.\");\n    } // const resp = await sendTheDataToTheServerToParse(\n    //   fileInputRef.current.files[0],\n    //   fileInputRef.current.files[0].name\n    // );\n    // console.log(resp);\n\n  };\n\n  const {\n    0: imgLocation,\n    1: setimgLocation\n  } = useState(\"\");\n\n  function handleFileinputChange(event) {\n    // console.log(event.target.files[0]);\n    const file = event.target.files[0] || new File([], \"err\");\n    let fd = new FormData();\n    fd.append(\"image\", file);\n    console.log(fd.getAll(\"image\"));\n    Axios.post(`${productionURL}tests/testimg`, fd, {\n      // Axios.post(`http://localhost:4000/api/quiz/tests/testimg`, fd, {\n      headers: {\n        \"content-type\": \"multipart/form-data\"\n      }\n    }).then(res => {\n      console.log(res);\n      setimgLocation(res.data);\n      props.saveIMG(props.iterator, res.data, props.cardType, \"all\");\n    }).catch(err => console.error(err));\n  } // useEffect(() => {\n  //   console.log(\"Input has \", fileInputRef.current?.files);\n  // }, [fileInputRef.current]);\n\n\n  return __jsx(\"div\", {\n    className: `${compStyles[props.cardType]}`\n  }, __jsx(\"div\", {\n    // ref={QACardRef}\n    id: `${props.cardType}_${props.iterator}`,\n    className: `${addCompStyles.ModalContainerBG} ${!isOpen ? addCompStyles.Hidden : null}`\n  }, __jsx(\"div\", {\n    className: addCompStyles.ModalContainer\n  }, closeBtn(setIsOpen), __jsx(\"div\", {\n    className: addCompStyles.Modal\n  }, __jsx(\"div\", {\n    className: addCompStyles.NameForm\n  }, props.cardContents === \"text\" && props.q_a_TextEntry(props.cardType, props.iterator)), __jsx(\"button\", {\n    onClick: e => setIsOpen(!isOpen),\n    className: addCompStyles.SaveBtn\n  }, SaveBtn())))), __jsx(\"div\", {\n    className: compStyles.QADescription,\n    onClick: e => {\n      props.cardContents === \"img\" ? handleCardReference() : setIsOpen(true);\n    }\n  }, props.cardContents === \"text\" ? __jsx(\"p\", {\n    className: compStyles.textInACard\n  }, textPreviewer(props.qna[props.cardType])) : __jsx(\"form\", {\n    onSubmit: handleFileinput,\n    className: compStyles.IMGForm\n  }, __jsx(\"img\", {\n    id: `${props.cardType}_${props.iterator}_page-${props.pageNumber}` // onChange={(e) => console.log(\"YAyyy\")}\n    ,\n    className: compStyles.SelectedIMGPreview // src={/* imgLocation || */ props.pageContents}\n    ,\n    src: props.pageContents.match(URLCheckForLocalHost) !== null ? props.pageContents : \"\",\n    alt: `\n              Click here to select the image \n              Width: 245px\n              Height: 245px\n              Aspect ratio: ~ 1:1 \n              `,\n    ref: QACardRefIMG,\n    onClick: e => fileInputRef.current.click()\n  }), __jsx(\"input\", {\n    className: compStyles.FileChooser,\n    style: {\n      display: \"none\"\n    },\n    type: \"file\",\n    accept: \"image/*\",\n    ref: fileInputRef,\n    onChange: handleFileinputChange\n  }))));\n};\n\nexport default QACard;","map":null,"metadata":{},"sourceType":"module"}