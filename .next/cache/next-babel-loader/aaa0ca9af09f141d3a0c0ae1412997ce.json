{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Axios from \"axios\"; //const jwt = document.cookie.slice(document.cookie.indexOf('=') + 1);\n\nimport React, { useEffect, useState } from \"react\";\nimport ActiveTests from \"../../components/ActiveTests\";\nimport { productionURL, productionHost } from \"../../components/constants\";\nimport Gallery from \"../../components/Gallery\";\nimport { motion } from \"framer-motion\";\nimport styles from \"../styles/main.module.scss\";\nimport { pageAppearance } from \"./create_test\";\nimport PleaseWaitModal from \"../../components/PleaseWaitModal\";\nimport FMLogo from \"../../components/FMlogo\";\nimport checkJWT from \"../../components/jwtChecker\";\nimport { useRouter } from \"next/router\";\n\nconst main = () => {\n  const router = useRouter();\n\n  const getTestsByActive = async isTestActive => {\n    try {\n      const tests = await Axios.get(`http://192.168.8.100:4000/tests/getTest?active=${isTestActive}`);\n      console.log(tests.data, \"recieved tests\");\n      return tests.data;\n    } catch (error) {\n      console.log(Object.keys(error), error.message);\n      return [];\n    }\n  };\n\n  const {\n    0: hasEverythingFetched,\n    1: setHasEverythingFetched\n  } = useState(false);\n  const {\n    0: tests,\n    1: setTests\n  } = useState({\n    activeTests: [],\n    inActiveTests: []\n  });\n\n  const getAllTests = async () => {\n    setHasEverythingFetched(false);\n\n    try {\n      const serverResponse = await Axios.get(`${productionURL}tests/allTests`);\n      const data = serverResponse.data;\n      setHasEverythingFetched(true);\n      let tmpactiveTests = [];\n      let tmpinActiveTests = [];\n      filterTests(tmpactiveTests, tmpinActiveTests, data);\n      setTests({\n        activeTests: tmpactiveTests,\n        inActiveTests: tmpinActiveTests\n      });\n    } catch (error) {\n      console.log(Object.keys(error), error.message);\n    }\n  };\n\n  const filterTests = (activeTests, inActiveTests, arrToFilter) => {\n    arrToFilter.forEach(test => {\n      if (test.active !== undefined) {\n        test.active ? activeTests.push(test) : inActiveTests.push(test);\n      }\n    });\n  };\n\n  const toggleTest = testID => {\n    let tmpActive = tests.activeTests;\n    let tmpInactive = tests.inActiveTests;\n    let combinedTests = [...tests.activeTests, ...tests.inActiveTests];\n    combinedTests.forEach(test => {\n      if (test._id === testID) {\n        if (combinedTests.indexOf(test) < tmpActive.length) {\n          tmpActive.splice(tmpActive.indexOf(test), 1);\n          tmpInactive.push(_objectSpread(_objectSpread({}, test), {}, {\n            active: !test.active\n          }));\n        } else {\n          tmpInactive.splice(tmpInactive.indexOf(test), 1);\n          tmpActive.push(_objectSpread(_objectSpread({}, test), {}, {\n            active: !test.active\n          }));\n        }\n      }\n    });\n    setTests({\n      activeTests: tmpActive,\n      inActiveTests: tmpInactive\n    });\n  };\n\n  useEffect(() => {\n    // Axios.defaults.headers.common[\"Authorization\"] =\n    //   \"Bearer \" + store.get(\"jwt\");\n    if (checkJWT() === false) {\n      router.replace(`${productionHost}/tms/auth`);\n    }\n\n    getAllTests();\n  }, []);\n  return __jsx(motion.div, {\n    className: styles.MainContainer,\n    variants: pageAppearance,\n    initial: \"hidden\",\n    animate: \"visible\"\n  }, __jsx(\"div\", {\n    className: styles.FMLogo\n  }, __jsx(FMLogo, null)), __jsx(PleaseWaitModal, {\n    isDisplayed: !hasEverythingFetched\n  }), __jsx(ActiveTests // getActiveTests={getTestsByActive}\n  , {\n    tests: tests,\n    activeTests: tests.activeTests,\n    updateTheTests: toggleTest,\n    fetchAllTests: getAllTests\n  }), __jsx(Gallery // getInactiveTests={getTestsByActive}\n  , {\n    testsToRender: tests.inActiveTests,\n    updateTheTests: toggleTest,\n    fetchAllTests: getAllTests\n  }));\n};\n\nexport default main;","map":null,"metadata":{},"sourceType":"module"}