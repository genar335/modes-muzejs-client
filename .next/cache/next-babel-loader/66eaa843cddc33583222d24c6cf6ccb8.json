{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestNamer.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport compStyles from \"./styles/TestNamer.module.scss\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport { useEffect } from \"react\";\n\nvar TestNamer = function TestNamer(currentLang) {\n  _s();\n\n  var _useState = useState(false),\n      isOpen = _useState[0],\n      setIsOpen = _useState[1];\n\n  var _useState2 = useState(),\n      selectedLang = _useState2[0],\n      setSelectedLang = _useState2[1];\n\n  var testLang = [\"ru\", \"lv\", \"en\"];\n  var langButtons = [];\n  useEffect(function () {\n    langButtons = testLang.map(function (lang) {\n      return document.getElementById(lang);\n    });\n    console.log(langButtons);\n  });\n\n  var handleLangBtnClick = function handleLangBtnClick(btn) {\n    var _btn$target, _btn$target3;\n\n    console.log((_btn$target = btn.target) === null || _btn$target === void 0 ? void 0 : _btn$target.id);\n    langButtons.forEach(function (button) {\n      var _btn$target2;\n\n      if ((button === null || button === void 0 ? void 0 : button.id) == ((_btn$target2 = btn.target) === null || _btn$target2 === void 0 ? void 0 : _btn$target2.id)) {\n        var _button$classList;\n\n        button === null || button === void 0 ? void 0 : (_button$classList = button.classList) === null || _button$classList === void 0 ? void 0 : _button$classList.add(compStyles.ButtonPressed);\n      } else {\n        var _button$classList2;\n\n        button === null || button === void 0 ? void 0 : (_button$classList2 = button.classList) === null || _button$classList2 === void 0 ? void 0 : _button$classList2.remove(compStyles.ButtonPressed);\n      }\n    }); // langButtons[testLang.indexOf(btn.target?.id)]?.classList.toggle(\n    //   compStyles.ButtonPressed\n    // );\n\n    setSelectedLang((_btn$target3 = btn.target) === null || _btn$target3 === void 0 ? void 0 : _btn$target3.id);\n  };\n\n  return __jsx(\"div\", {\n    className: styles.TestNaming,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, isOpen ? __jsx(\"div\", {\n    className: compStyles.ModalContainerBG,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: compStyles.ModalContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, __jsx(\"button\", {\n    className: compStyles.CloseBTN,\n    onClick: function onClick() {\n      return setIsOpen(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, \"\\uD835\\uDDB7\"), __jsx(\"div\", {\n    className: compStyles.Modal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: compStyles.LangSelect,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 15\n    }\n  }, __jsx(\"button\", {\n    onClick: handleLangBtnClick,\n    id: \"ru\",\n    className: compStyles.LangButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, \"RUS\"), __jsx(\"button\", {\n    onClick: handleLangBtnClick,\n    id: \"lv\",\n    className: compStyles.LangButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, \"LAT\"), __jsx(\"button\", {\n    onClick: handleLangBtnClick,\n    id: \"en\",\n    className: compStyles.LangButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, \"ENG\")), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"TestName\",\n    className: compStyles.TNameInput,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  }), __jsx(\"button\", {\n    className: compStyles.NextLang // onClick={handleArrowClick}\n    ,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  }, \"\\u2192\")))) : __jsx(\"div\", {\n    className: compStyles.ModalOpener,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, \"Test name\"), __jsx(\"button\", {\n    onClick: function onClick() {\n      return setIsOpen(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, \"+\")));\n};\n\n_s(TestNamer, \"V6LCU8JgvSUD747nUE83cHiwwVY=\");\n\n_c = TestNamer;\nexport default TestNamer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestNamer\");","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestNamer.tsx"],"names":["React","useState","compStyles","styles","useEffect","TestNamer","currentLang","isOpen","setIsOpen","selectedLang","setSelectedLang","testLang","langButtons","map","lang","document","getElementById","console","log","handleLangBtnClick","btn","target","id","forEach","button","classList","add","ButtonPressed","remove","TestNaming","ModalContainerBG","ModalContainer","CloseBTN","Modal","LangSelect","LangButton","TNameInput","NextLang","ModalOpener"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport compStyles from \"./styles/TestNamer.module.scss\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport { TLangOption } from \"../@types/test\";\nimport { useEffect } from \"react\";\n\nconst TestNamer = (currentLang: any) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [selectedLang, setSelectedLang] = useState<TLangOption[\"value\"]>();\n\n  const testLang: TLangOption[\"value\"][] = [\"ru\", \"lv\", \"en\"];\n\n  let langButtons: Array<HTMLElement | null> = [];\n  useEffect(() => {\n    langButtons = testLang.map((lang: string) => document.getElementById(lang));\n    console.log(langButtons);\n  });\n\n  const handleLangBtnClick = (\n    btn: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    console.log(btn.target?.id);\n    langButtons.forEach((button) => {\n      if (button?.id == btn.target?.id) {\n        button?.classList?.add(compStyles.ButtonPressed);\n      } else {\n        button?.classList?.remove(compStyles.ButtonPressed);\n      }\n    });\n    // langButtons[testLang.indexOf(btn.target?.id)]?.classList.toggle(\n    //   compStyles.ButtonPressed\n    // );\n    setSelectedLang(btn.target?.id);\n  };\n\n  return (\n    <div className={styles.TestNaming}>\n      {isOpen ? (\n        <div className={compStyles.ModalContainerBG}>\n          <div className={compStyles.ModalContainer}>\n            <button\n              className={compStyles.CloseBTN}\n              onClick={() => setIsOpen(false)}\n            >\n              𝖷\n            </button>\n\n            <div className={compStyles.Modal}>\n              <div className={compStyles.LangSelect}>\n                <button\n                  onClick={handleLangBtnClick}\n                  id=\"ru\"\n                  className={compStyles.LangButton}\n                >\n                  RUS\n                </button>\n                <button\n                  onClick={handleLangBtnClick}\n                  id=\"lv\"\n                  className={compStyles.LangButton}\n                >\n                  LAT\n                </button>\n                <button\n                  onClick={handleLangBtnClick}\n                  id=\"en\"\n                  className={compStyles.LangButton}\n                >\n                  ENG\n                </button>\n              </div>\n              <input\n                type=\"text\"\n                placeholder=\"TestName\"\n                className={compStyles.TNameInput}\n              />\n              <button\n                className={compStyles.NextLang}\n                // onClick={handleArrowClick}\n              >\n                &rarr;\n              </button>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className={compStyles.ModalOpener}>\n          <span>Test name</span>\n          <button onClick={() => setIsOpen(true)}>+</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TestNamer;\n"]},"metadata":{},"sourceType":"module"}