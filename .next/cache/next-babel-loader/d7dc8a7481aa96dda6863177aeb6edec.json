{"ast":null,"code":"var _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/PhotoManager.tsx\";\nvar __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useRef, useState } from \"react\";\nimport stylish from \"./styles/PhotoManager.module.scss\";\nimport uploadIcon from \"../GAssets/upload_data.svg\";\nimport Carousel from \"react-multi-carousel\";\nimport { responsive } from \"./constants\";\nimport Axios from \"axios\";\n\nconst PhotoManager = props => {\n  let tmpPage = props.pageToRender;\n\n  async function readUploadedIMG(inputFile) {\n    const tmpFileReader = new FileReader();\n    return new Promise((resolve, reject) => {\n      tmpFileReader.onerror = () => {\n        tmpFileReader.abort();\n        reject(new DOMException(\"Problem parsing input file.\"));\n      };\n\n      tmpFileReader.onload = () => {\n        resolve(tmpFileReader.result);\n      };\n\n      tmpFileReader.readAsDataURL(inputFile);\n    });\n  }\n\n  const {\n    0: upIMGs,\n    1: setUpIMGs\n  } = useState([]);\n  const {\n    0: recievedIMGLocations,\n    1: setRecievedIMGLocation\n  } = useState([]);\n  /**\n   * Loads the file from the clients computer into the browser and saves the array into the state.\n   * @param event\n   */\n\n  async function handleFileInput(event) {\n    event.preventDefault();\n    let tmp = [];\n\n    if (fileInput.current !== null && fileInput.current.files !== null) {\n      for (let fileIndex = 0; fileIndex < ((_fileInput$current$fi = fileInput.current.files) === null || _fileInput$current$fi === void 0 ? void 0 : _fileInput$current$fi.length); fileIndex++) {\n        var _fileInput$current$fi;\n\n        try {\n          const fileContents = await readUploadedIMG(fileInput.current.files[fileIndex]);\n          tmp.push(fileContents); // setUploadedImg(fileContents);\n        } catch (error) {\n          alert(error);\n        }\n      }\n\n      setUpIMGs(tmp);\n    }\n\n    sendTheDataToTheServer(upIMGs, setRecievedIMGLocation);\n  }\n\n  const fileInput = useRef(null);\n\n  const CustomRightArrow = (_ref) => {\n    let {\n      onClick\n    } = _ref,\n        rest = _objectWithoutProperties(_ref, [\"onClick\"]);\n\n    const {\n      onMove,\n      carouselState: {\n        currentSlide,\n        deviceType\n      }\n    } = rest; // onMove means if dragging or swiping in progress.\n\n    return __jsx(\"button\", {\n      className: stylish.carRightArrow,\n      onClick: () => onClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, Arrow());\n  };\n\n  const CustomLeftArrow = (_ref2) => {\n    let {\n      onClick\n    } = _ref2,\n        rest = _objectWithoutProperties(_ref2, [\"onClick\"]);\n\n    const {\n      onMove,\n      carouselState: {\n        currentSlide,\n        deviceType\n      }\n    } = rest;\n    return __jsx(\"button\", {\n      onClick: () => onClick(),\n      className: stylish.carLeftArrow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }\n    }, Arrow());\n  };\n  /**\n   * Sets the image for the card that has been clicked inside of the test. preview component, as well as saves the changese to state of the current page.\n   * @param event Event for a mouse click.\n   */\n\n\n  const handleIMGClick = event => {\n    if (props.currentCard !== null || props.currentCard !== undefined) {\n      //* console.log(\"hello from\", event.currentTarget.id);\n      //* console.log(props.currentCard?.current);\n      let tmp = props.currentCard;\n      tmp.current.src = event.currentTarget.src; //* console.log(tmp?.current.id);\n\n      const cardData = tmp === null || tmp === void 0 ? void 0 : tmp.current.id.split(\"_\"); //* console.log(cardData);\n\n      if (tmpPage) {\n        tmpPage[cardData[1]][cardData[0]] = String(tmp === null || tmp === void 0 ? void 0 : tmp.current.src);\n      } //* console.log(tmpPage);\n      // props.setCurrentCard(tmp);\n      //! Applying a border\n\n\n      event.currentTarget.classList.toggle(stylish.selectedIMG); //!\n\n      props.saveChanges(tmpPage);\n    }\n  };\n  /**\n   * Renders images in groups of two.\n   * @param recievedIMGLocations An array of strings representing the location of images on the server.\n   */\n\n\n  function renderSelectedImages(recievedIMGLocations) {\n    let renderedImagesArray = [];\n    console.log(renderedImagesArray.length);\n\n    if (recievedIMGLocations.length !== 0) {\n      for (let i = 0; i < recievedIMGLocations.length; i++) {\n        renderedImagesArray.push(__jsx(\"div\", {\n          className: stylish.imgContainer,\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 11\n          }\n        }, __jsx(\"img\", {\n          key: i,\n          id: `img_${i}`,\n          className: stylish.tmpIMG,\n          src: recievedIMGLocations[i],\n          alt: \"Here be the image\",\n          onClick: handleIMGClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }\n        }), recievedIMGLocations[i + 1] != undefined && __jsx(\"img\", {\n          key: i + 1,\n          id: `img_${i + 1}`,\n          src: recievedIMGLocations[i + 1],\n          alt: \"here be the second one\",\n          className: stylish.tmpIMG,\n          onClick: handleIMGClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }\n        })));\n        i++;\n        console.log(renderedImagesArray[i], \"Jeloo there\");\n      }\n\n      console.log(renderedImagesArray);\n      return renderedImagesArray.map(el => el);\n    }\n  }\n\n  return __jsx(\"div\", {\n    className: `${stylish.PhotosContainer} ${!props.displayed ? undefined : stylish.Hidden}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }\n  }, __jsx(\"span\", {\n    onClick: e => props.togglePhotoManager(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }\n  }, \"\\u274C\"), __jsx(\"div\", {\n    className: stylish.Contents,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: stylish.headerIconContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }, \"Uploaded photos\"), __jsx(\"label\", {\n    htmlFor: \"photoUpload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 11\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    name: \"photoUpload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }), __jsx(\"img\", {\n    src: uploadIcon,\n    alt: \"Upload\",\n    className: stylish.uploadIcon,\n    onClick: e => console.log(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }))), __jsx(\"div\", {\n    className: stylish.IMGPreview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, __jsx(\"form\", {\n    onSubmit: handleFileInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  }, \"Upload image\"), __jsx(\"input\", {\n    name: \"testio\",\n    type: \"file\",\n    multiple: true,\n    accept: \"image/*\",\n    ref: fileInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }), __jsx(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }\n  }, \"Placeholder for image upload\"), __jsx(Carousel, {\n    containerClass: stylish.Carousel,\n    itemClass: stylish.Item,\n    responsive: responsive,\n    showDots: true,\n    sliderClass: stylish.Slider,\n    customRightArrow: __jsx(CustomRightArrow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 33\n      }\n    }),\n    customLeftArrow: __jsx(CustomLeftArrow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 32\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }\n  }, recievedIMGLocations.length !== 0 ? renderSelectedImages(recievedIMGLocations) : __jsx(React.Fragment, null))))));\n};\n\nexport default PhotoManager;\n\nconst Arrow = () => __jsx(\"svg\", {\n  width: \"15\",\n  height: \"26\",\n  viewBox: \"0 0 15 26\",\n  fill: \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 3\n  }\n}, __jsx(\"path\", {\n  d: \"M2 24L13 13L2 2\",\n  stroke: \"#2F4858\",\n  \"stroke-width\": \"3\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }\n}));\n/**\n * Sends an array of files to the server to be saved there.\n * @param upIMGs Array of uploaded images to be sent to the server.\n * @param setRecievedIMGLocation Array of paths to the images on the server. saved to a state.\n */\n\n\nfunction sendTheDataToTheServer(upIMGs, setRecievedIMGLocation) {\n  Axios.post(\"http://localhost:4000/tests/testIMG\", upIMGs).then(function (response) {\n    console.log(response.data);\n    setRecievedIMGLocation(response.data);\n  }).catch(function (error) {\n    console.log(error);\n  });\n}","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/PhotoManager.tsx"],"names":["React","useRef","useState","stylish","uploadIcon","Carousel","responsive","Axios","PhotoManager","props","tmpPage","pageToRender","readUploadedIMG","inputFile","tmpFileReader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","readAsDataURL","upIMGs","setUpIMGs","recievedIMGLocations","setRecievedIMGLocation","handleFileInput","event","preventDefault","tmp","fileInput","current","files","fileIndex","length","fileContents","push","error","alert","sendTheDataToTheServer","CustomRightArrow","onClick","rest","onMove","carouselState","currentSlide","deviceType","carRightArrow","Arrow","CustomLeftArrow","carLeftArrow","handleIMGClick","currentCard","undefined","src","currentTarget","cardData","id","split","String","classList","toggle","selectedIMG","saveChanges","renderSelectedImages","renderedImagesArray","console","log","i","imgContainer","tmpIMG","map","el","PhotosContainer","displayed","Hidden","e","togglePhotoManager","Contents","headerIconContainer","IMGPreview","Item","Slider","post","then","response","data","catch"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport stylish from \"./styles/PhotoManager.module.scss\";\nimport uploadIcon from \"../GAssets/upload_data.svg\";\nimport Carousel from \"react-multi-carousel\";\nimport { responsive } from \"./constants\";\nimport Axios from \"axios\";\nimport { IQnA } from \"../@types/test\";\n\nconst PhotoManager = (props: {\n  displayed: boolean;\n  togglePhotoManager: (toggle: boolean, cardID: string) => void;\n  currentCard: React.MutableRefObject<null> | undefined;\n  setCurrentCard: React.Dispatch<\n    React.SetStateAction<React.MutableRefObject<null> | undefined>\n  >;\n  pageToRender: IQnA[];\n  saveChanges: (page: any) => void;\n}) => {\n  let tmpPage = props.pageToRender;\n  async function readUploadedIMG(inputFile: Blob) {\n    const tmpFileReader = new FileReader();\n\n    return new Promise((resolve, reject) => {\n      tmpFileReader.onerror = () => {\n        tmpFileReader.abort();\n        reject(new DOMException(\"Problem parsing input file.\"));\n      };\n\n      tmpFileReader.onload = () => {\n        resolve(tmpFileReader.result);\n      };\n      tmpFileReader.readAsDataURL(inputFile);\n    });\n  }\n\n  const [upIMGs, setUpIMGs] = useState<Array<any>>([]);\n\n  const [recievedIMGLocations, setRecievedIMGLocation] = useState<\n    Array<string>\n  >([]);\n\n  /**\n   * Loads the file from the clients computer into the browser and saves the array into the state.\n   * @param event\n   */\n  async function handleFileInput(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    let tmp = [];\n    if (fileInput.current !== null && fileInput.current.files !== null) {\n      for (\n        let fileIndex = 0;\n        fileIndex < fileInput.current.files?.length;\n        fileIndex++\n      ) {\n        try {\n          const fileContents = await readUploadedIMG(\n            fileInput.current.files[fileIndex]\n          );\n          tmp.push(fileContents);\n          // setUploadedImg(fileContents);\n        } catch (error) {\n          alert(error);\n        }\n      }\n      setUpIMGs(tmp);\n    }\n    sendTheDataToTheServer(upIMGs, setRecievedIMGLocation);\n  }\n  const fileInput = useRef<HTMLInputElement>(null);\n\n  const CustomRightArrow = ({ onClick, ...rest }) => {\n    const {\n      onMove,\n      carouselState: { currentSlide, deviceType },\n    } = rest;\n    // onMove means if dragging or swiping in progress.\n    return (\n      <button className={stylish.carRightArrow} onClick={() => onClick()}>\n        {Arrow()}\n      </button>\n    );\n  };\n\n  const CustomLeftArrow = ({ onClick, ...rest }) => {\n    const {\n      onMove,\n      carouselState: { currentSlide, deviceType },\n    } = rest;\n    return (\n      <button onClick={() => onClick()} className={stylish.carLeftArrow}>\n        {Arrow()}\n      </button>\n    );\n  };\n\n  /**\n   * Sets the image for the card that has been clicked inside of the test. preview component, as well as saves the changese to state of the current page.\n   * @param event Event for a mouse click.\n   */\n  const handleIMGClick = (\n    event: React.MouseEvent<HTMLImageElement, MouseEvent>\n  ) => {\n    if (props.currentCard !== null || props.currentCard !== undefined) {\n      //* console.log(\"hello from\", event.currentTarget.id);\n      //* console.log(props.currentCard?.current);\n      let tmp = props.currentCard;\n      tmp!.current!.src = event.currentTarget.src;\n      //* console.log(tmp?.current.id);\n      const cardData = tmp?.current.id.split(\"_\");\n      //* console.log(cardData);\n      if (tmpPage) {\n        tmpPage[cardData[1]][cardData[0]] = String(tmp?.current.src);\n      }\n      //* console.log(tmpPage);\n      // props.setCurrentCard(tmp);\n\n      //! Applying a border\n      event.currentTarget.classList.toggle(stylish.selectedIMG)\n      //!\n      props.saveChanges(tmpPage);\n    }\n  };\n\n  /**\n   * Renders images in groups of two.\n   * @param recievedIMGLocations An array of strings representing the location of images on the server.\n   */\n  function renderSelectedImages(recievedIMGLocations: string[]): any {\n    let renderedImagesArray = [];\n    console.log(renderedImagesArray.length);\n    if (recievedIMGLocations.length !== 0) {\n      for (let i = 0; i < recievedIMGLocations.length; i++) {\n        renderedImagesArray.push(\n          <div className={stylish.imgContainer} key={i}>\n            <img\n              key={i}\n              id={`img_${i}`}\n              className={stylish.tmpIMG}\n              src={recievedIMGLocations[i]}\n              alt=\"Here be the image\"\n              onClick={handleIMGClick}\n            />\n            {/* Conditionlay render the second image */}\n            {recievedIMGLocations[i + 1] != undefined && (\n              <img\n                key={i + 1}\n                id={`img_${i + 1}`}\n                src={recievedIMGLocations[i + 1]}\n                alt=\"here be the second one\"\n                className={stylish.tmpIMG}\n                onClick={handleIMGClick}\n              />\n            )}\n          </div>\n        );\n        i++;\n        console.log(renderedImagesArray[i], \"Jeloo there\");\n      }\n      console.log(renderedImagesArray);\n      return renderedImagesArray.map((el) => el);\n    }\n  }\n\n  return (\n    <div\n      className={`${stylish.PhotosContainer} ${\n        !props.displayed ? undefined : stylish.Hidden\n      }`}\n    >\n      <span onClick={(e) => props.togglePhotoManager(true)}>❌</span>\n      <div className={stylish.Contents}>\n        <div className={stylish.headerIconContainer}>\n          <h3>Uploaded photos</h3>\n          <label htmlFor=\"photoUpload\">\n            <input type=\"file\" name=\"photoUpload\" />\n            <img\n              src={uploadIcon}\n              alt=\"Upload\"\n              className={stylish.uploadIcon}\n              onClick={(e) => console.log(e)}\n            />\n          </label>\n        </div>\n        <div className={stylish.IMGPreview}>\n          <form onSubmit={handleFileInput}>\n            <label>Upload image</label>\n            <input\n              name=\"testio\"\n              type=\"file\"\n              multiple\n              accept=\"image/*\"\n              ref={fileInput}\n            />\n            <input type=\"submit\" value=\"Submit\" />\n            <p>Placeholder for image upload</p>\n            <Carousel\n              containerClass={stylish.Carousel}\n              itemClass={stylish.Item}\n              responsive={responsive}\n              showDots\n              sliderClass={stylish.Slider}\n              customRightArrow={<CustomRightArrow />}\n              customLeftArrow={<CustomLeftArrow />}\n            >\n              {recievedIMGLocations.length !== 0 ? (\n                renderSelectedImages(recievedIMGLocations)\n              ) : (\n                <></>\n              )}\n            </Carousel>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PhotoManager;\nconst Arrow = () => (\n  <svg\n    width=\"15\"\n    height=\"26\"\n    viewBox=\"0 0 15 26\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M2 24L13 13L2 2\"\n      stroke=\"#2F4858\"\n      stroke-width=\"3\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n);\n\n/**\n * Sends an array of files to the server to be saved there.\n * @param upIMGs Array of uploaded images to be sent to the server.\n * @param setRecievedIMGLocation Array of paths to the images on the server. saved to a state.\n */\nfunction sendTheDataToTheServer(\n  upIMGs: any[],\n  setRecievedIMGLocation: React.Dispatch<React.SetStateAction<string[]>>\n) {\n  Axios.post(\"http://localhost:4000/tests/testIMG\", upIMGs)\n    .then(function (response) {\n      console.log(response.data);\n      setRecievedIMGLocation(response.data);\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}