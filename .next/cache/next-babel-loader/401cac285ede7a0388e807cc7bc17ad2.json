{"ast":null,"code":"var _jsxFileName = \"/Users/yberfox/Documents/personal-projects/modes-muzejs-client/components/TestProgressBar.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\n\nconst TestProgressBar = props => {\n  const indicatorStyle = {\n    width: \"0.6rem\",\n    height: \"0.6rem\",\n    margin: \"0 0.4rem\",\n    backgroundColor: \"#c6aa96\",\n    borderRadius: \"50%\",\n    borderStyle: \"solid\",\n    borderColor: \"#c6aa96\",\n    borderWidth: \"2px\"\n  };\n  const indicatorActiveStyle = {\n    width: \"0.6rem\",\n    height: \"0.6rem\",\n    margin: \"0 0.4rem\",\n    backgroundColor: \"rgba(0, 0, 0, 0)\",\n    borderRadius: \"50%\",\n    borderStyle: \"solid\",\n    borderColor: \"#c6aa96\",\n    borderWidth: \"2px\"\n  };\n  /**\n   * Creates an array of indicators (circle shaped) with `current` one being filled in.\n   * @param amount Number of desired indicators\n   * @param current Index of the active indicator\n   */\n\n  const createIndicators = (amount = props.numberOfPages, current = props.activePage) => {\n    let indicators = [];\n\n    for (let indicator = 0; indicator < amount; indicator++) {\n      if (indicator !== current) {\n        indicators.push(__jsx(\"div\", {\n          key: indicator,\n          style: indicatorActiveStyle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 11\n          }\n        }));\n      } else {\n        indicators.push(__jsx(\"div\", {\n          key: indicator,\n          style: indicatorStyle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }\n        }));\n      }\n    }\n\n    return indicators;\n  };\n\n  return __jsx(\"div\", {\n    id: \"ProgressBarContainer\",\n    style: {\n      width: \"min-content\",\n      display: \"flex\",\n      justifyContent: \"space-evenly\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, createIndicators());\n};\n\nexport default TestProgressBar;","map":{"version":3,"sources":["/Users/yberfox/Documents/personal-projects/modes-muzejs-client/components/TestProgressBar.tsx"],"names":["React","TestProgressBar","props","indicatorStyle","width","height","margin","backgroundColor","borderRadius","borderStyle","borderColor","borderWidth","indicatorActiveStyle","createIndicators","amount","numberOfPages","current","activePage","indicators","indicator","push","display","justifyContent"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,eAAe,GAAIC,KAAD,IAGlB;AACJ,QAAMC,cAAmC,GAAG;AAC1CC,IAAAA,KAAK,EAAE,QADmC;AAE1CC,IAAAA,MAAM,EAAE,QAFkC;AAG1CC,IAAAA,MAAM,EAAE,UAHkC;AAI1CC,IAAAA,eAAe,EAAE,SAJyB;AAK1CC,IAAAA,YAAY,EAAE,KAL4B;AAM1CC,IAAAA,WAAW,EAAE,OAN6B;AAO1CC,IAAAA,WAAW,EAAE,SAP6B;AAQ1CC,IAAAA,WAAW,EAAE;AAR6B,GAA5C;AAWA,QAAMC,oBAAyC,GAAG;AAChDR,IAAAA,KAAK,EAAE,QADyC;AAEhDC,IAAAA,MAAM,EAAE,QAFwC;AAGhDC,IAAAA,MAAM,EAAE,UAHwC;AAIhDC,IAAAA,eAAe,EAAE,kBAJ+B;AAKhDC,IAAAA,YAAY,EAAE,KALkC;AAMhDC,IAAAA,WAAW,EAAE,OANmC;AAOhDC,IAAAA,WAAW,EAAE,SAPmC;AAQhDC,IAAAA,WAAW,EAAE;AARmC,GAAlD;AAWA;AACF;AACA;AACA;AACA;;AACE,QAAME,gBAAgB,GAAG,CACvBC,MAAc,GAAGZ,KAAK,CAACa,aADA,EAEvBC,OAAe,GAAGd,KAAK,CAACe,UAFD,KAGpB;AACH,QAAIC,UAAyB,GAAG,EAAhC;;AAEA,SAAK,IAAIC,SAAS,GAAG,CAArB,EAAwBA,SAAS,GAAGL,MAApC,EAA4CK,SAAS,EAArD,EAAyD;AACvD,UAAIA,SAAS,KAAKH,OAAlB,EAA2B;AACzBE,QAAAA,UAAU,CAACE,IAAX,CACE;AAAK,UAAA,GAAG,EAAED,SAAV;AAAqB,UAAA,KAAK,EAAEP,oBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,OAJD,MAIO;AACLM,QAAAA,UAAU,CAACE,IAAX,CAAgB;AAAK,UAAA,GAAG,EAAED,SAAV;AAAqB,UAAA,KAAK,EAAEhB,cAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAhB;AACD;AACF;;AAED,WAAOe,UAAP;AACD,GAjBD;;AAmBA,SACE;AACE,IAAA,EAAE,EAAC,sBADL;AAEE,IAAA,KAAK,EAAE;AACLd,MAAAA,KAAK,EAAE,aADF;AAELiB,MAAAA,OAAO,EAAE,MAFJ;AAGLC,MAAAA,cAAc,EAAE;AAHX,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGT,gBAAgB,EARnB,CADF;AAYD,CA9DD;;AAgEA,eAAeZ,eAAf","sourcesContent":["import React from \"react\";\nimport { borderRadius } from \"react-select/src/theme\";\n\nconst TestProgressBar = (props: {\n  numberOfPages: number;\n  activePage: number;\n}) => {\n  const indicatorStyle: React.CSSProperties = {\n    width: \"0.6rem\",\n    height: \"0.6rem\",\n    margin: \"0 0.4rem\",\n    backgroundColor: \"#c6aa96\",\n    borderRadius: \"50%\",\n    borderStyle: \"solid\",\n    borderColor: \"#c6aa96\",\n    borderWidth: \"2px\",\n  };\n\n  const indicatorActiveStyle: React.CSSProperties = {\n    width: \"0.6rem\",\n    height: \"0.6rem\",\n    margin: \"0 0.4rem\",\n    backgroundColor: \"rgba(0, 0, 0, 0)\",\n    borderRadius: \"50%\",\n    borderStyle: \"solid\",\n    borderColor: \"#c6aa96\",\n    borderWidth: \"2px\",\n  };\n\n  /**\n   * Creates an array of indicators (circle shaped) with `current` one being filled in.\n   * @param amount Number of desired indicators\n   * @param current Index of the active indicator\n   */\n  const createIndicators = (\n    amount: number = props.numberOfPages,\n    current: number = props.activePage\n  ) => {\n    let indicators: JSX.Element[] = [];\n\n    for (let indicator = 0; indicator < amount; indicator++) {\n      if (indicator !== current) {\n        indicators.push(\n          <div key={indicator} style={indicatorActiveStyle}></div>\n        );\n      } else {\n        indicators.push(<div key={indicator} style={indicatorStyle}></div>);\n      }\n    }\n\n    return indicators;\n  };\n\n  return (\n    <div\n      id=\"ProgressBarContainer\"\n      style={{\n        width: \"min-content\",\n        display: \"flex\",\n        justifyContent: \"space-evenly\",\n      }}\n    >\n      {createIndicators()}\n    </div>\n  );\n};\n\nexport default TestProgressBar;\n"]},"metadata":{},"sourceType":"module"}