{"ast":null,"code":"var _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/LangBtnController.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport compStyle from \"./styles/LangBtnController.module.scss\";\n\nconst LangBtnController = props => {\n  const {\n    0: activeBtnPosition,\n    1: setActiveBtnPosition\n  } = useState();\n  const {\n    0: flatBtns,\n    1: setFlatBtns\n  } = useState([]);\n  const forceUpdate = React.useReducer(() => ({}), {})[1];\n\n  if (flatBtns.length !== props.BtnArray.length) {\n    setFlatBtns(props.BtnArray.map(btn => {\n      if (btn === props.active) return true;else return false;\n    }));\n    console.log(flatBtns);\n  }\n\n  function activeBtnSwitcher(Btns) {\n    setActiveBtnPosition(flatBtns.indexOf(true));\n    flatBtns.pop();\n\n    if (activeBtnPosition == flatBtns.length) {\n      flatBtns.unshift(true);\n    } else {\n      flatBtns.unshift(false);\n    }\n\n    console.log(flatBtns, \"after manipulation\");\n    Btns.forEach((btn, index) => btn[1] = flatBtns[index]);\n    forceUpdate();\n  }\n\n  const {\n    0: activeBtn,\n    1: setActiveBtn\n  } = useState(props.active);\n  /**\n   * Sets currently active button.\n   * @param id of a button\n   */\n\n  const activeBtnSetter = id => setActiveBtn(id); // * Grabbing arrow in the modal which selects next element.\n  // * Assings a click listener to the grabbed element.\n\n\n  let arrowBtn;\n  useEffect(() => {\n    var _arrowBtn;\n\n    console.log(document.getElementById(\"arrowButton\"), \"found it\");\n    arrowBtn = document.getElementById(\"arrowButton\");\n    (_arrowBtn = arrowBtn) === null || _arrowBtn === void 0 ? void 0 : _arrowBtn.addEventListener(\"click\", handleArrowClick);\n    return () => {\n      var _arrowBtn2;\n\n      return (_arrowBtn2 = arrowBtn) === null || _arrowBtn2 === void 0 ? void 0 : _arrowBtn2.removeEventListener(\"click\", handleArrowClick);\n    };\n  }); // * Cleans other buttons from the pressed class.\n\n  useEffect(() => {\n    Btns.forEach(button => {\n      console.log(button[0].props.btnID);\n\n      if (button[0].props.btnID !== activeBtn) {\n        button[1] = false;\n      }\n    });\n  }, []);\n  return __jsx(\"div\", {\n    className: compStyle.LangSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, Btns.map(ele => ele));\n};\n\nexport default LangBtnController;","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/LangBtnController.tsx"],"names":["React","useEffect","useState","compStyle","LangBtnController","props","activeBtnPosition","setActiveBtnPosition","flatBtns","setFlatBtns","forceUpdate","useReducer","length","BtnArray","map","btn","active","console","log","activeBtnSwitcher","Btns","indexOf","pop","unshift","forEach","index","activeBtn","setActiveBtn","activeBtnSetter","id","arrowBtn","document","getElementById","addEventListener","handleArrowClick","removeEventListener","button","btnID","LangSelect","ele"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport LanguageBtn from \"./LanguageBtn\";\nimport compStyle from \"./styles/LangBtnController.module.scss\";\n\nconst LangBtnController = (props) => {\n  type TBtnArrayWithPressedState = {\n    btns: [JSX.Element, boolean];\n  };\n\n  const [activeBtnPosition, setActiveBtnPosition] = useState<Number>();\n  const [flatBtns, setFlatBtns] = useState<Array<boolean>>([]);\n  const forceUpdate = React.useReducer(() => ({}), {})[1] as () => void;\n\n  if (flatBtns.length !== props.BtnArray.length) {\n    setFlatBtns(\n      props.BtnArray.map((btn) => {\n        if (btn === props.active) return true;\n        else return false;\n      })\n    );\n    console.log(flatBtns);\n  }\n\n  function activeBtnSwitcher(Btns: { btns: [JSX.Element, boolean] }[]) {\n    setActiveBtnPosition(flatBtns.indexOf(true));\n    flatBtns.pop();\n    if (activeBtnPosition == flatBtns.length) {\n      flatBtns.unshift(true);\n    } else {\n      flatBtns.unshift(false);\n    }\n    console.log(flatBtns, \"after manipulation\");\n    Btns.forEach((btn, index) => (btn[1] = flatBtns[index]));\n    forceUpdate();\n  }\n\n  const [activeBtn, setActiveBtn] = useState<string>(props.active);\n  /**\n   * Sets currently active button.\n   * @param id of a button\n   */\n  const activeBtnSetter = (id: string) => setActiveBtn(id);\n\n  // * Grabbing arrow in the modal which selects next element.\n  // * Assings a click listener to the grabbed element.\n  let arrowBtn: HTMLElement | null;\n  useEffect(() => {\n    console.log(document.getElementById(\"arrowButton\"), \"found it\");\n    arrowBtn = document.getElementById(\"arrowButton\");\n    arrowBtn?.addEventListener(\"click\", handleArrowClick);\n    return () => arrowBtn?.removeEventListener(\"click\", handleArrowClick);\n  });\n\n  // * Cleans other buttons from the pressed class.\n  useEffect(() => {\n    Btns.forEach((button) => {\n      console.log(button[0].props.btnID);\n      if (button[0].props.btnID !== activeBtn) {\n        button[1] = false;\n      }\n    });\n  }, []);\n\n  return (\n    <div className={compStyle.LangSelect}>{Btns.map((ele: any) => ele)}</div>\n  );\n};\n\nexport default LangBtnController;\n"]},"metadata":{},"sourceType":"module"}