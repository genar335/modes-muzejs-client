{"ast":null,"code":"var _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestPreview.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from \"react\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\n\nconst TestPreview = props => {\n  function handleTextAreaQuestionChange(event) {\n    // let tmpArray =\n    //   props.currentTestState[props.currentLanguage!].pages[props.activePage]\n    //     .QnAPairs;\n    // console.log(\"tmp\", tmpArray);\n    // tmpArray.forEach((ele) => console.log(ele));\n    const tmpArray = props.currentTestState[props.currentLanguage].pages; // console.log(tmpArray);\n    // console.log(tmpArray[props.activePage]);\n    // console.log(tmpArray[props.activePage].QnAPairs[event.currentTarget.id]);\n\n    tmpArray[props.activePage].QnAPairs[event.currentTarget.id].question = event.currentTarget.value; // console.log(tmpArray);\n\n    props.saveChanges(_objectSpread(_objectSpread({}, props.currentTestState), {}, {\n      [props.currentLanguage]: _objectSpread(_objectSpread({}, props.currentTestState[props.currentLanguage]), {}, {\n        pages: tmpArray\n      })\n    }));\n  }\n\n  function questionRenderController(currentItem, currentPair) {\n    switch (props.currentTestState.type) {\n      case \"TT\":\n        return __jsx(\"textarea\", {\n          key: currentItem,\n          id: String(currentItem),\n          onChange: handleTextAreaQuestionChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 11\n          }\n        }, currentPair.question);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  const pageBody = () => {// return (\n    //   <div className={compStyles.pageBody}>\n    //     {props.currentTestState[props.currentLanguage || \"ru\"].pages[\n    //       props.activePage\n    //     ].QnAPairs.map((qnaPair: IQnA, index: number) => (\n    //       <div className={compStyles.qnaPair} id={String(index)}>\n    //         <div className={compStyles.Question}>\n    //           {questionRenderController(index, qnaPair)}\n    //         </div>\n    //         <div className={compStyles.Answer}>Answer: {qnaPair.answer}</div>\n    //       </div>\n    //     ))}\n    //   </div>\n    // );\n  };\n\n  useEffect(() => {\n    pageBody();\n  }, [props.currentTestState]);\n  return __jsx(\"div\", {\n    className: styles.TestPreview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, \"Page: \", props.activePage + 1), __jsx(\"div\", {\n    className: compStyles.TestBGContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, __jsx(FMLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }), pageBody()));\n};\n\nexport default TestPreview;","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestPreview.tsx"],"names":["React","useEffect","styles","FMLogo","compStyles","TestPreview","props","handleTextAreaQuestionChange","event","tmpArray","currentTestState","currentLanguage","pages","activePage","QnAPairs","currentTarget","id","question","value","saveChanges","questionRenderController","currentItem","currentPair","type","String","pageBody","TestBGContainer"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAQA,OAAOC,MAAP,MAAmB,yCAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAKd;AACJ,WAASC,4BAAT,CACEC,KADF,EAEE;AACA;AACA;AACA;AACA;AACA;AACA,UAAMC,QAAQ,GAAGH,KAAK,CAACI,gBAAN,CAAuBJ,KAAK,CAACK,eAA7B,EAA+CC,KAAhE,CANA,CAOA;AACA;AACA;;AACAH,IAAAA,QAAQ,CAACH,KAAK,CAACO,UAAP,CAAR,CAA2BC,QAA3B,CAAoCN,KAAK,CAACO,aAAN,CAAoBC,EAAxD,EAA4DC,QAA5D,GACET,KAAK,CAACO,aAAN,CAAoBG,KADtB,CAVA,CAYA;;AACAZ,IAAAA,KAAK,CAACa,WAAN,iCACKb,KAAK,CAACI,gBADX;AAEE,OAACJ,KAAK,CAACK,eAAP,mCACKL,KAAK,CAACI,gBAAN,CAAuBJ,KAAK,CAACK,eAA7B,CADL;AAEEC,QAAAA,KAAK,EAAEH;AAFT;AAFF;AAOD;;AAED,WAASW,wBAAT,CAAkCC,WAAlC,EAAuDC,WAAvD,EAA0E;AACxE,YAAQhB,KAAK,CAACI,gBAAN,CAAuBa,IAA/B;AACE,WAAK,IAAL;AACE,eACE;AACE,UAAA,GAAG,EAAEF,WADP;AAEE,UAAA,EAAE,EAAEG,MAAM,CAACH,WAAD,CAFZ;AAGE,UAAA,QAAQ,EAAEd,4BAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAKGe,WAAW,CAACL,QALf,CADF;AASA;;AAEF;AACE;AAdJ;AAgBD;;AACD,QAAMQ,QAAQ,GAAG,MAAM,CACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAfD;;AAiBAxB,EAAAA,SAAS,CAAC,MAAM;AACdwB,IAAAA,QAAQ;AACT,GAFQ,EAEN,CAACnB,KAAK,CAACI,gBAAP,CAFM,CAAT;AAIA,SACE;AAAK,IAAA,SAAS,EAAER,MAAM,CAACG,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAWC,KAAK,CAACO,UAAN,GAAmB,CAA9B,CADF,EAEE;AAAK,IAAA,SAAS,EAAET,UAAU,CAACsB,eAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGD,QAAQ,EAFX,CAFF,CADF;AASD,CA9ED;;AAgFA,eAAepB,WAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport {\n  IQnA,\n  IQnAPairs,\n  ITest,\n  TLangOption,\n  TTestTypes,\n} from \"../@types/test\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\n\nconst TestPreview = (props: {\n  activePage: number;\n  currentLanguage: TLangOption[\"value\"] | undefined;\n  currentTestState: ITest;\n  saveChanges: (test: ITest) => void;\n}) => {\n  function handleTextAreaQuestionChange(\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) {\n    // let tmpArray =\n    //   props.currentTestState[props.currentLanguage!].pages[props.activePage]\n    //     .QnAPairs;\n    // console.log(\"tmp\", tmpArray);\n    // tmpArray.forEach((ele) => console.log(ele));\n    const tmpArray = props.currentTestState[props.currentLanguage!].pages;\n    // console.log(tmpArray);\n    // console.log(tmpArray[props.activePage]);\n    // console.log(tmpArray[props.activePage].QnAPairs[event.currentTarget.id]);\n    tmpArray[props.activePage].QnAPairs[event.currentTarget.id].question =\n      event.currentTarget.value;\n    // console.log(tmpArray);\n    props.saveChanges({\n      ...props.currentTestState,\n      [props.currentLanguage!]: {\n        ...props.currentTestState[props.currentLanguage!],\n        pages: tmpArray,\n      },\n    });\n  }\n\n  function questionRenderController(currentItem: number, currentPair: IQnA) {\n    switch (props.currentTestState.type) {\n      case \"TT\":\n        return (\n          <textarea\n            key={currentItem}\n            id={String(currentItem)}\n            onChange={handleTextAreaQuestionChange}\n          >\n            {currentPair.question}\n          </textarea>\n        );\n        break;\n\n      default:\n        break;\n    }\n  }\n  const pageBody = () => {\n    // return (\n    //   <div className={compStyles.pageBody}>\n    //     {props.currentTestState[props.currentLanguage || \"ru\"].pages[\n    //       props.activePage\n    //     ].QnAPairs.map((qnaPair: IQnA, index: number) => (\n    //       <div className={compStyles.qnaPair} id={String(index)}>\n    //         <div className={compStyles.Question}>\n    //           {questionRenderController(index, qnaPair)}\n    //         </div>\n    //         <div className={compStyles.Answer}>Answer: {qnaPair.answer}</div>\n    //       </div>\n    //     ))}\n    //   </div>\n    // );\n  };\n\n  useEffect(() => {\n    pageBody();\n  }, [props.currentTestState]);\n\n  return (\n    <div className={styles.TestPreview}>\n      <h3>Page: {props.activePage + 1}</h3>\n      <div className={compStyles.TestBGContainer}>\n        <FMLogo />\n        {pageBody()}\n      </div>\n    </div>\n  );\n};\n\nexport default TestPreview;\n"]},"metadata":{},"sourceType":"module"}