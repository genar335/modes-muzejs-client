{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useReducer, useRef, useState } from \"react\";\nimport { useRouter } from \"next/router\"; // import interact from \"interactjs\";\n\nimport styles from \"../styles/test.module.scss\";\nimport { DndProvider } from \"react-dnd\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport Draggable // DraggableEventHandler,\nfrom \"react-draggable\";\nimport store from \"store\";\nimport { productionURL, productionHost, URLCheckForLocalHost } from \"../../components/constants\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport TestProgressBar from \"../../components/TestProgressBar\";\nimport { Arrow } from \"../../components/PagesController\";\nimport Axios from \"axios\";\n\nfunction Test(props) {\n  const router = useRouter();\n  const {\n    0: pages,\n    1: setPages\n  } = useState();\n  const {\n    0: pagesContent,\n    1: setPagesContent\n  } = useState([]); // const [qnaOverlaps, setQnaOverlaps] = useState(0);\n\n  const qnaOverlaps = useRef({\n    counter: 0\n  }); // const [currentPage, setCurrentPage] = useState<number>(0);\n\n  const initalPage = {\n    count: 0\n  };\n\n  function reducer(page, action) {\n    console.log(pages === null || pages === void 0 ? void 0 : pages.length);\n    console.log(page.count, \"counter\");\n\n    switch (action.type) {\n      case \"increment\":\n        if (page.count + 1 !== (pages === null || pages === void 0 ? void 0 : pages.length)) {\n          return {\n            count: page.count + 1\n          };\n        } else {\n          return {\n            count: page.count\n          };\n        }\n\n      case \"decrement\":\n        if (page.count !== 0) {\n          return {\n            count: page.count - 1\n          };\n        } else {\n          return {\n            count: page.count\n          };\n        }\n\n      default:\n        throw new Error();\n    }\n  }\n\n  const {\n    0: page,\n    1: dispatch\n  } = useReducer(reducer, initalPage);\n  useEffect(() => {\n    if (page.count + 1 === pagesContent.length && page.count !== 0 && pagesContent.length !== 0 // !props.test\n    ) {\n      console.log(page.count);\n      console.log(pagesContent.length);\n    }\n  });\n  const {\n    0: qaRectPositions,\n    1: setqaRectPositions\n  } = useState({\n    q: {},\n    a: {}\n  }); // useEffect(() => {\n  //   console.log(qaRectPositions.a?.x, qaRectPositions.q?.x, \"x, x\");\n  // }, [qaRectPositions]);\n\n  const refsToQuestions = useRef([]);\n  const refsToAnswersHandles = useRef([]);\n  const refsToAnswersPositions = useRef([]);\n  const {\n    0: test,\n    1: setTest\n  } = useState();\n  useEffect(() => {\n    if (props.test) {\n      setPagesContent(props.test.ru.pages);\n    } else {\n      console.log(router.query); //TODO: direct to /client/success?testid=${testid}&lang=${lang} once test is finished\n\n      const chosenLang = router.query.lang;\n      const test = store.get(\"theTest\");\n      setTest(test);\n      console.log(chosenLang);\n      setPagesContent(test[store.get(\"activeLang\")].pages);\n    } // createQnAPairs(activeLang.pages);\n\n  }, []);\n  useEffect(() => {\n    const pagesPrep = prepareJSXOfPages(refsToQuestions); // console.log(pagesPrep);\n  }, [pagesContent]); // console.log(qnaOverlaps.current.counter);\n\n  function isImgOrText(data) {\n    return data.match(URLCheckForLocalHost) ? true : false;\n  }\n  /**\n   * Returns either an <img> or <p> containig the `data`\n   * @param data string containing eihter the text of a question/answer or a link to the image\n   */\n\n\n  function imgOrText(data) {\n    // console.log(data);\n    // console.log(data.match(URLCheckFor192.168.8.100));\n    if (data.match(URLCheckForLocalHost) !== null) {\n      return __jsx(\"img\", {\n        style: {\n          width: \"100%\",\n          height: \"100%\",\n          objectFit: \"cover\",\n          borderRadius: \"16px\",\n          border: \"#cba992 solid 3px\"\n        },\n        src: data,\n        alt: \":(\"\n      });\n    } else {\n      return (// <div>\n        __jsx(\"p\", {\n          style: {\n            width: \"100%\",\n            margin: \"0\",\n            padding: \"1rem\",\n            boxSizing: \"border-box\",\n            textAlign: \"center\",\n            lineHeight: \"110%\"\n          }\n        }, data) // </div>\n\n      );\n    }\n  }\n\n  function handleDrag(event, data) {\n    // console.log(data);\n    // alert(\"Dragging\");\n    let tmp = event.target.parentElement.parentElement.id; // console.log(tmp);\n\n    const id = tmp.slice(tmp.indexOf(\"_\") + 1, tmp.lastIndexOf(\"_\")); // console.log(id);\n\n    refsToAnswersPositions.current[id] = {\n      position: data\n    };\n  }\n\n  function handleStopOfADrag(event, data) {\n    if (event.target.parentElement.parentElement.classList[0].includes(\"test_TCard\")) {\n      let tmp = event.target.parentElement.parentElement.id;\n      const id = tmp.slice(tmp.indexOf(\"_\") + 1, tmp.lastIndexOf(\"_\"));\n      const {\n        questionRect,\n        answerRect\n      } = getRectanglesFromEvent(event);\n      const intersections = refsToQuestions.current.map(q => CheckIfAnswerIntersectedTheQuestion(q.getBoundingClientRect(), answerRect));\n      console.log(intersections);\n\n      if (CheckIfAnswerIntersectedTheQuestion(questionRect, answerRect)) {\n        // console.log(event.target.parentNode.parentNode);\n        // event.target.parentNode.parentNode.style.pointerEvents = \"none\";\n        applyCSSToMatchedCards(event, refsToQuestions.current[id]);\n        qnaOverlaps.current.counter += 1;\n        console.log(refsToQuestions.current[id]);\n        const questionContainer = refsToQuestions.current[id].parentElement; // console.log(questionContainer, \"123123\");\n        // console.log(refsToAnswersHandles.current[id]);\n\n        refsToAnswersHandles.current[id].parentElement.style.transform = \"translate(0px, 0px)\";\n        refsToAnswersHandles.current[id].parentElement.style.marginTop = \"-1rem\";\n        questionContainer.appendChild(refsToAnswersHandles.current[id].parentElement); // event.target.style.pointerEvents.parentElement = \"none\";\n\n        if (qnaOverlaps.current.counter === 3) {\n          // alert(pagesContent.length);\n          // if (page.count < pagesContent.length - 1) {\n          refsToQuestions.current = []; // setCurrentPage(currentPage + 1);\n          // setTimeout(() => {\n\n          dispatch({\n            type: \"increment\"\n          }); // }, 1000);\n\n          console.log(page.count, \"pages\", pagesContent.length, \"pagesContent\"); // }\n\n          qnaOverlaps.current.counter = 0;\n        }\n      } else {\n        intersections.includes(true) && flashScreen();\n      } // refsToAnswersPositions.current[id] = {\n      //   position: {\n      //     x: data.x,\n      //     y: data.y,\n      //     deltaX: data.x - data.lastX,\n      //     deltaY: data.y - data.lastY,\n      //   },\n      // };\n\n\n      refsToAnswersPositions.current[id] = {\n        position: data\n      };\n    }\n  }\n\n  async function flashScreen() {\n    const testBody = document.getElementsByClassName(styles.pageContainer)[0];\n    testBody.style.boxShadow = \"inset 0px 0px 30px 30px red\";\n    setTimeout(() => testBody.style.boxShadow = \"none\", 500);\n  }\n\n  function applyCSSToMatchedCards(event, answer) {\n    // // Sets the contasiner of cards to be unclickable/untouchable.\n    // event.target.parentElement.parentElement.parentElement.parentElement.style.pointerEvents =\n    //   \"none\";\n    console.log(answer.parentElement);\n    answer.parentElement.style.pointerEvents = \"none\"; // answer.style.width = \"100rem\";\n    //* Applies a greenish border around answer cards.\n\n    console.log(event.target.tagName);\n\n    if (event.target.tagName == \"P\") {\n      console.log(event.target.parentElement.parentElement.style.border);\n      event.target.parentElement.parentElement.style.border = \"solid 5px rgb(37, 180, 150)\";\n      event.target.parentElement.parentElement.parentElement.style.position = \"inherit\";\n      console.log(event.target.parentElement.parentElement.style.border);\n    } else if (event.target.tagName == \"IMG\") {\n      console.log(event.target); // event.target.style.border = \"none\";\n\n      event.target.style.border = \"solid 5px rgb(37, 180, 150)\";\n      event.target.style.borderColor = \"rgb(73, 180, 150,)\";\n      event.target.parentElement.parentElement.parentElement.style.position = \"inherit\";\n    }\n  }\n  /**\n   * Checks whether the dragged element intersects its question.\n   * @param event refer to React Draggable\n   */\n\n\n  function CheckIfAnswerIntersectedTheQuestion(questionRect, answerRect) {\n    // const { questionRect, answerRect } = getRectangles(event);\n    // let answerRect = answerDragged.parentElement!.getBoundingClientRect();\n    setqaRectPositions({\n      q: questionRect,\n      a: answerRect\n    });\n\n    if (questionRect.x < answerRect.x + answerRect.width && questionRect.x + questionRect.width > answerRect.x) {\n      if (questionRect.y < answerRect.y + answerRect.height && questionRect.y + questionRect.height > answerRect.y) {\n        // console.log(answerDragged.parentElement?.parentElement, \"oi\");\n        // answerDragged.parentElement!.style.filter = \"brightness(0.5)\";\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function getRectanglesFromEvent(event) {\n    setqaRectPositions({});\n    const answerDragged = event.target.parentElement.parentElement;\n    const answerDraggedID = answerDragged.id; // const relatedQuestion = document.getElementById(\n    //   `Question_${answerDraggedID.slice(answerDraggedID.indexOf(\"_\"))}`\n    // );\n\n    const answerDraggedIterator = answerDraggedID.slice(answerDraggedID.indexOf(\"_\") + 1, answerDraggedID.lastIndexOf(\"_\"));\n    const relatedAnswerHandle = refsToAnswersHandles.current[Number(answerDraggedIterator)]; // console.log(relatedAnswerHandle, \"handles\");\n\n    const relatedQuestionHandle = refsToQuestions.current[Number(answerDraggedIterator)]; // console.log(relatedQuestionHandle, \"handles\");\n\n    const questionRect = relatedQuestionHandle.getBoundingClientRect();\n    const answerRect = relatedAnswerHandle.getBoundingClientRect();\n    return {\n      questionRect,\n      answerRect\n    };\n  }\n\n  const TestCompletionAcknowledgement = () => {\n    return {\n      ru: `Тест \"${props.test ? props.test[props.activeLanguage].name : store.get(\"theTest\").ru.name}\" пройден.`,\n      lv: `Tests \"${props.test ? props.test[props.activeLanguage].name : store.get(\"theTest\").lv.name}\" ir pabeigts.`,\n      en: `Test \"${props.test ? props.test[props.activeLanguage].name : store.get(\"theTest\").en.name}\" is compeleted.`\n    };\n  };\n\n  const {\n    0: clientEmail,\n    1: setClientEmail\n  } = useState(\"\");\n  const emailRef = useRef(\"\");\n\n  function prepareLastPageJSX(body, heading, email) {\n    console.log(heading, body);\n    return __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-evenly\",\n        alignItems: \"center\",\n        flexDirection: \"row\",\n        width: \"100%\",\n        height: \"100%\"\n      }\n    }, __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        width: \"50%\"\n      }\n    }, __jsx(\"h1\", {\n      style: {\n        color: \"#c6aa96\",\n        textAlign: \"center\",\n        fontWeight: 300,\n        fontSize: \"60px\",\n        margin: \"0\"\n      }\n    }, heading), __jsx(\"p\", {\n      style: {\n        fontSize: \"36px\",\n        fontWeight: 300,\n        textAlign: \"center\"\n      }\n    }, body)), __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        width: \"40%\",\n        height: \"160px\",\n        justifyContent: \"space-around\"\n      }\n    }, email && // <form onSubmit={(e) => e.preventDefault()}>\n    __jsx(\"input\", {\n      onChange: e => {\n        emailRef.current = e.target.value;\n        console.log(emailRef.current, \"ref\"); // setClientEmail(e.target.value);\n\n        console.log(clientEmail, \"state\");\n        console.log(e.target.value);\n        console.log(e.currentTarget.value);\n      },\n      autoComplete: \"off\",\n      style: {\n        // position: \"absolute\",\n        background: \"rgba(0, 0, 0, 0)\",\n        color: \"#C6AA96\",\n        border: \"#C6AA96 solid 3px\",\n        padding: \"0\",\n        borderRadius: \"16px\",\n        // width: \"100%\",\n        height: \"30%\",\n        fontSize: \"35px\",\n        textAlign: \"center\"\n      },\n      placeholder: \"example@mail.com\",\n      type: \"email\",\n      name: \"userInfo\",\n      id: \"userEmail\"\n    }), __jsx(\"button\", {\n      style: {\n        width: \"100%\",\n        height: \"45%\",\n        backgroundColor: \"#C6AA96\",\n        border: \"none\",\n        borderRadius: \"16px\",\n        padding: \"0\" // WebkitTextFillColor: \"transparent\",\n        // WebkitBackgroundClip: \"text\",\n\n      },\n      onClick: handleSendBtnClick\n    }, __jsx(\"p\", {\n      style: {\n        margin: \"0\",\n        color: \"black\",\n        fontFamily: \"Montserrat\",\n        fontSize: \"40px\",\n        fontWeight: 700,\n        background: \"whatever\",\n        letterSpacing: 6 // WebkitTextFillColor: \"transparent\",\n        // WebkitBackgroundClip: \"text\",\n\n      }\n    }, getBtnText().toLocaleUpperCase()))));\n\n    function getBtnText() {\n      return getLang() === \"en\" ? \"Finish\" : getLang() === \"lv\" ? \"Pabeigt\" : \"Закончить\";\n    }\n\n    function getLang() {\n      return store.get(\"activeLang\");\n    }\n  }\n\n  async function handleSendBtnClick(e) {\n    console.log(e); // const response = await Axios.post(`${productionURL}email`, {\n    //   email: clientEmail,\n    // });\n\n    const options = {\n      method: \"POST\",\n      url: \"https://modesmuzejs.lv/api/quiz/tests/email\",\n      origin: productionHost,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      data: {\n        email: \"1231@gmail.com\"\n      }\n    }; // await Axios.request(options)\n    //   .then(function (response) {\n    //     console.log(response.data);\n    //   })\n    //   .catch(function (error) {\n    //     console.error(error);\n    //   });\n    // console.log(response);\n\n    console.log(clientEmail, \"state\");\n    console.log({\n      email: clientEmail\n    });\n    const response = await Axios.post(`${productionURL}tests/email`, {\n      email: emailRef.current\n    });\n    console.log(response);\n\n    if (response.status === 200) {\n      router.push(`${productionHost}/client/languages?testid=${store.get(\"theTest\").id}`);\n    }\n  }\n\n  function prepareFirstPage() {\n    return txtExpalantion();\n  }\n\n  const start_test_btn = () => __jsx(\"svg\", {\n    width: \"116.656\",\n    height: \"116.66\",\n    viewBox: \"0 0 116.656 116.66\"\n  }, __jsx(\"defs\", null, __jsx(\"filter\", {\n    id: \"Path_14\",\n    x: \"0\",\n    y: \"0\",\n    width: \"116.656\",\n    height: \"116.66\",\n    filterUnits: \"userSpaceOnUse\"\n  }, __jsx(\"feOffset\", {\n    dy: \"3\"\n  }), __jsx(\"feGaussianBlur\", {\n    stdDeviation: \"3\",\n    result: \"blur\"\n  }), __jsx(\"feFlood\", {\n    \"flood-opacity\": \"0.161\"\n  }), __jsx(\"feComposite\", {\n    operator: \"in\",\n    in2: \"blur\"\n  }), __jsx(\"feComposite\", {\n    in: \"SourceGraphic\"\n  }))), __jsx(\"g\", {\n    id: \"Icon_feather-arrow-right-circle\",\n    \"data-name\": \"Icon feather-arrow-right-circle\",\n    transform: \"translate(11.503 6.771)\"\n  }, __jsx(\"g\", {\n    transform: \"matrix(1, 0, 0, 1, -11.5, -6.77)\",\n    filter: \"url(#Path_14)\"\n  }, __jsx(\"path\", {\n    id: \"Path_14-2\",\n    \"data-name\": \"Path 14\",\n    d: \"M95.656,49.33A46.328,46.328,0,1,1,49.328,3,46.329,46.329,0,0,1,95.656,49.33Z\",\n    transform: \"translate(9 6)\",\n    fill: \"none\",\n    stroke: \"#c6aa96\",\n    \"stroke-linecap\": \"round\",\n    \"stroke-linejoin\": \"round\",\n    \"stroke-width\": \"6\"\n  })), __jsx(\"path\", {\n    id: \"Path_15\",\n    \"data-name\": \"Path 15\",\n    d: \"M18,47.06,35.53,29.53,18,12\",\n    transform: \"translate(28.825 19.03)\",\n    fill: \"none\",\n    stroke: \"#c6aa96\",\n    \"stroke-linecap\": \"round\",\n    \"stroke-linejoin\": \"round\",\n    \"stroke-width\": \"5\"\n  }), __jsx(\"path\", {\n    id: \"Path_16\",\n    \"data-name\": \"Path 16\",\n    d: \"M12,18H47.06\",\n    transform: \"translate(17.295 30.559)\",\n    fill: \"none\",\n    stroke: \"#c6aa96\",\n    \"stroke-linecap\": \"round\",\n    \"stroke-linejoin\": \"round\",\n    \"stroke-width\": \"5\"\n  })));\n\n  function txtExpalantion() {\n    const sampleTxt = {\n      ru: \"Найдите соответствие, переставляя нижние карточки.\",\n      en: \"Find a match by moving the bottom cards.\",\n      lv: \"Atrodiet atbilstību, pārliekot apakšējas kartītes.\"\n    };\n    return __jsx(\"div\", {\n      id: \"btn_txt_container\",\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-evenly\",\n        height: \"40%\"\n      }\n    }, __jsx(\"h1\", {\n      style: {\n        fontWeight: 400,\n        fontSize: \"xxx-large\",\n        textAlign: \"center\"\n      }\n    }, sampleTxt[store.get(\"activeLang\")]), __jsx(\"button\", {\n      style: {\n        background: \"none\",\n        border: \"none\"\n      },\n      onClick: () => dispatch({\n        type: \"increment\"\n      })\n    }, start_test_btn()));\n  }\n\n  function ExplanatoryVideo() {\n    return __jsx(\"div\", {\n      style: {\n        position: \"absolute\",\n        width: \"100vw\",\n        height: \"100vh\",\n        background: \"black\",\n        zIndex: 10000,\n        top: 0,\n        left: 0\n      }\n    }, __jsx(\"video\", {\n      onEnded: () => dispatch({\n        type: \"increment\"\n      }),\n      controls: true,\n      autoPlay: true,\n      style: {\n        width: \"100%\"\n      }\n    }, __jsx(\"source\", {\n      src: \"/Test_Example.webm\",\n      type: \"video/webm\"\n    })));\n  }\n  /**\n   * Wraps question and answer pairs into a div (containing 3 pairs in this case)\n   */\n\n\n  function prepareJSXOfPages(refsToQuestions) {\n    // console.log(pagesContent);\n    let pagesPrep = [];\n    console.log(pagesPrep);\n    props.fromPreview == undefined && pagesPrep.push(prepareFirstPage());\n    const tmpPages = pagesContent.map((page, pageIterator) => // <AnimatePresence>\n    __jsx(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      exit: {\n        opacity: 0\n      },\n      id: `page-${pageIterator}`,\n      key: pageIterator,\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-evenly\",\n        width: \"90%\",\n        height: \"88%\"\n      }\n    }, qnaPairsToJSX(page, pageIterator, refsToQuestions)) // </AnimatePresence>\n    ); // console.log(tmpPages);\n\n    pagesPrep.push(...tmpPages); // console.log(pagesPrep);\n\n    let tmp;\n\n    if (props.fromPreview) {\n      tmp = store.get(\"testInProgress\");\n    } else {\n      tmp = store.get(\"theTest\");\n    }\n\n    console.log(tmp);\n    const {\n      finalPageTextBody,\n      finalPageTextHeading\n    } = tmp[store.get(\"activeLang\")] || props.test[props.activeLanguage];\n    console.log(tmp);\n    const lastPage = prepareLastPageJSX(finalPageTextBody, finalPageTextHeading, tmp.emailSender\n    /* as boolean */\n    );\n    pagesPrep.push(lastPage);\n    setPages(pagesPrep); // console.log(pages);\n\n    return pagesPrep;\n  }\n\n  const textCardCSSSetting = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    width: \"320px\",\n    height: \"min-content\",\n    // padding: \"1rem\",\n    border: \"3px solid rgb(198\t169\t149\t)\"\n  };\n\n  function setStyleAccordingToTestType(cardData) {\n    switch (test === null || test === void 0 ? void 0 : test.type) {\n      case \"PP\":\n        return {\n          width: \"250px\",\n          height: \"259.37px\"\n        };\n\n      case \"TT\":\n        return textCardCSSSetting;\n\n      default:\n        return isImgOrText(cardData) ? {\n          width: \"320px\",\n          height: \"347px\"\n        } : textCardCSSSetting;\n    }\n  }\n  /**\n   * Returns an array of JSX Elements containing question and answer cards (which are shuffled randomly before rendering) in pairs\n   * @param page Array of question and answer pairs to be rendered\n   * @param pageIterator page (int) to which the array corresponds\n   */\n\n\n  function qnaPairsToJSX(page, pageIterator, refsToQuestions) {\n    let questions = page.QnAPairs.map((qnaPair, iterator) => __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }\n    }, __jsx(\"div\", {\n      className: styles.TCard,\n      id: `Question_${iterator}_p-${pageIterator}`,\n      key: `Question_${iterator}_p-${pageIterator}`,\n      style: setStyleAccordingToTestType(qnaPair.question)\n    }, __jsx(\"div\", {\n      style: {\n        height: \"100%\",\n        boxSizing: \"border-box\"\n      }\n    }, imgOrText(qnaPair.question))), __jsx(\"div\", {\n      ref: ele => refsToQuestions.current[iterator] = ele,\n      style: {\n        marginTop: isImgOrText(qnaPair.question) ? \"0.2rem\" : \"-0.1rem\",\n        width: \"min-content\",\n        zIndex: 100\n      }\n    }, StickCircle())));\n\n    for (let i = 0; i < page.QnAPairs.length; i++) {\n      refsToAnswersPositions.current[i] = {\n        position: {\n          x: 0,\n          y: 0\n        }\n      };\n    }\n\n    let answers = page.QnAPairs.map((qnaPair, iterator) => __jsx(Draggable, {\n      axis: \"both\" // onTouchStart={handleStartOfDrag}\n      ,\n      onDrag: handleDrag // position={refsToAnswersPositions.current[iterator].position}\n      ,\n      onStop: handleStopOfADrag // position={null}\n      // grid={[25, 25]}\n      ,\n      defaultPosition: {\n        x: 0,\n        y: 0\n      },\n      scale: 1\n    }, __jsx(\"div\", {\n      style: {\n        position: \"absolute\",\n        bottom: \"10%\",\n        display: \"flex\",\n        flexDirection: \"column-reverse\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        zIndex: 100 // border: \"3px solid rgb(198\t169\t149\t)\",\n\n      }\n    }, __jsx(\"div\", {\n      className: styles.TCard,\n      id: `Answer_${iterator}_p-${pageIterator}`,\n      key: iterator,\n      style: setStyleAccordingToTestType(qnaPair.answer)\n    }, __jsx(\"div\", {\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        boxSizing: \"border-box\"\n      }\n    }, imgOrText(qnaPair.answer))), __jsx(\"div\", {\n      ref: ele => refsToAnswersHandles.current[iterator] = ele,\n      style: {\n        zIndex: 100,\n        marginBottom: isImgOrText(qnaPair.answer) ? \"-0.35rem\" : \"-0.3rem\",\n        width: \"min-content\"\n      }\n    }, StickSemiCircle()))));\n    let answersShuffled = shuffle(answers);\n    let questionsShuffled = shuffle(questions); // console.log(tmp);\n    // console.log(questions, answers);\n\n    let preparedPairsShuffled = page.QnAPairs.map((_, iterator) => __jsx(motion.div, {\n      // initial=\"hidden\"\n      // animate=\"visible\"\n      variants: variantsQnAPairs,\n      transition: {\n        duration: \"1.5\"\n      },\n      key: `QuestionAnswerP-${iterator}_p-${pageIterator}`,\n      className: styles.qnaContainer\n    }, questions[iterator], answersShuffled[iterator]));\n    return preparedPairsShuffled;\n  }\n\n  const variantsQnAPairs = {\n    visible: {\n      opacity: 1\n    },\n    hidden: {\n      opacity: 0\n    }\n  };\n\n  function shuffle(array) {\n    let m = array.length;\n    let t;\n    let i; // console.log(m, t, i);\n    // While there remain elements to shuffle…\n\n    while (m) {\n      // Pick a remaining element…\n      i = Math.floor(Math.random() * m--); // console.log(i, \"i\");\n      // And swap it with the current element.\n\n      t = array[m];\n      array[m] = array[i];\n      array[i] = t; // console.log(array);\n    }\n\n    return array;\n  }\n\n  const StickCircle = () => __jsx(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"19\",\n    height: \"26.956\",\n    viewBox: \"0 0 19 26.956\"\n  }, __jsx(\"g\", {\n    id: \"Group_35\",\n    \"data-name\": \"Group 35\",\n    transform: \"translate(-115.882 -241.137)\"\n  }, __jsx(\"line\", {\n    id: \"Line_1\",\n    \"data-name\": \"Line 1\",\n    y2: \"11\",\n    transform: \"translate(125.357 243.137)\",\n    fill: \"none\",\n    stroke: \"#c6aa96\" // strokeLinecap=\"round\"\n    ,\n    strokeWidth: \"4\"\n  }), __jsx(\"circle\", {\n    id: \"Ellipse_4\",\n    \"data-name\": \"Ellipse 4\",\n    cx: \"9.5\",\n    cy: \"9.5\",\n    r: \"9.5\",\n    transform: \"translate(115.882 249.094)\",\n    fill: \"#c6aa96\"\n  })));\n\n  const StickSemiCircle = () => __jsx(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"19\",\n    height: \"18.761\",\n    viewBox: \"0 0 19 18.761\"\n  }, __jsx(\"g\", {\n    id: \"Group_34\",\n    \"data-name\": \"Group 34\",\n    transform: \"translate(-115.996 0)\"\n  }, __jsx(\"line\", {\n    id: \"Line_4\",\n    \"data-name\": \"Line 4\",\n    y2: \"110\",\n    transform: \"translate(125.357 5.761)\",\n    fill: \"none\",\n    stroke: \"#c6aa96\" // strokeLinecap=\"round\"\n    ,\n    strokeWidth: \"4\"\n  }), __jsx(\"g\", {\n    id: \"Path_11\",\n    \"data-name\": \"Path 11\",\n    transform: \"translate(115.996 -7.551)\",\n    fill: \"none\"\n  }, __jsx(\"path\", {\n    d: \"M9.5,11.26c5.247,0,9.5-7.007,9.5-1.76a9.5,9.5,0,0,1-19,0C0,4.253,4.253,11.26,9.5,11.26Z\",\n    stroke: \"none\"\n  }), __jsx(\"path\", {\n    d: \"M 0.8809738159179688 7.550793647766113 C 2.390966415405273 7.550793647766113 5.682500839233398 11.26012802124023 9.5 11.26012802124023 C 13.31717872619629 11.26012802124023 16.60886001586914 7.551321029663086 18.11902618408203 7.550793647766113 C 18.68457794189453 7.550596237182617 19 8.070477485656738 19 9.499998092651367 C 19 14.74670791625977 14.74670028686523 18.99999809265137 9.5 18.99999809265137 C 4.253299713134766 18.99999809265137 0 14.74670791625977 0 9.499998092651367 C 0 8.070796966552734 0.3156604766845703 7.550793647766113 0.8809738159179688 7.550793647766113 Z\",\n    stroke: \"none\",\n    fill: \"#c6aa96\"\n  }))));\n\n  const ExitBtn = size => __jsx(\"svg\", {\n    // className={compStyles.CloseBTN}\n    onClick: () => !props.test && router.push(`${productionURL}client/languages?testid=${store.get(\"theTest\").id}`),\n    width: size,\n    height: size,\n    viewBox: \"0 0 56 56\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, __jsx(\"g\", {\n    id: \"Group_28\",\n    \"data-name\": \"Group 28\",\n    transform: \"translate(-1194 -73)\"\n  }, __jsx(\"circle\", {\n    id: \"Ellipse_8\",\n    \"data-name\": \"Ellipse 8\",\n    cx: \"16.5\",\n    cy: \"16.5\",\n    r: \"16.5\",\n    transform: \"translate(1194 73)\",\n    fill: \"#c6aa96\"\n  }), __jsx(\"path\", {\n    id: \"Icon_ionic-ios-close\",\n    \"data-name\": \"Icon ionic-ios-close\",\n    d: \"M23.921,21.5l7.3-7.3A1.71,1.71,0,0,0,28.8,11.786l-7.3,7.3-7.3-7.3A1.71,1.71,0,1,0,11.788,14.2l7.3,7.3-7.3,7.3a1.71,1.71,0,1,0,2.418,2.418l7.3-7.3,7.3,7.3A1.71,1.71,0,1,0,31.218,28.8Z\",\n    transform: \"translate(1188.715 67.711)\",\n    fill: \"#1b212e\"\n  })));\n\n  function checkWhetherIsPreview() {\n    if (props.test) {\n      const PreviewStyle = {\n        width: \"100%\",\n        height: \"100%\"\n      };\n      return PreviewStyle;\n    }\n\n    return {};\n  }\n\n  return __jsx(DndProvider, {\n    backend: TouchBackend\n  }, props.test && __jsx(React.Fragment, null, __jsx(\"button\", {\n    style: {\n      position: \"absolute\",\n      top: \"46%\",\n      right: \"3%\",\n      border: \"none\",\n      background: \"none\"\n    },\n    onClick: () => {\n      console.log(\"123\");\n      dispatch({\n        type: \"increment\"\n      });\n    }\n  }, Arrow(\"60\", \"84\")), __jsx(\"button\", {\n    style: {\n      position: \"absolute\",\n      top: \"46%\",\n      left: \"3%\",\n      transform: \"rotate(180deg)\",\n      background: \"none\",\n      border: \"none\"\n    },\n    onClick: () => dispatch({\n      type: \"decrement\"\n    })\n  }, Arrow(\"60\", \"84\"))), __jsx(AnimatePresence, {\n    exitBeforeEnter: true\n  }, __jsx(motion.div, {\n    key: \"animatedPage\",\n    initial: {\n      opacity: 0,\n      y: -100\n    },\n    animate: {\n      opacity: 1,\n      y: 0\n    },\n    exit: {\n      opacity: 0,\n      y: 500\n    },\n    className: styles.pageContainer,\n    style: checkWhetherIsPreview()\n  }, !props.test && __jsx(\"img\", {\n    src: \"https://www.fashionmuseumriga.lv/bitrix/templates/main_template/img/logo.png\",\n    alt: \"Fashion Museum\",\n    id: styles.MMlogo\n  }), __jsx(motion.div, {\n    key: \"testContainerAnima\",\n    className: styles.testContainer\n  }, (pages === null || pages === void 0 ? void 0 : pages.length) - 1 != page.count\n  /* 578G */\n  && __jsx(\"button\", {\n    style: {\n      opacity: \"70%\",\n      position: \"absolute\",\n      right: \"2%\",\n      top: \"5%\",\n      backgroundColor: \"rgba(0, 0, 0, 0)\",\n      border: \"none\"\n    }\n  }, ExitBtn(\"45\")), pages !== undefined && page.count !== (pages === null || pages === void 0 ? void 0 : pages.length) - 1 && __jsx(TestProgressBar // activePage={!props.fromPreview ? page.count - 1 : page.count}\n  , {\n    activePage:\n    /* props.fromPreview == undefined ? page.count - 1 : */\n    page.count,\n    numberOfPages: props.fromPreview == undefined ? pages.length - 1 : pages.length // numberOfPages={\n    //   !props.fromPreview ? pages?.length - 1 : page.count\n    // }\n    // numberOfPages={10}\n\n  }), __jsx(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      pointerEvents: `${props.test && \"none\"}`\n    }\n  }, pages !== undefined && pages[page.count])))));\n}\n\nexport default Test;","map":null,"metadata":{},"sourceType":"module"}