{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestPreview.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\nimport addCompStyles from \"./styles/TestNamer.module.scss\";\nimport { closeBtn, CreateLangSwitchers } from \"./TestNamer\";\n\nvar TestPreview = function TestPreview(props) {\n  _s();\n\n  var _useState = useState(false),\n      isOpen = _useState[0],\n      setIsOpen = _useState[1];\n\n  var _useState2 = useState(\"ru\"),\n      selectedLang = _useState2[0],\n      setSelectedLang = _useState2[1];\n\n  var setSelectedLanguage = function setSelectedLanguage(chooseLanguage) {\n    setSelectedLang(chooseLanguage);\n    props.setCurrentLang(chooseLanguage);\n  };\n\n  var inputEnabler = function inputEnabler() {};\n\n  console.log(props.pageToRender);\n  props.pageToRender.map(function (ele) {\n    return console.log(ele.question);\n  });\n  var tmp = props.pageToRender;\n\n  var saveNewData = function saveNewData(qid, data, whatToSave) {\n    tmp[qid][whatToSave] = data; // console.log(tmp[qid][whatToSave]);\n    // console.log(\"from save new data\", tmp);\n\n    props.saveChanges(tmp);\n  };\n\n  var handleQuestionKeyPress = function handleQuestionKeyPress(event) {\n    event.key === \"Enter\" ? console.log(\"Efnter\") : undefined;\n  };\n\n  function textQuestion(iterator, // handleQuestionChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void,\n  qna) {\n    return __jsx(\"textarea\", {\n      defaultValue: \"Enter your text\",\n      id: String(iterator),\n      onChange: handleQuestionChange,\n      className: compStyles.Question,\n      onKeyPress: handleQuestionKeyPress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    });\n  }\n\n  function imgQuestion(iterator, // handleQuestionChange: (\n  // event: React.ChangeEvent<HTMLTextAreaElement>\n  // ) => void,\n  qna) {\n    return __jsx(\"div\", {\n      id: String(iterator),\n      className: compStyles.Question,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, \"\\uFF0B\"));\n  }\n\n  var handleAnswerChange = function handleAnswerChange(event) {\n    saveNewData(event.currentTarget.id, event.currentTarget.value, \"answer\");\n  };\n\n  function textAnswer(iterator, qna) {\n    // const [curValue, setCurValue] = useState(\"\");\n    // useEffect(() => {\n    //   console.log(curValue);\n    // }, [curValue]);\n    return __jsx(\"textarea\", {\n      // defaultValue={\"Enter your text\"}\n      id: String(iterator),\n      onChange: function onChange(e) {\n        handleAnswerChange(e); // setCurValue(e.currentTarget.value);\n      },\n      className: compStyles.Answer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }\n    }, qna.answer);\n  }\n\n  function imgAnswer(iterator, // handleQuestionChange: (\n  //   event: React.ChangeEvent<HTMLTextAreaElement>\n  // ) => void,\n  qna) {\n    return __jsx(\"div\", {\n      id: String(iterator),\n      className: compStyles.Question,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }, \"\\uFF0B\"));\n  }\n\n  function q_a_TextEntry(type, id) {\n    console.log(\"hello from a new beginninf\", type);\n    console.log(\"\".concat(compStyles[type]));\n    return __jsx(\"input\", {\n      className: \"\".concat(compStyles[type]),\n      type: \"text\",\n      name: \"qaTextEntry\",\n      id: String(id),\n      onChange: function onChange(e) {\n        return saveNewData(id, e.currentTarget.value, type);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }\n    });\n  }\n\n  var handleQuestionChange = function handleQuestionChange(event) {\n    console.log(\"\".concat(event.currentTarget.id, \":\"), event.currentTarget.value);\n    saveNewData(event.currentTarget.id, event.currentTarget.value, \"question\");\n  };\n\n  var pageBody = function pageBody() {\n    return props.pageToRender.map(function (qna, iterator) {\n      return __jsx(\"div\", {\n        key: iterator,\n        id: String(iterator),\n        className: compStyles.qnaPair,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 7\n        }\n      }, __jsx(\"div\", {\n        className: \"\".concat(compStyles.ModalContainerBG, \" \").concat(!isOpen ? addCompStyles.Hidden : null),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }\n      }, __jsx(\"div\", {\n        className: addCompStyles.ModalContainer,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }\n      }, closeBtn(setIsOpen), __jsx(\"div\", {\n        className: compStyles.Modal,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }\n      }, CreateLangSwitchers(setSelectedLanguage, inputEnabler), __jsx(\"div\", {\n        className: addCompStyles.NameForm,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }\n      }, props.testType = 'TT' ? q_a_TextEntry('question', iterator) : null)))));\n    });\n  };\n\n  props.testType === \"\" ? console.log(\"no test type\") : console.log(props.testType);\n  return __jsx(\"div\", {\n    className: styles.TestPreview,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }, \"Page: \", props.activePage + 1), __jsx(\"div\", {\n    className: \"\".concat(compStyles.TestBGContainer),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }, __jsx(FMLogo, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: compStyles.pageBody,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }, props.testType === \"\" ? __jsx(\"div\", {\n    className: compStyles.tTypeWarning,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 15\n    }\n  }, \"Please choose a test type\")) : pageBody())));\n};\n\n_s(TestPreview, \"Uh0F0rW/deuF+Uo2Os0S4H/LVf0=\");\n\n_c = TestPreview;\nexport default TestPreview;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestPreview\");","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestPreview.tsx"],"names":["React","useState","styles","FMLogo","compStyles","addCompStyles","closeBtn","CreateLangSwitchers","TestPreview","props","isOpen","setIsOpen","selectedLang","setSelectedLang","setSelectedLanguage","chooseLanguage","setCurrentLang","inputEnabler","console","log","pageToRender","map","ele","question","tmp","saveNewData","qid","data","whatToSave","saveChanges","handleQuestionKeyPress","event","key","undefined","textQuestion","iterator","qna","String","handleQuestionChange","Question","imgQuestion","handleAnswerChange","currentTarget","id","value","textAnswer","e","Answer","answer","imgAnswer","q_a_TextEntry","type","pageBody","qnaPair","ModalContainerBG","Hidden","ModalContainer","Modal","NameForm","testType","activePage","TestBGContainer","tTypeWarning"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { containerCSS } from \"react-select/src/components/containers\";\nimport {\n  ILangSpecificBody,\n  IQnA,\n  IQnAPairs,\n  ITest,\n  TLangOption,\n  TTestTypes,\n} from \"../@types/test\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\nimport addCompStyles from \"./styles/TestNamer.module.scss\";\nimport { closeBtn, CreateLangSwitchers } from \"./TestNamer\";\n\nconst TestPreview = (props: {\n  activePage: number;\n  currentLanguage: TLangOption[\"value\"] | undefined;\n  // currentTestState: ITest;\n  pageToRender: IQnA[];\n  setCurrentLang: (lang: TLangOption[\"value\"]) => void;\n  testType: ITest[\"type\"];\n  saveChanges: (page: any) => void;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedLang, setSelectedLang] = useState<TLangOption[\"value\"]>(\"ru\");\n  const setSelectedLanguage = (chooseLanguage: TLangOption[\"value\"]): void => {\n    setSelectedLang(chooseLanguage);\n    props.setCurrentLang(chooseLanguage);\n  };\n  const inputEnabler = () => {};\n\n  console.log(props.pageToRender);\n  props.pageToRender.map((ele) => console.log(ele.question));\n\n  let tmp = props.pageToRender;\n\n  const saveNewData = (\n    qid: number,\n    data: string,\n    whatToSave: \"answer\" | \"question\"\n  ) => {\n    tmp[qid][whatToSave] = data;\n    // console.log(tmp[qid][whatToSave]);\n    // console.log(\"from save new data\", tmp);\n    props.saveChanges(tmp);\n  };\n\n  const handleQuestionKeyPress = (\n    event: React.KeyboardEvent<HTMLTextAreaElement>\n  ) => {\n    event.key === \"Enter\" ? console.log(\"Efnter\") : undefined;\n  };\n\n  function textQuestion(\n    iterator: number,\n    // handleQuestionChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void,\n    qna: IQnA\n  ) {\n    return (\n      <textarea\n        defaultValue={\"Enter your text\"}\n        id={String(iterator)}\n        onChange={handleQuestionChange}\n        className={compStyles.Question}\n        onKeyPress={handleQuestionKeyPress}\n      >\n        {/* {qna.question} */}\n      </textarea>\n    );\n  }\n  function imgQuestion(\n    iterator: number,\n    // handleQuestionChange: (\n    // event: React.ChangeEvent<HTMLTextAreaElement>\n    // ) => void,\n    qna: IQnA\n  ) {\n    return (\n      <div id={String(iterator)} className={compStyles.Question}>\n        <span>＋</span>\n      </div>\n    );\n  }\n\n  const handleAnswerChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    saveNewData(event.currentTarget.id, event.currentTarget.value, \"answer\");\n  };\n\n  function textAnswer(iterator: number, qna: IQnA) {\n    // const [curValue, setCurValue] = useState(\"\");\n\n    // useEffect(() => {\n    //   console.log(curValue);\n    // }, [curValue]);\n\n    return (\n      <textarea\n        // defaultValue={\"Enter your text\"}\n        id={String(iterator)}\n        onChange={(e) => {\n          handleAnswerChange(e);\n          // setCurValue(e.currentTarget.value);\n        }}\n        className={compStyles.Answer}\n      >\n        {qna.answer}\n      </textarea>\n    );\n  }\n\n  function imgAnswer(\n    iterator: number,\n    // handleQuestionChange: (\n    //   event: React.ChangeEvent<HTMLTextAreaElement>\n    // ) => void,\n    qna: IQnA\n  ) {\n    return (\n      <div id={String(iterator)} className={compStyles.Question}>\n        <span>＋</span>\n      </div>\n    );\n  }\n\n  function q_a_TextEntry(type: \"answer\" | \"question\", id: number) {\n    console.log(\"hello from a new beginninf\", type);\n    console.log(`${compStyles[type]}`);\n    return (\n      <input\n        className={`${compStyles[type]}`}\n        type=\"text\"\n        name=\"qaTextEntry\"\n        id={String(id)}\n        onChange={(e) => saveNewData(id, e.currentTarget.value, type)}\n      />\n    );\n  }\n\n  const handleQuestionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    console.log(`${event.currentTarget.id}:`, event.currentTarget.value);\n    saveNewData(event.currentTarget.id, event.currentTarget.value, \"question\");\n  };\n\n  const pageBody = () =>\n    props.pageToRender.map((qna: IQnA, iterator: number) => (\n      <div key={iterator} id={String(iterator)} className={compStyles.qnaPair}>\n        {/* For question rendering */}\n        {/* {props.testType === \"TT\" ? q_a_TextEntry(\"question\", iterator) : null}\n        {props.testType === \"PP\" || props.testType === \"PT\"\n          ? imgQuestion(iterator, qna)\n          : null} */}\n        {/* For answer rendering */}\n        {/* {props.testType === \"TT\" || props.testType === \"PT\"\n          ? q_a_TextEntry(\"answer\", iterator)\n          : null}\n        {props.testType === \"PP\" ? imgAnswer(iterator, qna) : null} */}\n        {\n          <div\n            className={`${compStyles.ModalContainerBG} ${\n              !isOpen ? addCompStyles.Hidden : null\n            }`}\n          >\n            <div className={addCompStyles.ModalContainer}>\n              {closeBtn(setIsOpen)}\n              <div className={compStyles.Modal}>\n                {CreateLangSwitchers(setSelectedLanguage, inputEnabler)}\n                <div className={addCompStyles.NameForm} >\n                  {props.testType='TT' ? q_a_TextEntry('question', iterator) : null}\n                </div>\n              </div>\n            </div>\n          </div>\n        }\n      </div>\n    ));\n\n  props.testType === \"\"\n    ? console.log(\"no test type\")\n    : console.log(props.testType);\n\n  return (\n    <div className={styles.TestPreview}>\n      <h3>Page: {props.activePage + 1}</h3>\n\n      <div className={`${compStyles.TestBGContainer}`}>\n        <FMLogo />\n        <div className={compStyles.pageBody}>\n          {props.testType === \"\" ? (\n            <div className={compStyles.tTypeWarning}>\n              <h1>Please choose a test type</h1>\n            </div>\n          ) : (\n            pageBody()\n          )}\n          {/* {pageBody()} */}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TestPreview;\n"]},"metadata":{},"sourceType":"module"}