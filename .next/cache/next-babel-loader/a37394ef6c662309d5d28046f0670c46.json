{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Axios from \"axios\"; //const jwt = document.cookie.slice(document.cookie.indexOf('=') + 1);\n\nimport React, { useEffect, useState } from \"react\";\nimport ActiveTests from \"../../components/ActiveTests\";\nimport { productionURL, productionHost } from \"../../components/constants\";\nimport Gallery from \"../../components/Gallery\";\nimport { motion } from \"framer-motion\";\nimport styles from \"../styles/main.module.scss\";\nimport { pageAppearance } from \"./create_test\";\nimport PleaseWaitModal from \"../../components/PleaseWaitModal\";\nimport FMLogo from \"../../components/FMlogo\";\nimport checkJWT from \"../../components/jwtChecker\";\nimport { useRouter } from \"next/router\";\n\nvar main = function main() {\n  var router = useRouter();\n\n  var getTestsByActive = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(isTestActive) {\n      var _tests;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return Axios.get(\"http://192.168.8.100:4000/tests/getTest?active=\".concat(isTestActive));\n\n            case 3:\n              _tests = _context.sent;\n              console.log(_tests.data, \"recieved tests\");\n              return _context.abrupt(\"return\", _tests.data);\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(Object.keys(_context.t0), _context.t0.message);\n              return _context.abrupt(\"return\", []);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function getTestsByActive(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var _useState = useState(false),\n      hasEverythingFetched = _useState[0],\n      setHasEverythingFetched = _useState[1];\n\n  var _useState2 = useState({\n    activeTests: [],\n    inActiveTests: []\n  }),\n      tests = _useState2[0],\n      setTests = _useState2[1];\n\n  var getAllTests = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var serverResponse, data, tmpactiveTests, tmpinActiveTests;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setHasEverythingFetched(false);\n              _context2.prev = 1;\n              _context2.next = 4;\n              return Axios.get(\"\".concat(productionURL, \"tests/allTests\"));\n\n            case 4:\n              serverResponse = _context2.sent;\n              data = serverResponse.data;\n              setHasEverythingFetched(true);\n              tmpactiveTests = [];\n              tmpinActiveTests = [];\n              filterTests(tmpactiveTests, tmpinActiveTests, data);\n              setTests({\n                activeTests: tmpactiveTests,\n                inActiveTests: tmpinActiveTests\n              });\n              _context2.next = 16;\n              break;\n\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(Object.keys(_context2.t0), _context2.t0.message);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 13]]);\n    }));\n\n    return function getAllTests() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var filterTests = function filterTests(activeTests, inActiveTests, arrToFilter) {\n    arrToFilter.forEach(function (test) {\n      if (test.active !== undefined) {\n        test.active ? activeTests.push(test) : inActiveTests.push(test);\n      }\n    });\n  };\n\n  var toggleTest = function toggleTest(testID) {\n    var tmpActive = tests.activeTests;\n    var tmpInactive = tests.inActiveTests;\n    var combinedTests = [].concat(_toConsumableArray(tests.activeTests), _toConsumableArray(tests.inActiveTests));\n    combinedTests.forEach(function (test) {\n      if (test._id === testID) {\n        if (combinedTests.indexOf(test) < tmpActive.length) {\n          tmpActive.splice(tmpActive.indexOf(test), 1);\n          tmpInactive.push(_objectSpread(_objectSpread({}, test), {}, {\n            active: !test.active\n          }));\n        } else {\n          tmpInactive.splice(tmpInactive.indexOf(test), 1);\n          tmpActive.push(_objectSpread(_objectSpread({}, test), {}, {\n            active: !test.active\n          }));\n        }\n      }\n    });\n    setTests({\n      activeTests: tmpActive,\n      inActiveTests: tmpInactive\n    });\n  };\n\n  useEffect(function () {\n    // Axios.defaults.headers.common[\"Authorization\"] =\n    //   \"Bearer \" + store.get(\"jwt\");\n    if (checkJWT() === false) {\n      router.replace(\"\".concat(productionHost, \"/tms/auth\"));\n    }\n\n    getAllTests();\n  }, []);\n  return __jsx(motion.div, {\n    className: styles.MainContainer,\n    variants: pageAppearance,\n    initial: \"hidden\",\n    animate: \"visible\"\n  }, __jsx(\"div\", {\n    className: styles.FMLogo\n  }, __jsx(FMLogo, null)), __jsx(PleaseWaitModal, {\n    isDisplayed: !hasEverythingFetched\n  }), __jsx(ActiveTests // getActiveTests={getTestsByActive}\n  , {\n    tests: tests,\n    activeTests: tests.activeTests,\n    updateTheTests: toggleTest,\n    fetchAllTests: getAllTests\n  }), __jsx(Gallery // getInactiveTests={getTestsByActive}\n  , {\n    testsToRender: tests.inActiveTests,\n    updateTheTests: toggleTest,\n    fetchAllTests: getAllTests\n  }));\n};\n\nexport default main;","map":null,"metadata":{},"sourceType":"module"}