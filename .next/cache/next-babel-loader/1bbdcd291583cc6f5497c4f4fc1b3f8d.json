{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestPreview.tsx\";\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\n\nvar TestPreview = function TestPreview(props) {\n  console.log(props.pageToRender);\n  var tmp = props.pageToRender;\n\n  var saveNewData = function saveNewData(qid, data, whatToSave) {\n    tmp[qid][whatToSave] = data;\n    props.saveChanges(tmp);\n  };\n\n  var handleQuestionKeyPress = function handleQuestionKeyPress(event) {\n    event.key === \"Enter\" ? console.log(\"Efnter\") : undefined;\n  };\n\n  function textQuestion(iterator, // handleQuestionChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void,\n  qna) {\n    return __jsx(\"textarea\", {\n      // defaultValue={\"Enter your text\"}\n      id: String(iterator),\n      onChange: handleQuestionChange,\n      className: compStyles.Question,\n      onKeyPress: handleQuestionKeyPress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, qna.question);\n  }\n\n  function imgQuestion(iterator, // handleQuestionChange: (\n  // event: React.ChangeEvent<HTMLTextAreaElement>\n  // ) => void,\n  qna) {\n    return __jsx(\"div\", {\n      id: String(iterator),\n      className: compStyles.Question,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }, \"\\uFF0B\"));\n  }\n\n  var handleAnswerChange = function handleAnswerChange(event) {\n    saveNewData(event.currentTarget.id, event.currentTarget.value, \"answer\");\n  };\n\n  function textAnswer(iterator, qna) {\n    // const [curValue, setCurValue] = useState(\"\");\n    // useEffect(() => {\n    //   console.log(curValue);\n    // }, [curValue]);\n    return __jsx(\"textarea\", {\n      // defaultValue={\"Enter your text\"}\n      id: String(iterator),\n      onChange: function onChange(e) {\n        handleAnswerChange(e); // setCurValue(e.currentTarget.value);\n      },\n      className: compStyles.Answer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, qna.answer);\n  }\n\n  function imgAnswer(iterator, // handleQuestionChange: (\n  //   event: React.ChangeEvent<HTMLTextAreaElement>\n  // ) => void,\n  qna) {\n    return __jsx(\"div\", {\n      id: String(iterator),\n      className: compStyles.Question,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, \"\\uFF0B\"));\n  }\n\n  var handleQuestionChange = function handleQuestionChange(event) {\n    console.log(\"\".concat(event.currentTarget.id, \":\"), event.currentTarget.value);\n    saveNewData(event.currentTarget.id, event.currentTarget.value, \"question\");\n  };\n\n  var pageBody = function pageBody() {\n    return props.pageToRender.map(function (qna, iterator) {\n      return __jsx(\"div\", {\n        key: iterator,\n        id: String(iterator),\n        className: compStyles.qnaPair,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 7\n        }\n      }, props.testType === \"TT\" ? textQuestion(iterator, qna) : null, props.testType === \"PP\" || props.testType === \"PT\" ? imgQuestion(iterator, qna) : null, props.testType === \"TT\" || props.testType === \"PT\" ? textAnswer(iterator, qna) : null, props.testType === \"PP\" ? imgAnswer(iterator, qna) : null);\n    });\n  };\n\n  props.testType === \"\" ? console.log(\"no test type\") : console.log(props.testType);\n  return __jsx(\"div\", {\n    className: styles.TestPreview,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, \"Page: \", props.activePage + 1), __jsx(\"div\", {\n    className: \"\".concat(compStyles.TestBGContainer),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }, __jsx(FMLogo, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: compStyles.pageBody,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, props.testType === \"\" ? __jsx(\"div\", {\n    className: compStyles.tTypeWarning,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  }, \"Please choose a test type\")) : pageBody())));\n};\n\n_c = TestPreview;\nexport default TestPreview;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestPreview\");","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestPreview.tsx"],"names":["React","styles","FMLogo","compStyles","TestPreview","props","console","log","pageToRender","tmp","saveNewData","qid","data","whatToSave","saveChanges","handleQuestionKeyPress","event","key","undefined","textQuestion","iterator","qna","String","handleQuestionChange","Question","question","imgQuestion","handleAnswerChange","currentTarget","id","value","textAnswer","e","Answer","answer","imgAnswer","pageBody","map","qnaPair","testType","activePage","TestBGContainer","tTypeWarning"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { containerCSS } from \"react-select/src/components/containers\";\nimport {\n  ILangSpecificBody,\n  IQnA,\n  IQnAPairs,\n  ITest,\n  TLangOption,\n  TTestTypes,\n} from \"../@types/test\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\n\nconst TestPreview = (props: {\n  activePage: number;\n  currentLanguage: TLangOption[\"value\"] | undefined;\n  // currentTestState: ITest;\n  pageToRender: IQnA[];\n  testType: ITest[\"type\"];\n  saveChanges: (page: any) => void;\n}) => {\n  console.log(props.pageToRender);\n\n  let tmp = props.pageToRender;\n\n  const saveNewData = (\n    qid: number,\n    data: string,\n    whatToSave: IQnA[\"answer\" | \"question\"]\n  ) => {\n    tmp[qid][whatToSave] = data;\n    props.saveChanges(tmp);\n  };\n\n  const handleQuestionKeyPress = (\n    event: React.KeyboardEvent<HTMLTextAreaElement>\n  ) => {\n    event.key === \"Enter\" ? console.log(\"Efnter\") : undefined;\n  };\n\n  function textQuestion(\n    iterator: number,\n    // handleQuestionChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void,\n    qna: IQnA\n  ) {\n    return (\n      <textarea\n        // defaultValue={\"Enter your text\"}\n        id={String(iterator)}\n        onChange={handleQuestionChange}\n        className={compStyles.Question}\n        onKeyPress={handleQuestionKeyPress}\n      >\n        {qna.question}\n      </textarea>\n    );\n  }\n  function imgQuestion(\n    iterator: number,\n    // handleQuestionChange: (\n    // event: React.ChangeEvent<HTMLTextAreaElement>\n    // ) => void,\n    qna: IQnA\n  ) {\n    return (\n      <div id={String(iterator)} className={compStyles.Question}>\n        <span>＋</span>\n      </div>\n    );\n  }\n\n  const handleAnswerChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    saveNewData(event.currentTarget.id, event.currentTarget.value, \"answer\");\n  };\n\n  function textAnswer(iterator: number, qna: IQnA) {\n    // const [curValue, setCurValue] = useState(\"\");\n\n    // useEffect(() => {\n    //   console.log(curValue);\n    // }, [curValue]);\n\n    return (\n      <textarea\n        // defaultValue={\"Enter your text\"}\n        id={String(iterator)}\n        onChange={(e) => {\n          handleAnswerChange(e);\n          // setCurValue(e.currentTarget.value);\n        }}\n        className={compStyles.Answer}\n      >\n        {qna.answer}\n      </textarea>\n    );\n  }\n\n  function imgAnswer(\n    iterator: number,\n    // handleQuestionChange: (\n    //   event: React.ChangeEvent<HTMLTextAreaElement>\n    // ) => void,\n    qna: IQnA\n  ) {\n    return (\n      <div id={String(iterator)} className={compStyles.Question}>\n        <span>＋</span>\n      </div>\n    );\n  }\n\n  const handleQuestionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    console.log(`${event.currentTarget.id}:`, event.currentTarget.value);\n    saveNewData(event.currentTarget.id, event.currentTarget.value, \"question\");\n  };\n\n  const pageBody = () =>\n    props.pageToRender.map((qna: IQnA, iterator: number) => (\n      <div key={iterator} id={String(iterator)} className={compStyles.qnaPair}>\n        {/* For question rendering */}\n        {props.testType === \"TT\" ? textQuestion(iterator, qna) : null}\n        {props.testType === \"PP\" || props.testType === \"PT\"\n          ? imgQuestion(iterator, qna)\n          : null}\n        {/* For answer rendering */}\n        {props.testType === \"TT\" || props.testType === \"PT\"\n          ? textAnswer(iterator, qna)\n          : null}\n        {props.testType === \"PP\" ? imgAnswer(iterator, qna) : null}\n      </div>\n    ));\n\n  props.testType === \"\"\n    ? console.log(\"no test type\")\n    : console.log(props.testType);\n\n  return (\n    <div className={styles.TestPreview}>\n      <h3>Page: {props.activePage + 1}</h3>\n\n      <div className={`${compStyles.TestBGContainer}`}>\n        <FMLogo />\n        <div className={compStyles.pageBody}>\n          {props.testType === \"\" ? (\n            <div className={compStyles.tTypeWarning}>\n              <h1>Please choose a test type</h1>\n            </div>\n          ) : (\n            pageBody()\n          )}\n          {/* {pageBody()} */}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TestPreview;\n"]},"metadata":{},"sourceType":"module"}