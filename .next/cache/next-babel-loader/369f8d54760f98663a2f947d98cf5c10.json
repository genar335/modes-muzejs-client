{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestPreview.tsx\";\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\n\nvar TestPreview = function TestPreview(props) {\n  console.log(props.pageToRender); // function handleTextAreaQuestionChange(\n  //   event: React.ChangeEvent<HTMLTextAreaElement>\n  // ) {\n  //   // let tmpArray =\n  //   //   props.currentTestState[props.currentLanguage!].pages[props.activePage]\n  //   //     .QnAPairs;\n  //   // console.log(\"tmp\", tmpArray);\n  //   // tmpArray.forEach((ele) => console.log(ele));\n  //   const tmpArray = props.currentTestState[props.currentLanguage!].pages;\n  //   // console.log(tmpArray);\n  //   // console.log(tmpArray[props.activePage]);\n  //   // console.log(tmpArray[props.activePage].QnAPairs[event.currentTarget.id]);\n  //   tmpArray[props.activePage].QnAPairs[event.currentTarget.id].question =\n  //     event.currentTarget.value;\n  //   // console.log(tmpArray);\n  //   props.saveChanges({\n  //     ...props.currentTestState,\n  //     [props.currentLanguage!]: {\n  //       ...props.currentTestState[props.currentLanguage!],\n  //       pages: tmpArray,\n  //     },\n  //   });\n  // }\n\n  function questionRenderController(currentItem, currentPair) {\n    switch (props.testType) {\n      case \"TT\":\n        return;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  var handleQuestionChange = function handleQuestionChange(event) {\n    console.log(\"\".concat(event.currentTarget.id, \":\"), event.currentTarget.value);\n  };\n\n  var pageBody = function pageBody() {\n    return props.pageToRender.QnAPairs.map(function (qna, iterator) {\n      return __jsx(\"div\", {\n        key: iterator,\n        id: String(iterator),\n        className: compStyles.qnaPair,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 7\n        }\n      }, textQuestion(iterator, handleQuestionChange, qna), textAnswer(iterator, qna));\n    });\n  };\n\n  props.testType === \"\" ? console.log(\"no test type\") : console.log(props.testType);\n  return __jsx(\"div\", {\n    className: styles.TestPreview,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, \"Page: \", props.activePage + 1), __jsx(\"div\", {\n    className: \"\".concat(compStyles.TestBGContainer),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, __jsx(FMLogo, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: compStyles.pageBody,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, props.testType === \"\" ? __jsx(\"div\", {\n    className: compStyles.tTypeWarning,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }, \"Please choose a test type\")) : pageBody())));\n};\n\n_c = TestPreview;\nexport default TestPreview;\n\nfunction textAnswer(iterator, qna) {\n  return __jsx(\"textarea\", {\n    id: String(iterator) // onChange={handleAnswerChange}\n    ,\n    className: compStyles.Answer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, qna.answer);\n}\n\nfunction textQuestion(iterator, handleQuestionChange, qna) {\n  return __jsx(\"textarea\", {\n    id: String(iterator),\n    onChange: handleQuestionChange,\n    className: compStyles.Question,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, qna.question);\n}\n\nfunction imgQuestion(iterator, handleQuestionChange, qna) {\n  return __jsx(\"div\", {\n    id: String(iterator),\n    className: compStyles.Question,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, \"\\uFF0B\"));\n}\n\nfunction imgAnswer(iterator, handleQuestionChange, qna) {\n  return __jsx(\"div\", {\n    id: String(iterator),\n    className: compStyles.Question,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, \"\\uFF0B\"));\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"TestPreview\");","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/TestPreview.tsx"],"names":["React","styles","FMLogo","compStyles","TestPreview","props","console","log","pageToRender","questionRenderController","currentItem","currentPair","testType","handleQuestionChange","event","currentTarget","id","value","pageBody","QnAPairs","map","qna","iterator","String","qnaPair","textQuestion","textAnswer","activePage","TestBGContainer","tTypeWarning","Answer","answer","Question","question","imgQuestion","imgAnswer"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport {\n  IQnA,\n  IQnAPairs,\n  ITest,\n  TLangOption,\n  TTestTypes,\n} from \"../@types/test\";\nimport styles from \"../pages/styles/create_test.module.scss\";\nimport FMLogo from \"./FMlogo\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\n\nconst TestPreview = (props: {\n  activePage: number;\n  currentLanguage: TLangOption[\"value\"] | undefined;\n  // currentTestState: ITest;\n  pageToRender: any;\n  testType: ITest[\"type\"];\n  saveChanges: (test: ITest) => void;\n}) => {\n  console.log(props.pageToRender);\n\n  // function handleTextAreaQuestionChange(\n  //   event: React.ChangeEvent<HTMLTextAreaElement>\n  // ) {\n  //   // let tmpArray =\n  //   //   props.currentTestState[props.currentLanguage!].pages[props.activePage]\n  //   //     .QnAPairs;\n  //   // console.log(\"tmp\", tmpArray);\n  //   // tmpArray.forEach((ele) => console.log(ele));\n  //   const tmpArray = props.currentTestState[props.currentLanguage!].pages;\n  //   // console.log(tmpArray);\n  //   // console.log(tmpArray[props.activePage]);\n  //   // console.log(tmpArray[props.activePage].QnAPairs[event.currentTarget.id]);\n  //   tmpArray[props.activePage].QnAPairs[event.currentTarget.id].question =\n  //     event.currentTarget.value;\n  //   // console.log(tmpArray);\n  //   props.saveChanges({\n  //     ...props.currentTestState,\n  //     [props.currentLanguage!]: {\n  //       ...props.currentTestState[props.currentLanguage!],\n  //       pages: tmpArray,\n  //     },\n  //   });\n  // }\n\n  function questionRenderController(currentItem: number, currentPair: IQnA) {\n    switch (props.testType) {\n      case \"TT\":\n        return;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  const handleQuestionChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    console.log(`${event.currentTarget.id}:`, event.currentTarget.value);\n  };\n\n  const pageBody = () =>\n    props.pageToRender.QnAPairs.map((qna: IQnA, iterator: number) => (\n      <div key={iterator} id={String(iterator)} className={compStyles.qnaPair}>\n        {textQuestion(iterator, handleQuestionChange, qna)}\n        {textAnswer(iterator, qna)}\n      </div>\n    ));\n\n  props.testType === \"\"\n    ? console.log(\"no test type\")\n    : console.log(props.testType);\n\n  return (\n    <div className={styles.TestPreview}>\n      <h3>Page: {props.activePage + 1}</h3>\n\n      <div className={`${compStyles.TestBGContainer}`}>\n        <FMLogo />\n        <div className={compStyles.pageBody}>\n          {props.testType === \"\" ? (\n            <div className={compStyles.tTypeWarning}>\n              <h1>Please choose a test type</h1>\n            </div>\n          ) : (\n            pageBody()\n          )}\n          {/* {pageBody()} */}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TestPreview;\nfunction textAnswer(iterator: number, qna: IQnA) {\n  return (\n    <textarea\n      id={String(iterator)}\n      // onChange={handleAnswerChange}\n      className={compStyles.Answer}\n    >\n      {qna.answer}\n    </textarea>\n  );\n}\n\nfunction textQuestion(\n  iterator: number,\n  handleQuestionChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void,\n  qna: IQnA\n) {\n  return (\n    <textarea\n      id={String(iterator)}\n      onChange={handleQuestionChange}\n      className={compStyles.Question}\n    >\n      {qna.question}\n    </textarea>\n  );\n}\n\nfunction imgQuestion(\n  iterator: number,\n  handleQuestionChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void,\n  qna: IQnA\n) {\n  return (\n    <div id={String(iterator)} className={compStyles.Question}>\n      <span>＋</span>\n    </div>\n  );\n}\nfunction imgAnswer(\n  iterator: number,\n  handleQuestionChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void,\n  qna: IQnA\n) {\n  return (\n    <div id={String(iterator)} className={compStyles.Question}>\n      <span>＋</span>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}