{"ast":null,"code":"var _jsxFileName = \"/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/QACard.tsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState } from \"react\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\nimport addCompStyles from \"./styles/TestNamer.module.scss\";\nimport { closeBtn, CreateLangSwitchers } from \"./TestNamer\";\n\nconst QACard = props => {\n  const charLimit = 90;\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n  console.log(props.cardContents);\n\n  const textPreviewer = text => {\n    if (text.length < 1) return __jsx(\"div\", {\n      className: compStyles.emptyText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 33\n      }\n    }, \"T\");\n\n    if (text.length > charLimit) {\n      return text.slice(0, 90) + \"...\";\n    } else {\n      return text;\n    }\n  };\n\n  async function readUploadedIMG(inputFile) {\n    const tmpFileReader = new FileReader();\n    return new Promise((resolve, reject) => {\n      tmpFileReader.onerror = () => {\n        tmpFileReader.abort();\n        reject(new DOMException(\"Problem parsing input file.\"));\n      };\n\n      tmpFileReader.onload = () => {\n        resolve(tmpFileReader.result);\n      };\n\n      tmpFileReader.readAsDataURL(inputFile);\n    });\n  }\n\n  const handleUpload = async event => {\n    const file = event.target.files[0];\n\n    try {\n      const fileContents = await readUploadedFileAsText(file);\n      console.log(fileContents);\n    } catch (e) {\n      console.warn(e.message);\n    }\n  };\n\n  const {\n    0: uploadedImg,\n    1: setUploadedImg\n  } = useState();\n  const {\n    0: upIMGs,\n    1: setUpIMGs\n  } = useState([]);\n\n  async function handleFileInput(event) {\n    event.preventDefault();\n\n    if (fileInput.current !== null) {}\n  }\n\n  const fileInput = useRef(null);\n  return __jsx(\"div\", {\n    className: `${compStyles[props.cardType]}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    id: String(props.iterator),\n    className: `${addCompStyles.ModalContainerBG} ${!isOpen ? addCompStyles.Hidden : null}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: addCompStyles.ModalContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, closeBtn(setIsOpen), __jsx(\"div\", {\n    className: addCompStyles.Modal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, CreateLangSwitchers(props.setSelectedLanguage, props.inputEnabler), __jsx(\"div\", {\n    className: addCompStyles.NameForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, props.cardContents === \"text\" ? props.q_a_TextEntry(props.cardType, props.iterator) : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, __jsx(\"form\", {\n    onSubmit: handleFileInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 19\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }, \"Upload image\"), __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    accept: \"image/*\",\n    ref: fileInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }), __jsx(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, \"Placeholder for image upload\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }\n  }, uploadedImg))))))), __jsx(\"p\", {\n    className: compStyles.QADescription,\n    onClick: e => setIsOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, props.cardContents === \"text\" ? textPreviewer(props.qna[props.cardType]) : __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, \"+\")));\n};\n\nexport default QACard;","map":{"version":3,"sources":["/Users/yberfox228/Documents/itlemonade/f-museum/tech/CS/modes-muzejs-client/components/QACard.tsx"],"names":["React","useRef","useState","compStyles","addCompStyles","closeBtn","CreateLangSwitchers","QACard","props","charLimit","isOpen","setIsOpen","console","log","cardContents","textPreviewer","text","length","emptyText","slice","readUploadedIMG","inputFile","tmpFileReader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","readAsDataURL","handleUpload","event","file","target","files","fileContents","readUploadedFileAsText","e","warn","message","uploadedImg","setUploadedImg","upIMGs","setUpIMGs","handleFileInput","preventDefault","fileInput","current","cardType","String","iterator","ModalContainerBG","Hidden","ModalContainer","Modal","setSelectedLanguage","inputEnabler","NameForm","q_a_TextEntry","QADescription","qna"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { IQnA, TLangOption } from \"../@types/test\";\nimport compStyles from \"./styles/TestPreview.module.scss\";\nimport addCompStyles from \"./styles/TestNamer.module.scss\";\nimport { closeBtn, CreateLangSwitchers } from \"./TestNamer\";\nimport { read } from \"fs\";\nimport { readFile } from \"fs/promises\";\n\nconst QACard = (props: {\n  cardType: \"answer\" | \"question\";\n  cardContents: \"img\" | \"text\";\n  // saveData: (data) => void;\n  iterator: number;\n  setSelectedLanguage: (chooseLanguage: TLangOption[\"value\"]) => void;\n  inputEnabler: () => void;\n  qna: IQnA;\n  testType: any;\n  q_a_TextEntry: (type: \"answer\" | \"question\", id: number) => JSX.Element;\n}) => {\n  const charLimit = 90;\n  const [isOpen, setIsOpen] = useState(false);\n  console.log(props.cardContents);\n  const textPreviewer = (text: string) => {\n    if (text.length < 1) return <div className={compStyles.emptyText}>T</div>;\n    if (text.length > charLimit) {\n      return text.slice(0, 90) + \"...\";\n    } else {\n      return text;\n    }\n  };\n\n  async function readUploadedIMG(inputFile) {\n    const tmpFileReader = new FileReader();\n\n    return new Promise((resolve, reject) => {\n      tmpFileReader.onerror = () => {\n        tmpFileReader.abort();\n        reject(new DOMException(\"Problem parsing input file.\"));\n      }\n\n      tmpFileReader.onload = () => {\n        resolve(tmpFileReader.result)\n      };\n      tmpFileReader.readAsDataURL(inputFile)\n    })\n  }\n  \n  const handleUpload = async (event) => {\n    const file = event.target.files[0];\n  \n    try {\n      const fileContents = await readUploadedFileAsText(file)  \n      console.log(fileContents);\n    } catch (e) {\n      console.warn(e.message)\n    }\n  }\n\n  const [uploadedImg, setUploadedImg] = useState<Blob>();\n  const [upIMGs, setUpIMGs] = useState<Array<any>>([]);\n  async function handleFileInput(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    if (fileInput.current !== null) {\n      \n    }\n  }\n  const fileInput = useRef<HTMLInputElement>(null);\n\n  return (\n    <div className={`${compStyles[props.cardType]}`}>\n      <div\n        id={String(props.iterator)}\n        className={`${addCompStyles.ModalContainerBG} ${\n          !isOpen ? addCompStyles.Hidden : null\n        }`}\n      >\n        <div className={addCompStyles.ModalContainer}>\n          {closeBtn(setIsOpen)}\n          <div className={addCompStyles.Modal}>\n            {CreateLangSwitchers(props.setSelectedLanguage, props.inputEnabler)}\n            <div className={addCompStyles.NameForm}>\n              {props.cardContents === \"text\" ? (\n                props.q_a_TextEntry(props.cardType, props.iterator)\n              ) : (\n                <div>\n                  <form onSubmit={handleFileInput}>\n                    <label>Upload image</label>\n                    <input\n                      type=\"file\"\n                      multiple\n                      accept=\"image/*\"\n                      ref={fileInput}\n                    />\n                    <input type=\"submit\" value=\"Submit\" />\n                    <p>Placeholder for image upload</p>\n                    <p>{uploadedImg}</p>\n                  </form>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      <p className={compStyles.QADescription} onClick={(e) => setIsOpen(true)}>\n        {props.cardContents === \"text\" ? (\n          textPreviewer(props.qna[props.cardType])\n        ) : (\n          <p>+</p>\n        )}\n      </p>\n    </div>\n  );\n};\nexport default QACard;\n"]},"metadata":{},"sourceType":"module"}